// src/App.jsx
import React, { useState, useCallback, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Routes, Route, useNavigate, useLocation } from 'react-router-dom';

// –ò–º–ø–æ—Ä—Ç—ã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import MainMenu from "./components/MainMenu";
import Level from "./components/Level";
import Inventory from "./components/Inventory";
import Shop from "./components/Shop";
import BottomNav from "./components/BottomNav";
import UsernamePopup from "./components/UsernamePopup";
// import PowerLevel from "./components/PowerLevel"; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏–ª—ã - –ë–û–õ–¨–®–ï –ù–ï –ù–£–ñ–ï–ù –û–¢–î–ï–õ–¨–ù–û
// import ResourceBar from "./components/ResourceBar"; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ - –ë–û–õ–¨–®–ï –ù–ï –ù–£–ñ–ï–ù –û–¢–î–ï–õ–¨–ù–û
import Forge from "./components/Forge";
import Achievements from "./components/Achievements";
import RaceSelection from "./components/RaceSelection";
import LoadingScreen from "./components/LoadingScreen";

// –ò–º–ø–æ—Ä—Ç—ã –£—Ç–∏–ª–∏—Ç –∏ –°—Ç–æ—Ä–∞
import useGameStore from "./store/useGameStore"; // <--- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
import './App.scss'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è .app-header, .header-top-left, .header-top-center, .header-top-right, .resource-group-vertical, .player-avatar, .player-info, .energy-bar –∏ —Ç.–¥. –∏ padding –¥–ª—è .app-container —Å env()


const App = () => {
    // === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
    const [isInitialLoading, setIsInitialLoading] = useState(true);
    const [needsRaceSelection, setNeedsRaceSelection] = useState(false);
    const [activeLevelData, setActiveLevelData] = useState(null);
    const [loadingError, setLoadingError] = useState(null);
    const [isLoadingLevel, setIsLoadingLevel] = useState(false);

    // === –î–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ—Ä–∞ ===
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
    const { username, gold, diamonds, powerLevel /*, energy, avatarUrl */ } = useGameStore((state) => ({
        username: state.username,
        gold: state.gold,
        diamonds: state.diamonds,
        powerLevel: state.powerLevel, // <--- –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –≠–¢–ê –°–¢–†–û–ö–ê –ï–°–¢–¨ –ò –†–ê–ë–û–¢–ê–ï–¢
        // energy: state.energy,       // <--- –û–°–¢–ê–í–ò–¢–¨ –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–ú / –£–î–ê–õ–ò–¢–¨, –µ—Å–ª–∏ –Ω–µ—Ç –≤ —Å—Ç–æ—Ä–µ
        // avatarUrl: state.avatarUrl  // <--- –û–°–¢–ê–í–ò–¢–¨ –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–ú / –£–î–ê–õ–ò–¢–¨, –µ—Å–ª–∏ –Ω–µ—Ç –≤ —Å—Ç–æ—Ä–µ
    }));

    // Actions –∏–∑ —Å—Ç–æ—Ä–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –±—ã–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
    const setUsername = useGameStore((s) => s.setUsername);
    const initializeCharacterStats = useGameStore((s) => s.initializeCharacterStats);
    const checkAndRefreshDailyDeals = useGameStore((s) => s.checkAndRefreshDailyDeals);

    // –•—É–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞
    const navigate = useNavigate();
    const location = useLocation();

    // === –ó–ê–ì–õ–£–®–ö–ò –¢–û–õ–¨–ö–û –î–õ–Ø –¢–û–ì–û, –ß–ï–ì–û –ù–ï–¢ –í –°–¢–û–†–ï (–ò–ó–ú–ï–ù–ï–ù–û —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–¥1) ===
    const avatarUrl = "/assets/default-avatar.png";   // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º, —Ç.–∫. avatarUrl –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ)
    // const energy = { current: "??", max: "??" };    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º, —Ç.–∫. energy –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ)
    // --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ ---
    const energy = { current: 85, max: 100 }; // –ü—Ä–∏–º–µ—Ä: 85/100 —ç–Ω–µ—Ä–≥–∏–∏
    const tonShards = 0; // <--- –î–û–ë–ê–í–õ–ï–ù–û –ò–ó –∫–æ–¥1 (–∏–ª–∏ null, –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞)


    // ‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π `const powerLevel = ...`, `const gold = ...` –∏ —Ç.–¥. –≤–Ω–µ useGameStore

    // === –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–û–°–¢–ê–í–õ–ï–ù –ò–ó –ö–û–î2) ===
    useEffect(() => {
        console.log("App Mount: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...");
        let initialUsername = null;
        let chosenRace = null;
        let raceIsChosen = false;

        try {
            initialUsername = localStorage.getItem('username');
            chosenRace = localStorage.getItem('chosenRace');
            raceIsChosen = localStorage.getItem('raceChosen') === 'true';
        } catch (e) { console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:", e); }

        console.log(`–î–∞–Ω–Ω—ã–µ –∏–∑ localStorage: raceChosen=${raceIsChosen}, chosenRace=${chosenRace}, username=${initialUsername}`);

        let shouldGoToRaceSelection = false;
        if (!raceIsChosen || !chosenRace) {
            console.log("–ù—É–∂–µ–Ω –≤—ã–±–æ—Ä —Ä–∞—Å—ã.");
            shouldGoToRaceSelection = true;
            setNeedsRaceSelection(true);
        } else {
            console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ—Ä–∞: –†–∞—Å–∞=${chosenRace}, –ò–º—è=${initialUsername || '–Ω–µ—Ç'}`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
            if (initializeCharacterStats) initializeCharacterStats(chosenRace);
            if (initialUsername && setUsername) setUsername(initialUsername);
            setNeedsRaceSelection(false);
        }
        if (checkAndRefreshDailyDeals) checkAndRefreshDailyDeals();

        const loadingDuration = 500;
        console.log(`–ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ${loadingDuration}ms...`);

        const timer = setTimeout(() => {
            console.log("–¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.");
            setIsInitialLoading(false);
            if (shouldGoToRaceSelection) {
                console.log("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ /race-selection");
                navigate('/race-selection', { replace: true });
            } else if (location.pathname === '/' || location.pathname.startsWith('/loading')) {
                console.log("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ /main");
                navigate('/main', { replace: true });
            } else {
                console.log("–û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º –ø—É—Ç–∏:", location.pathname);
            }
        }, loadingDuration);

        return () => clearTimeout(timer);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [/* initializeCharacterStats, setUsername, checkAndRefreshDailyDeals, navigate, location.pathname */]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å, –µ—Å–ª–∏ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã


    // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–û–°–¢–ê–í–õ–ï–ù–´ –ò–ó –ö–û–î2) ===
    const handleStartGame = useCallback(async (chapterId, levelId) => {
        console.log(`üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ä—Ç: –ì–ª–∞–≤–∞ ${chapterId}, –£—Ä–æ–≤–µ–Ω—å ${levelId}`);
        setIsLoadingLevel(true);
        setActiveLevelData(null);
        setLoadingError(null);
        navigate(`/level/${levelId}/loading`);
        try {
            const dataPath = `/data/levels/level${levelId}Data.json`;
            console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è: ${dataPath}`);
            const response = await fetch(dataPath);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status} for ${dataPath}`);
            const loadedData = await response.json();
            // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ levelId
            if (!loadedData || typeof loadedData.id !== 'number' || loadedData.id !== parseInt(levelId, 10)) { // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —á–∏—Å–ª–æ–º
                throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ ID (${loadedData?.id}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º (${levelId})`);
             }
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è —É—Ä–æ–≤–Ω—è ${levelId} –∑–∞–≥—Ä—É–∂–µ–Ω—ã.`);
            setActiveLevelData(loadedData);
            setIsLoadingLevel(false);
            navigate(`/level/${levelId}`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è ${levelId}:`, error);
            setLoadingError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ${levelId}. ${error.message}`);
            setIsLoadingLevel(false);
            navigate("/main");
            setActiveLevelData(null);
        }
    }, [navigate]);

    const handleLevelComplete = useCallback(() => {
        console.log("üèÅ –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω, –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.");
        setActiveLevelData(null);
        navigate("/main");
    }, [navigate]);

    const handleLevelReady = useCallback(() => {
        console.log("üéÆ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –£—Ä–æ–≤–Ω—è –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ!");
    }, []);

    const handleRaceSelectionComplete = useCallback(() => {
        setNeedsRaceSelection(false);
        navigate('/main');
    }, [navigate]);


    // === –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ App ===

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    if (isInitialLoading) {
        return <LoadingScreen key="loading_initial" message="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã..." />;
    }

    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ä–∞—Å—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–∫–∞–∫ –≤ –∫–æ–¥2)
    if (needsRaceSelection && location.pathname !== '/race-selection') {
         return <LoadingScreen key="redirecting_to_race" message="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã..." />;
    }

    return (
        // ‚ñº –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É .app-container –µ—Å—Ç—å padding —Å env(...) –≤ App.scss ‚ñº
        <div className="app-container">

            {/* –ü–æ–ø–∞–ø –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å) */}
            {!isInitialLoading && !needsRaceSelection && !location.pathname.startsWith('/level') && <UsernamePopup />}

            {/* ‚ñº‚ñº‚ñº –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –®–ê–ü–ö–ê (–∏–∑ –∫–æ–¥1) ‚ñº‚ñº‚ñº */}
            {!isInitialLoading && !needsRaceSelection && !location.pathname.startsWith('/level') && (
                <header className="app-header"> {/* –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±—É–¥–µ—Ç –∏–º–µ—Ç—å padding-top */}

                    {/* --- –ë–ª–æ–∫ –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π Close (–í–µ—Ä—Ö-–õ–µ–≤–æ) --- */}
                    <div className="header-top-left">
                        <img src={avatarUrl} alt="–ê–≤–∞—Ç–∞—Ä" className="player-avatar" />
                        <div className="player-info">
                            <span className="player-name">{username || "–ì–æ—Å—Ç—å"}</span>
                            <span className="player-power">{powerLevel?.toLocaleString() ?? '...'}</span>
                        </div>
                    </div>

                    {/* --- –ë–ª–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É (–≠–Ω–µ—Ä–≥–∏—è) --- */}
                    <div className="header-top-center">
                        <div className="energy-bar">
                             <img src="/assets/icon-energy.png" alt="" className="resource-icon energy-icon" />
                             <div className="energy-bar-track">
                                 {/* –®–∏—Ä–∏–Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±–ª–æ–∫–∞ –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å—Ç–∏–ª–µ–º –∏–ª–∏ JS */}
                                 <div
                                     className="energy-bar-fill"
                                     style={{ width: `${(energy?.current && energy?.max && energy.max > 0) ? (energy.current / energy.max * 100) : 0}%` }} // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ energy.max > 0
                                 ></div>
                             </div>
                             <span className="energy-text">{`${energy?.current ?? '?'}/${energy?.max ?? '?'}`}</span>
                        </div>
                    </div>

                    {/* --- –ë–ª–æ–∫ —Å–ø—Ä–∞–≤–∞ (–†–µ—Å—É—Ä—Å—ã —Å—Ç–æ–ª–±–∏–∫–æ–º) --- */}
                    <div className="header-top-right resource-group-vertical">
                         {/* –ó–æ–ª–æ—Ç–æ */}
                         <div className="resource-item gold-item">
                           <img src="/assets/coin-icon.png" alt="–ó–æ–ª–æ—Ç–æ" className="resource-icon" />
                           <span>{gold?.toLocaleString() ?? '0'}</span>
                         </div>
                         {/* –ê–ª–º–∞–∑—ã */}
                         <div className="resource-item diamond-item">
                           <img src="/assets/diamond-image.png" alt="–ê–ª–º–∞–∑—ã" className="resource-icon" />
                           <span>{diamonds?.toLocaleString() ?? '0'}</span>
                         </div>
                         {/* –û—Å–∫–æ–ª–∫–∏ TON */}
                         <div className="resource-item toncoin-item">
                           <img src="/assets/icon-toncoin.png" alt="–û—Å–∫–æ–ª–∫–∏" className="resource-icon" />
                           <span>{tonShards?.toLocaleString() ?? '0'}</span>
                         </div>
                    </div>

                </header>
            )}
            {/* ‚ñ≤‚ñ≤‚ñ≤ –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –®–ê–ü–ö–ò ‚ñ≤‚ñ≤‚ñ≤ */}

            {/* ‚ùó –°—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã PowerLevel, ResourceBar —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–µ–Ω–¥–µ—Ä–∞, –∏—Ö –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –≤ <header> */}

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
            <main className="content-area">
                <AnimatePresence mode="wait" initial={false}>
                    {/* Routes (–û–°–¢–ê–í–õ–ï–ù–´ –ò–ó –ö–û–î2) */}
                    <Routes location={location} key={location.pathname}>
                        <Route path="/race-selection" element={<RaceSelection onComplete={handleRaceSelectionComplete} />} />
                        <Route path="/level/:levelId/loading" element={<LoadingScreen message="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è..." />} />
                        <Route path="/level/:levelId" element={
                            activeLevelData ? (
                                <Level levelData={activeLevelData} onLevelComplete={handleLevelComplete} onReady={handleLevelReady}/>
                            ) : isLoadingLevel ? (
                                <LoadingScreen message="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..." />
                            ) : (
                                <motion.div key="error_level_data" className="loading-screen">
                                    <h2>–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!</h2>
                                    <button onClick={() => navigate('/main')}>–í –º–µ–Ω—é</button>
                                </motion.div>
                            )
                        }/>
                        <Route path="/inventory" element={<Inventory />} />
                        <Route path="/shop" element={<Shop />} />
                        <Route path="/forge" element={<Forge />} />
                        <Route path="/achievements" element={<Achievements />} />
                        <Route path="/main" element={<MainMenu onStart={handleStartGame} />} />
                        <Route path="*" element={<MainMenu onStart={handleStartGame} />} /> {/* –ò–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 404 */}
                    </Routes>
                </AnimatePresence>
            </main>

            {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
            {!isInitialLoading && !needsRaceSelection && !location.pathname.startsWith('/level') && (
                <BottomNav />
            )}

            {/* –ü–æ–ø–∞–ø –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {loadingError && (
                <div className="error-popup">
                    <p>{loadingError}</p>
                    <button onClick={() => setLoadingError(null)}>OK</button>
                </div>
            )}
        </div>
    );
};

export default App;