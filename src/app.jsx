// src/App.jsx
import React, { useState, useCallback, useEffect, useRef } from 'react'; // useMemo —É–±—Ä–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏—Ç–æ–≥–æ–≤–æ–º –∫–æ–¥–µ
import { motion, AnimatePresence } from 'framer-motion';
import { Routes, Route, useNavigate, useLocation } from 'react-router-dom';

// –ò–º–ø–æ—Ä—Ç—ã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import MainMenu from "./components/MainMenu";
import Level from "./components/Level";
import Inventory from "./components/Inventory";
import Shop from "./components/Shop";
import BottomNav from "./components/BottomNav";
import UsernamePopup from "./components/UsernamePopup";
import Forge from "./components/Forge";
import Achievements from "./components/Achievements";
import RaceSelection from "./components/RaceSelection";
import LoadingScreen from "./components/LoadingScreen";
import RewardsScreen from "./components/RewardsScreen";
// import GlobalMap from "./components/GlobalMap"; // –ù–ï –ù–£–ñ–ï–ù –ö–ê–ö –ú–ê–†–®–†–¢–£–¢ –í APP.JSX (—Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–¥1)
// WorldMap —Ç–∞–∫–∂–µ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∑–¥–µ—Å—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ MainMenu —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º

// –ò–º–ø–æ—Ä—Ç—ã –£—Ç–∏–ª–∏—Ç –∏ –°—Ç–æ—Ä–∞
import useGameStore from "./store/useGameStore";
import './App.scss';

const ENERGY_REFILL_INTERVAL_MS = 30 * 60 * 1000;

// const pageVariants = { ... }; // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ
// const pageTransition = { ... };

const App = () => {
    const [isInitialLoading, setIsInitialLoading] = useState(true);
    const [needsRaceSelection, setNeedsRaceSelection] = useState(false);
    const [activeLevelData, setActiveLevelData] = useState(null);
    const [loadingError, setLoadingError] = useState(null);
    const [isLoadingLevel, setIsLoadingLevel] = useState(false);
    const [refillTimerDisplay, setRefillTimerDisplay] = useState("");
    const [shouldShowRefillTimer, setShouldShowRefillTimer] = useState(false);

    const navigate = useNavigate();
    const location = useLocation();
    const appContainerRef = useRef(null);

    const {
        username, gold, diamonds, powerLevel, energyCurrent, energyMax,
        lastEnergyRefillTimestamp, refillEnergyOnLoad, consumeEnergy,
        // setCurrentChapterInStore, // –£–¥–∞–ª–µ–Ω–æ, —Ç.–∫. –∫–æ–ª–ª–±—ç–∫–∏ –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–µ—Ö–∞–ª–∏ –≤ MainMenu
        // currentChapterIdFromStore, // –£–¥–∞–ª–µ–Ω–æ, —Ç.–∫. –∫–æ–ª–ª–±—ç–∫–∏ –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–µ—Ö–∞–ª–∏ –≤ MainMenu
        isFullScreenMapActive // –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è UI
    } = useGameStore(
        useCallback(state => ({
            username: state.username,
            gold: state.gold,
            diamonds: state.diamonds,
            powerLevel: state.powerLevel,
            energyCurrent: state.energyCurrent,
            energyMax: state.energyMax,
            lastEnergyRefillTimestamp: state.lastEnergyRefillTimestamp,
            refillEnergyOnLoad: state.refillEnergyOnLoad,
            consumeEnergy: state.consumeEnergy,
            // setCurrentChapterInStore: state.setCurrentChapter, // –õ–æ–≥–∏–∫–∞ –∫–∞—Ä—Ç—ã –≤ MainMenu
            // currentChapterIdFromStore: state.currentChapterId, // –õ–æ–≥–∏–∫–∞ –∫–∞—Ä—Ç—ã –≤ MainMenu
            isFullScreenMapActive: state.isFullScreenMapActive,
        }), [])
    );

    const setUsernameAction = useGameStore((s) => s.setUsername);
    const initializeCharacterStats = useGameStore((s) => s.initializeCharacterStats);
    const checkAndRefreshDailyDeals = useGameStore((s) => s.checkAndRefreshDailyDeals);

    const avatarUrl = "/assets/default-avatar.png";
    const tonShards = 0; // –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è

    // useEffect –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ —ç–Ω–µ—Ä–≥–∏–∏ (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –≤ –∫–æ–¥2)
    useEffect(() => {
        let intervalId = null;
        const updateTimer = () => {
            if (energyCurrent < energyMax) {
                setShouldShowRefillTimer(true);
                const nextRefillTimestamp = lastEnergyRefillTimestamp + ENERGY_REFILL_INTERVAL_MS;
                const now = Date.now();
                let remainingMs = nextRefillTimestamp - now;

                if (remainingMs <= 0) {
                    console.log("Timer expired, triggering refill check via action...");
                    refillEnergyOnLoad();
                    if (intervalId) clearInterval(intervalId);
                } else {
                    const totalSeconds = Math.max(0, Math.floor(remainingMs / 1000));
                    const minutes = Math.floor(totalSeconds / 60);
                    const seconds = totalSeconds % 60;
                    setRefillTimerDisplay(
                        `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`
                    );
                }
            } else {
                setShouldShowRefillTimer(false);
                setRefillTimerDisplay("");
                if (intervalId) clearInterval(intervalId);
            }
        };

        if (energyCurrent < energyMax) {
            updateTimer();
            intervalId = setInterval(updateTimer, 1000);
        } else {
            setShouldShowRefillTimer(false);
        }
        return () => {
            if (intervalId) clearInterval(intervalId);
        };
    }, [energyCurrent, energyMax, lastEnergyRefillTimestamp, refillEnergyOnLoad]);

    // useEffect –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –≤ –∫–æ–¥2, –Ω–æ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –∫–æ–¥1)
    useEffect(() => {
        console.log("App Mount: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...");
        let initialUsername = null;
        let chosenRace = null;
        let raceIsChosen = false;

        try {
            initialUsername = localStorage.getItem('username');
            chosenRace = localStorage.getItem('chosenRace');
            raceIsChosen = localStorage.getItem('raceChosen') === 'true';
        } catch (e) { console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:", e); }

        console.log(`–î–∞–Ω–Ω—ã–µ –∏–∑ localStorage: raceChosen=${raceIsChosen}, chosenRace=${chosenRace}, username=${initialUsername}`);

        let shouldGoToRaceSelection = false;
        if (!raceIsChosen || !chosenRace) {
            console.log("–ù—É–∂–µ–Ω –≤—ã–±–æ—Ä —Ä–∞—Å—ã.");
            shouldGoToRaceSelection = true;
            setNeedsRaceSelection(true);
        } else {
            console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ—Ä–∞: –†–∞—Å–∞=${chosenRace}, –ò–º—è=${initialUsername || '–Ω–µ—Ç'}`);
            if (initializeCharacterStats) initializeCharacterStats(chosenRace);
            if (initialUsername && setUsernameAction) setUsernameAction(initialUsername);
            setNeedsRaceSelection(false);
        }
        if (checkAndRefreshDailyDeals) checkAndRefreshDailyDeals();

        const loadingDuration = 500;
        console.log(`–ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ${loadingDuration}ms...`);

        const timer = setTimeout(() => {
            console.log("–¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.");
            setIsInitialLoading(false);
            if (shouldGoToRaceSelection) {
                console.log("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ /race-selection");
                navigate('/race-selection', { replace: true });
            } else if (location.pathname === '/' || location.pathname.startsWith('/loading') || location.pathname === '/race-selection') {
                console.log("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ /main");
                navigate('/main', { replace: true });
            } else {
                console.log("–û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º –ø—É—Ç–∏:", location.pathname);
            }
        }, loadingDuration);

        return () => clearTimeout(timer);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [navigate, initializeCharacterStats, setUsernameAction, checkAndRefreshDailyDeals]);

    // –£—Å–ª–æ–≤–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ UI —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—â–µ (isFullScreenMapActive –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∫—Ä—ã—Ç–∏–µ–º UI –∏–∑ MainMenu)
    const path = location.pathname;
    // const { isFullScreenMapActive } = useGameStore(state => ({ isFullScreenMapActive: state.isFullScreenMapActive })); // –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ –≤—ã—à–µ

    const showAnyFixedUI =
        !path.startsWith('/level/') &&
        !isInitialLoading &&
        !needsRaceSelection &&
        path !== '/rewards' && // Rewards –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–º
        !isFullScreenMapActive; // <<< –ì–õ–ê–í–ù–û–ï –£–°–õ–û–í–ò–ï –û–¢ –°–¢–û–†–ê (–∏–∑ –∫–æ–¥1)

    const showPlayerInfo = showAnyFixedUI && (path === '/main' || path === '/inventory');
    const showResources = showAnyFixedUI && (path === '/main' || path === '/inventory' || path === '/shop' || path === '/forge');
    const showEnergyBar = showAnyFixedUI && (path === '/main');
    const shouldShowBottomNav = showAnyFixedUI; // BottomNav —Ç–∞–∫–∂–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç showAnyFixedUI (—Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–¥1)


    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò (–æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –≤ –∫–æ–¥2) ===
    const handleStartGame = useCallback(async (chapterId, levelId) => {
        const ENERGY_COST = 10;
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —É—Ä–æ–≤–Ω—è ${levelId}. –°—Ç–æ–∏–º–æ—Å—Ç—å: ${ENERGY_COST} —ç–Ω–µ—Ä–≥–∏–∏.`);
        const hasEnoughEnergy = consumeEnergy(ENERGY_COST);

        if (!hasEnoughEnergy) {
            alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —É—Ä–æ–≤–Ω—è!");
            console.log("–°—Ç–∞—Ä—Ç —É—Ä–æ–≤–Ω—è –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏.");
            return;
        }

        console.log(`üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ä—Ç: –ì–ª–∞–≤–∞ ${chapterId}, –£—Ä–æ–≤–µ–Ω—å ${levelId}`);
        setIsLoadingLevel(true);
        setActiveLevelData(null);
        setLoadingError(null);
        navigate(`/level/${levelId}/loading`);
        try {
            const dataPath = `/data/levels/level${levelId}Data.json`;
            console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è: ${dataPath}`);
            await new Promise(resolve => setTimeout(resolve, 300));
            const response = await fetch(dataPath);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status} for ${dataPath}`);
            const loadedData = await response.json();

            if (!loadedData || typeof loadedData.id !== 'number' || loadedData.id !== parseInt(levelId, 10)) {
                throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ ID (${loadedData?.id}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º (${levelId})`);
            }
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è —É—Ä–æ–≤–Ω—è ${levelId} –∑–∞–≥—Ä—É–∂–µ–Ω—ã.`);
            setActiveLevelData(loadedData);
            setIsLoadingLevel(false);
            navigate(`/level/${levelId}`, { replace: true });
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è ${levelId}:`, error);
            setLoadingError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ${levelId}. ${error.message}`);
            setIsLoadingLevel(false);
            navigate("/main", { replace: true });
            setActiveLevelData(null);
        }
    }, [navigate, consumeEnergy]);

    const getChapterIdFromLevelId = (levelId) => {
        if (typeof levelId === 'number' && levelId >= 100) {
            return Math.floor(levelId / 100);
        }
        console.warn("[getChapterIdFromLevelId] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –≥–ª–∞–≤—ã –¥–ª—è levelId:", levelId);
        return null;
    };

    const handleLevelComplete = useCallback((levelId, status, difficultyPlayed) => {
        console.log(`üèÅ –£—Ä–æ–≤–µ–Ω—å ${levelId} (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficultyPlayed}) –∑–∞–≤–µ—Ä—à—ë–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${status}`);
        setActiveLevelData(null);

        if (status === 'won') {
            const chapterId = getChapterIdFromLevelId(levelId);
            if (chapterId !== null) {
                useGameStore.getState().completeLevelAction(chapterId, levelId, difficultyPlayed);
                console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —É—Ä–æ–≤–Ω—è ${levelId} (–ì–ª–∞–≤–∞ ${chapterId}) –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ '${difficultyPlayed}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
            } else {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –≥–ª–∞–≤—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è.");
            }
            console.log("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...");
            navigate("/main");
        } else if (status === 'lost') {
            console.log("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...");
            navigate("/main");
        } else {
            console.log("–û—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...");
            navigate("/main");
        }
    }, [navigate]);

    const handleLevelReady = useCallback(() => {
        console.log("üéÆ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –£—Ä–æ–≤–Ω—è –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ!");
    }, []);

    const handleRaceSelectionComplete = useCallback(() => {
        console.log("–†–∞—Å–∞ –≤—ã–±—Ä–∞–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
        setNeedsRaceSelection(false);
        navigate('/main', { replace: true });
    }, [navigate]);

    // === –ö–û–õ–õ–ë–≠–ö–ò –î–õ–Ø GLOBALMAP –£–î–ê–õ–ï–ù–´ –ò–ó APP.JSX (—Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–¥1, –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–µ–∑–∂–∞–µ—Ç –≤ MainMenu.jsx) ===
    // const handleSelectContinentOnGlobalMap = useCallback(...) // –£–¥–∞–ª–µ–Ω–æ
    // const handleGoBackToWorldMapFromGlobalMap = useCallback(...) // –£–¥–∞–ª–µ–Ω–æ


    if (isInitialLoading) {
        return <LoadingScreen key="loading_initial" message="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã..." />;
    }

    if (needsRaceSelection && location.pathname !== '/race-selection') {
        return <LoadingScreen key="redirecting_to_race" message="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã..." />;
    }

    return (
        <div className="app-container" ref={appContainerRef}>
            {/* –ü–ª–∞–≤–∞—é—â–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã, —É—Å–ª–æ–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–¥1 */}
            {showPlayerInfo && (
                <div className="player-info-float">
                    <img src={avatarUrl} alt="–ê–≤–∞—Ç–∞—Ä" className="player-avatar-small" />
                    <div className="player-details">
                        <span className="player-name">{username || "–ì–æ—Å—Ç—å"}</span>
                        <span className="player-power">{powerLevel?.toLocaleString() ?? '...'}</span>
                    </div>
                </div>
            )}
            {showResources && (
                <div className="resources-float">
                    <div className="resource-item-float">
                        <img src="/assets/coin-icon.png" alt="–ó–æ–ª–æ—Ç–æ" className="resource-icon-small" />
                        <span>{gold?.toLocaleString() ?? '0'}</span>
                    </div>
                    <div className="resource-item-float">
                        <img src="/assets/diamond-image.png" alt="–ê–ª–º–∞–∑—ã" className="resource-icon-small" />
                        <span>{diamonds?.toLocaleString() ?? '0'}</span>
                    </div>
                    <div className="resource-item-float">
                        <img src="/assets/toncoin-icon.png" alt="–û—Å–∫–æ–ª–∫–∏" className="resource-icon-small" />
                        <span>{tonShards?.toLocaleString() ?? '0'}</span>
                    </div>
                </div>
            )}
            {showEnergyBar && (
                <div className="energy-bar-float">
                    <div className="energy-bar-content">
                        <img src="/assets/energy-icon.png" alt="" className="resource-icon-small energy-icon" />
                        <div className="energy-track">
                            <div
                                className="energy-fill"
                                style={{ width: `${(energyMax > 0) ? (energyCurrent / energyMax * 100) : 0}%` }}
                            ></div>
                        </div>
                        <span className="energy-text">{`${energyCurrent ?? '?'}/${energyMax ?? '?'}`}</span>
                    </div>
                    { shouldShowRefillTimer && refillTimerDisplay && (
                       <div className="energy-refill-timer">
                           –í–æ—Å–ø–æ–ª–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ {refillTimerDisplay}
                       </div>
                    )}
                </div>
            )}
            {/* UsernamePopup —Å —É—Å–ª–æ–≤–∏–µ–º, –∑–∞–≤–∏—Å—è—â–∏–º –æ—Ç showAnyFixedUI */}
            {showAnyFixedUI && <UsernamePopup />}

            <main className="content-area">
                <AnimatePresence mode="wait" initial={false}>
                    <Routes location={location} key={location.pathname}>
                        {/* –ú–∞—Ä—à—Ä—É—Ç—ã –∫–∞–∫ –≤ –∫–æ–¥2, –Ω–æ –±–µ–∑ /global-map */}
                        <Route path="/race-selection" element={<RaceSelection onComplete={handleRaceSelectionComplete} />} />
                        <Route path="/level/:levelId/loading" element={<LoadingScreen message="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è..." />} />
                        <Route path="/level/:levelId" element={
                            activeLevelData ? (
                                <Level
                                    levelData={activeLevelData}
                                    onLevelComplete={handleLevelComplete}
                                    onReady={handleLevelReady}
                                    difficulty={activeLevelData.difficulty || 'normal'}
                                />
                            )
                            : isLoadingLevel ? ( <LoadingScreen message="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è..." /> )
                            : (
                                <motion.div
                                    key="error_level_data_not_found"
                                    className="loading-screen"
                                    initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}
                                >
                                   <h2>–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!</h2>
                                   <p>–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–æ–ø–∞–ª–∏ —Å—é–¥–∞ –ø–æ –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å.</p>
                                   <button onClick={() => navigate('/main', { replace: true })}>–í –º–µ–Ω—é</button>
                                </motion.div>
                            )
                        }/>
                        <Route path="/inventory" element={<Inventory />} />
                        <Route path="/shop" element={<Shop />} />
                        <Route path="/forge" element={<Forge />} />
                        <Route path="/achievements" element={<Achievements />} />
                        <Route path="/rewards" element={<RewardsScreen />} />

                        {/* –ù–ï–¢ –û–¢–î–ï–õ–¨–ù–û–ì–û –ú–ê–†–®–†–£–¢–ê –î–õ–Ø /global-map (—Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–¥1) */}
                        {/* MainMenu –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ WorldMap –∏ GlobalMap */}
                        <Route path="/main" element={<MainMenu onStart={handleStartGame} />} />
                        <Route path="*" element={<MainMenu onStart={handleStartGame} />} /> {/* –§–æ–ª–ª–±—ç–∫ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω */}
                    </Routes>
                </AnimatePresence>
            </main>

            {/* BottomNav —Å —É—Å–ª–æ–≤–∏–µ–º, –∑–∞–≤–∏—Å—è—â–∏–º –æ—Ç showAnyFixedUI */}
            {shouldShowBottomNav && <BottomNav />}

            {loadingError && (
                <div className="error-popup">
                    <p>{loadingError}</p>
                    <button onClick={() => setLoadingError(null)}>OK</button>
                </div>
            )}
        </div>
    );
};

export default App;