import { useState, useEffect, useRef } from 'react';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { convertTiledX, convertTiledY, DEFAULT_WORLD_WIDTH, DEFAULT_WORLD_HEIGHT } from './utils';
import * as THREE from 'three';

const usePlayerLoader = (modelPath, startPosData, scene, levelConfig) => {
    const [playerObject, setPlayerObject] = useState(null);
    const [isPlayerModelLoaded, setIsPlayerModelLoaded] = useState(false);
    const playerRef = useRef(null); // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Å—ã–ª–∫–∏

    useEffect(() => {
        if (!scene || !modelPath || !startPosData || !levelConfig) return;

        const loader = new GLTFLoader();
        let isMounted = true;
        setIsPlayerModelLoaded(false);

        loader.load(
            modelPath,
            (gltf) => {
                if (!isMounted || !scene) return;

                const player = gltf.scene;
                player.scale.set(75, 75, 75);
                player.rotation.order = 'ZXY';
                 // –¢–≤–æ—è —Ä–∞–±–æ—á–∞—è —Ä–æ—Ç–∞—Ü–∏—è
                 player.rotation.set(Math.PI / 2, 0, Math.PI);
                player.userData.isPlayer = true;

                const { gameWorldWidth, gameWorldHeight, WORLD_Y_OFFSET } = levelConfig;
                const startX_world = convertTiledX(startPosData.x, 0, gameWorldWidth);
                const startY_world = convertTiledY(startPosData.y, 0, gameWorldHeight, WORLD_Y_OFFSET);
                player.position.set(startX_world, startY_world, 0);

                player.traverse((child) => {
                    if (child.isMesh && child.material) {
                        child.material.depthWrite = true;
                        // child.castShadow = true;
                        // child.receiveShadow = true;
                    }
                });

                scene.add(player);
                playerRef.current = player; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ref —Ö—É–∫–∞
                setPlayerObject(player);    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—É–∫–∞
                setIsPlayerModelLoaded(true);
                console.log("‚úÖ –ú–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—á–µ—Ä–µ–∑ —Ö—É–∫)");
            },
            undefined,
            (error) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–∞ ${modelPath}:`, error);
                if (isMounted) setIsPlayerModelLoaded(true); // –°—á–∏—Ç–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π" —Å –æ—à–∏–±–∫–æ–π
            }
        );

        return () => {
            isMounted = false;
            // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å–º–µ–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if (playerRef.current && scene && scene.children.includes(playerRef.current)) {
                 console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä–æ–∫–∞ (–∏–∑ —Ö—É–∫–∞)");
                 // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ü–µ–Ω—ã
                 scene.remove(playerRef.current);
                 // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –º–æ–¥–µ–ª–∏ (–≥–µ–æ–º–µ—Ç—Ä–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
                 playerRef.current.traverse(object => {
                      if (object.isMesh) {
                         object.geometry?.dispose();
                         if (object.material) {
                             if (Array.isArray(object.material)) {
                                 object.material.forEach(material => {
                                      material.map?.dispose();
                                      material.dispose();
                                 });
                             } else {
                                 object.material.map?.dispose();
                                 object.material.dispose();
                             }
                         }
                      }
                 });
            }
            playerRef.current = null;
            setPlayerObject(null);
        };
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏, –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å—Ü–µ–Ω–∞, –∫–æ–Ω—Ñ–∏–≥ —É—Ä–æ–≤–Ω—è
    }, [modelPath, startPosData, scene, levelConfig]);

    return { playerObject, isPlayerModelLoaded, playerRef };
};

export default usePlayerLoader;