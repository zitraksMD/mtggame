// src/components/RewardsScreen.jsx
import React, { useState, useMemo, useCallback } from 'react';
import './RewardsScreen.scss'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ —Å—Ç–∏–ª—è–º –≤–µ—Ä–Ω—ã–π
import initialRewardData from '../data/rewardStagesData.js'; // –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
// <<< –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –•–£–ö –ù–ê–í–ò–ì–ê–¶–ò–ò (–∏–∑ –∫–æ–¥1) >>>
import { useNavigate } from 'react-router-dom';

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –û–î–ù–û–ô –Ω–∞–≥—Ä–∞–¥—ã ---
// (–û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –≤ –∫–æ–¥2)
const RewardItem = React.memo(({ reward, isClaimed, isClaimable, isLocked, onClaim }) => {
    if (!reward) return <div className="reward-slot empty"></div>;
    const { type, amount } = reward;
    const handleClick = useCallback(() => {
        if (isClaimable && !isLocked) {
            onClaim(reward);
        }
    }, [isClaimable, isLocked, onClaim, reward]);
    const slotClasses = `reward-slot reward-type-${type} ${isClaimed ? 'claimed' : ''} ${isClaimable ? 'claimable' : ''} ${isLocked ? 'locked' : ''}`;
    return (
        <div className={slotClasses} onClick={handleClick} title={isLocked ? '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ –§–æ–Ω–¥–∞' : (isClaimable ? `–ó–∞–±—Ä–∞—Ç—å ${type} x ${amount}` : '')}>
            <div className="reward-icon">
                {amount > 0 && <span className="reward-amount">{amount}</span>}
            </div>
            {isClaimed && <div className="checkmark">‚úî</div>}
            {isLocked && !isClaimed && <div className="lock-icon">üîí</div>}
            {!isClaimed && isClaimable && !isLocked && <div className="claim-indicator">–ó–∞–±—Ä–∞—Ç—å</div>}
        </div>
    );
});


// --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≠–ö–†–ê–ù–ê –ù–∞–≥—Ä–∞–¥ ---
// <<< –£–ë–ò–†–ê–ï–ú goBack –∏–∑ –ø—Ä–æ–ø—Å–æ–≤ (–∫–∞–∫ –≤ –∫–æ–¥1) >>>
const RewardsScreen = () => {
    // <<< –ò–°–ü–û–õ–¨–ó–£–ï–ú –•–£–ö –ù–ê–í–ò–ì–ê–¶–ò–ò (–∏–∑ –∫–æ–¥1) >>>
    const navigate = useNavigate();

    // --- –í—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –∫–æ–¥2 ---
    const [currentStage, setCurrentStage] = useState('1');
    const [stagesProgress, setStagesProgress] = useState(initialRewardData);
    const [isPaidUnlocked, setIsPaidUnlocked] = useState(false);

    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ (–∏–∑ –∫–æ–¥2)
    const highestCompletedStage = useMemo(() => {
        let maxCompleted = 0;
        const sortedStageKeys = Object.keys(stagesProgress).map(Number).sort((a, b) => a - b);
        for (const stageNum of sortedStageKeys) {
            const stageLevels = stagesProgress[stageNum.toString()];
            if (!stageLevels || stageLevels.length === 0) break;
            if (stageLevels.every(level => level.completed)) {
                maxCompleted = stageNum;
            } else {
                break;
            }
        }
        return maxCompleted;
    }, [stagesProgress]);

    // –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ (–∏–∑ –∫–æ–¥2)
    const currentStageRewards = useMemo(() => stagesProgress[currentStage] || [], [stagesProgress, currentStage]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –û–î–ù–û–ô –Ω–∞–≥—Ä–∞–¥—ã (–∏–∑ –∫–æ–¥2)
    const handleClaim = useCallback((reward, level, isPaid) => {
        console.log(`Claiming ${isPaid ? 'paid' : 'free'} reward for stage ${currentStage} level ${level}:`, reward);
        setStagesProgress(prev => {
            const updatedStage = (prev[currentStage] || []).map(item =>
                item.level === level ? { ...item, [isPaid ? 'paidClaimed' : 'freeClaimed']: true } : item
            );
            return { ...prev, [currentStage]: updatedStage };
        });
        alert(`–ù–∞–≥—Ä–∞–¥–∞ ${reward.type} x ${reward.amount} (—Ç–∏–ø–∞) –ø–æ–ª—É—á–µ–Ω–∞!`);
    }, [currentStage]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–∞—Ç—å –≤—Å–µ" (–∏–∑ –∫–æ–¥2)
    const handleClaimAll = useCallback(() => {
        console.log('Claiming all available rewards...');
        setStagesProgress(prev => {
            const updatedData = { ...prev };
            Object.keys(updatedData).forEach(stageKey => {
                const stageNum = parseInt(stageKey);
                const isStageAccessible = stageNum === 1 || stageNum <= (highestCompletedStage + 1);
                if (!isStageAccessible) return;

                updatedData[stageKey] = updatedData[stageKey].map(levelData => {
                    let { freeClaimed, paidClaimed } = levelData;
                    if (levelData.completed && !levelData.freeClaimed) {
                        freeClaimed = true;
                        console.log(`Claiming all: Free reward stage ${stageKey} level ${levelData.level}`);
                    }
                    if (levelData.completed && !levelData.paidClaimed && isPaidUnlocked) {
                        paidClaimed = true;
                        console.log(`Claiming all: Paid reward stage ${stageKey} level ${levelData.level}`);
                    }
                    return { ...levelData, freeClaimed, paidClaimed };
                });
            });
            return updatedData;
        });
        alert('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã (—Ç–∏–ø–∞) –ø–æ–ª—É—á–µ–Ω—ã!');
    }, [isPaidUnlocked, highestCompletedStage]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø–ª–∞—Ç–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏ (–∏–∑ –∫–æ–¥2)
    const handlePurchase = useCallback(() => {
        console.log('Purchasing Advanced Fund...');
        setIsPaidUnlocked(true);
        alert('–ü–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ (—Ç–∏–ø–∞) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!');
    }, []);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –∑–∞–±–∏—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–±—Ä–∞—Ç—å –≤—Å–µ" (–∏–∑ –∫–æ–¥2)
    const canClaimAny = useMemo(() => {
        return Object.entries(stagesProgress).some(([stageKey, levels]) => {
            const stageNum = parseInt(stageKey);
            const isStageAccessible = stageNum === 1 || stageNum <= (highestCompletedStage + 1);
            if (!isStageAccessible) return false;
            return levels.some(level =>
                (level.completed && !level.freeClaimed) ||
                (level.completed && isPaidUnlocked && !level.paidClaimed)
            );
        });
    }, [stagesProgress, isPaidUnlocked, highestCompletedStage]);

    // <<< –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–∏–∑ –∫–æ–¥1) >>>
    const handleGoBack = useCallback(() => {
        // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ—É—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥
        // navigate('/main');
        navigate(-1); // –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
    }, [navigate]);

    // --- –†–µ–Ω–¥–µ—Ä –≠–ö–†–ê–ù–ê (–∏–∑ –∫–æ–¥2, –Ω–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥) ---
    return (
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ç–∫—Ä–∞–Ω–∞
        <div className="rewards-screen">
             {/* === –ö–ù–û–ü–ö–ê –ó–ê–ö–†–´–¢–ò–Ø (–¢–ï–ü–ï–†–¨ –ó–î–ï–°–¨) === */}
        {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å popup-close-button –¥–ª—è —Å—Ç–∏–ª–µ–π */}
        <button className="popup-close-button" onClick={handleGoBack} aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>

            {/* –®–∞–ø–∫–∞ –≠–∫—Ä–∞–Ω–∞ */}
            <div className="rewards-screen-header">
        {/* –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ —Å–ª–µ–≤–∞ (–≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥) */}
        <div className="header-placeholder-left"></div>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤–∏–¥–µ–æ) */}
        <h1>–ù–∞–≥—Ä–∞–¥—ã</h1>

      </div>

            {/* –¢–∞–±—ã –≠—Ç–∞–ø–æ–≤ (–∏–∑ –∫–æ–¥2) */}
            <div className="stage-tabs">
                {Object.keys(initialRewardData).map(stageNumStr => {
                    const stageNum = parseInt(stageNumStr);
                    const isLocked = stageNum > 1 && stageNum > (highestCompletedStage + 1);
                    return (
                        <button
                            key={stageNumStr}
                            className={`stage-tab ${stageNumStr === currentStage ? 'active' : ''} ${isLocked ? 'locked' : ''}`}
                            onClick={() => !isLocked && setCurrentStage(stageNumStr)}
                            disabled={isLocked}
                            title={isLocked ? `–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≠—Ç–∞–ø ${stageNum - 1}`: `–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≠—Ç–∞–ø ${stageNum}`}
                        >
                            {isLocked && <span className="stage-lock-icon">üîí</span>}
                            –≠—Ç–∞–ø {stageNumStr}
                        </button>
                    );
                })}
            </div>
             {/* === –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –ó–ê–ì–û–õ–û–í–ö–û–í === */}
             <div className="rewards-track-titles">
        {/* –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è "FREE" */}
        <div className="title-column title-free">FREE</div>
        {/* –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è */}
        <div className="title-column-spacer"></div>
        {/* –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è "PAID" */}
        <div className="title-column title-paid">PAID</div>
      </div>
      {/* === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê === */}
            {/* –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –ù–∞–≥—Ä–∞–¥ (–∏–∑ –∫–æ–¥2) */}
            <div className="rewards-track-wrapper">
                {/* –ù–∞—á–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}

                {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–∫—Ä–æ–ª–ª–∏—Ç—å—Å—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ (–∏–∑ –∫–æ–¥2) */}
                <div className="rewards-track-container">
                    {currentStageRewards.length === 0 ? (
                        <p className="no-rewards-message">–ù–∞–≥—Ä–∞–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!</p>
                    ) : (
                        currentStageRewards.map((levelData) => (
                            // –†–µ–Ω–¥–µ—Ä –æ–¥–Ω–æ–≥–æ —Ä—è–¥–∞ (—É—Ä–æ–≤–Ω—è)
                            <div key={levelData.level} className={`reward-row ${levelData.completed ? 'row-completed' : ''}`}>
                                <RewardItem reward={levelData.freeReward} isClaimed={levelData.freeClaimed} isClaimable={levelData.completed && !levelData.freeClaimed} isLocked={false} onClaim={(reward) => handleClaim(reward, levelData.level, false)} />
                                <div className="level-connector">
                                    <div className="grey-line-element"></div>
                                    <div className={`level-number ${levelData.completed ? 'completed' : ''}`}>{levelData.level}</div>
                                    {levelData.completed && ( <div className="progress-line-segment"></div> )}
                                </div>
                                <RewardItem reward={levelData.paidReward} isClaimed={levelData.paidClaimed} isClaimable={levelData.completed && !levelData.paidClaimed} isLocked={!isPaidUnlocked} onClaim={(reward) => handleClaim(reward, levelData.level, true)} />
                            </div>
                        ))
                    )}
                </div> {/* –ö–æ–Ω–µ—Ü .rewards-track-container */}
            </div> {/* –ö–æ–Ω–µ—Ü .rewards-track-wrapper */}

            {/* –§—É—Ç–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–∏–∑ –∫–æ–¥2) */}
            <div className="rewards-footer">
                <button className="claim-all-button" onClick={handleClaimAll} disabled={!canClaimAny} title={!canClaimAny ? "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Å–±–æ—Ä–∞" : "–ó–∞–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã"}>–ó–∞–±—Ä–∞—Ç—å –≤—Å–µ</button>
                {!isPaidUnlocked && ( <button className="purchase-button" onClick={handlePurchase}>–ö—É–ø–∏—Ç—å –§–æ–Ω–¥ <span className="price">$?.??</span></button> )}
                {isPaidUnlocked && ( <div className="paid-unlocked-indicator">–§–æ–Ω–¥ –ê–∫—Ç–∏–≤–µ–Ω ‚úî</div> )}
            </div> {/* –ö–æ–Ω–µ—Ü .rewards-footer */}

        </div> // –ö–æ–Ω–µ—Ü .rewards-screen
    );
};

export default RewardsScreen;