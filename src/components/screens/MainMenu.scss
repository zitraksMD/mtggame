// MainMenu.scss
@use '../popups/mail-theme' as mail;


// --- Корневой элемент (.main-menu) ---
.main-menu {
  background: url("/assets/main-screen-bg.png") no-repeat center center / cover;
  width: 100vh;
  height: 100%;
  position: absolute;
  overflow: hidden;
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

// --- Контейнер для просмотра карты главы (Как было) ---
.chapter-view-container {
  width: 100%;
  height: 100%;
  position: absolute; // Занимает все пространство .main-menu
  top: 0;
  left: 0;
  overflow: hidden;   // Обрезаем карту главы по границам контейнера
  cursor: grab;       // Курсор "схватить" по умолчанию
  z-index: 1;         // Под новыми кнопками UI
}

// --- Сам контент карты главы (Как было) ---
.chapter-map-content {
  position: relative; // Чтобы дочерние .level-node позиционировались относительно него
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center; // Или top left
  transform-origin: 0 0;

  &.dragging {
    cursor: grabbing;
  }
}

// --- SVG и Узлы Уровней ---
.chapter-level-svg-connections {
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none; // Не мешать кликам
  z-index: 1; // Под узлами, над картой
}

// Стили для соединительных линий (обновлено из код1)
.level-connection-path {
  stroke: rgba(255, 255, 255, 0.3); // Цвет неактивной связи
  stroke-width: 3px;
  fill: none;
  stroke-dasharray: 5, 5; // Пунктирная линия
  transition: stroke 0.3s ease;

  &.active { // Если связь активна (например, предыдущий уровень пройден)
    stroke: #ffd700; // Золотой цвет активной связи
    stroke-dasharray: none; // Сплошная линия
  }
}

// Стили для узлов уровней (обновлено и дополнено из код1)
.level-node {
  position: absolute;
  width: 40px;  // Можно оставить из код2 или взять из своего проекта
  height: 40px; // Можно оставить из код2 или взять из своего проекта
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  font-size: 16px; // Можно оставить из код2 или взять из своего проекта
  color: white;
  border: 2px solid white; // Базовая рамка из код1
  cursor: pointer;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5); // Оставим тень из код2
  z-index: 2; // Над связями и картой
  transition: transform 0.2s ease, background-color 0.2s ease, border-color 0.2s ease, box-shadow 0.2s ease; // Добавлен border-color из код1, box-shadow из код2

  &:hover {
    transform: scale(1.1);
    // background-color из код2 убран, так как он будет переопределяться статусами
  }

  // Статус по умолчанию (разблокирован, но не пройден) из код1
  &.active {
    background-color: #4a90e2; // Синий фон
    border-color: #ffffff;    // Белая рамка
    // box-shadow: 0 0 15px rgba(241, 196, 15, 0.8); // Свечение из код2 можно убрать или оставить, если нужно совместить
    // Если это текущий активный для ИГРЫ уровень (не просто разблокированный), можно добавить дополнительный класс или пересмотреть логику
  }

  // Уровень пройден на Normal из код1
  &.completed-normal {
    background-color: #5cb85c; // Зеленый фон
    border-color: #a0e0a0;     // Светло-зеленая рамка
    color: white;
    &:hover {
      background-color: #4cae4c; // Чуть темнее при наведении (пример)
      // transform: scale(1.1); // Уже есть базовый hover
    }
  }

  // Уровень пройден на Hard из код1
  &.completed-hard {
    background-color: #d9534f; // Красный фон
    border-color: #ff8f8c;     // Светло-красная рамка
    color: white;
    &:hover {
      background-color: #c9302c; // Чуть темнее при наведении (пример)
      // transform: scale(1.1); // Уже есть базовый hover
    }
  }

  // Уровень заблокирован из код1
  &.locked {
    background-color: #6c757d; // Серый фон
    border-color: #495057;     // Темно-серая рамка
    color: #adb5bd;            // Светло-серый текст
    cursor: not-allowed;
    &:hover {
      transform: none; // Убрать эффект увеличения при наведении
      background-color: #6c757d; // Фон не меняется
      border-color: #495057;   // Рамка не меняется
    }
  }
}


// --- НОВЫЕ ЭЛЕМЕНТЫ UI (Поверх карты) ---

// Общие стили для кнопок
.main-menu-button {
  position: absolute;
  background: rgba(0, 0, 0, 0.5);
  border: 1px solid rgba(255, 255, 255, 0.2);
  color: white;
  cursor: pointer;
  transition: background-color 0.2s, transform 0.1s;
  z-index: 5; // Выше чем карта (z-index: 1) и узлы (z-index: 2)
  display: flex;
  align-items: center;
  justify-content: center;
  backdrop-filter: blur(2px); // Небольшой блюр фона под кнопкой (опционально)

  &:hover {
    background: rgba(0, 0, 0, 0.7);
  }
    &:active {
      transform: scale(0.97);
  }

  &.icon-button {
    padding: 8px;
    border-radius: 12px;
    img {
      width: 40px; height: 40px; object-fit: contain; display: block;
    }

    // <<< НАЧАЛО ИЗМЕНЕНИЙ ИЗ КОД1 >>>
    &.rewards-chest-button {
      position: relative; // Для позиционирования псевдоэлемента

      // Класс, который добавляется, когда есть награды
      &.has-indicator::after {
        content: ''; // Обязательно для псевдоэлемента
        position: absolute;
        top: 2px;    // Положение точки (подбери)
        right: 2px;   // Положение точки (подбери)
        width: 8px;   // Размер точки
        height: 8px;  // Размер точки
        background-color: red; // Цвет индикатора
        border-radius: 50%;    // Делаем круглым
        border: 1px solid white; // Белая обводка для контраста (опционально)
        box-shadow: 0 0 3px red;  // Легкое свечение (опционально)
      }

      // Если предпочитаешь отдельный div для точки (закомментировано как в код1):
      // .notification-dot {
      //   position: absolute;
      //   top: 2px; right: 2px;
      //   width: 8px; height: 8px;
      //   background-color: red;
      //   border-radius: 50%;
      //   border: 1px solid white;
      // }
    }
    // <<< КОНЕЦ ИЗМЕНЕНИЙ ИЗ КОД1 >>>
  }
}


// Battle Pass (Снова позиционируется абсолютно)
.mainmenu-shardpass-button {
  position: absolute; // Фиксированное позиционирование относительно окна просмотра
  left: 10px;      // Отступ слева (можно настроить)
  
  // Используем max() для отступа сверху, учитывая безопасную зону Telegram
  // var(--safe-area-inset-top, 0px) - это фолбэк на случай, если переменная не определена
  // Значения 100px и 60px - это "большие значения", как вы просили (можно настроить)
  top: max(180px, calc(147px + var(--safe-area-inset-top, 0px)));  
  z-index: 1050; // Выше большинства элементов, но ниже полноэкранных модальных окон

  display: flex;
  align-items: center;
  padding: 10px 16px 10px 20px; // Немного ассиметричный для текста и ромбика
  border: none;
  border-radius: 28px; // Сильно скругленные края (pill shape)
  font-weight: 700; // Жирный шрифт
  letter-spacing: 0.5px;
  cursor: pointer;
  overflow: hidden; // Важно для эффекта переливания и чтобы дочерние элементы не вылезали
  transition: transform 0.2s ease-out, box-shadow 0.3s ease-in-out;
  user-select: none; // Чтобы текст не выделялся при клике

  // Градиентный фон (фиолетовый с переходом в более светлый/розовый)
  // Пример градиента, похожего на тот, что часто используется для "космических" тем
  background: linear-gradient(130deg, #6a11cb 0%, #ab47bc 40%, #f06292 75%, #ff80ab 100%);
  // Или более простой фиолетово-белый, как вы описали:
  // background: linear-gradient(130deg, #8a2be2 0%, #c599ff 70%, #f3e6ff 100%);
  color: white;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  
  // Эффект свечения через box-shadow
  box-shadow: 0 0 8px rgba(220, 150, 255, 0.5), 
              0 0 16px rgba(200, 100, 255, 0.4),
              0 0 24px rgba(160, 50, 220, 0.3);
  animation: pulse-glow-shardpass 2.5s infinite alternate ease-in-out;

  .shardpass-button-text {
    margin-right: 10px;
    font-size: 15px; // Размер текста "ShardPass"
  }

  .shardpass-level-rhombus {
    width: 28px;  // Размер ромбика
    height: 28px;
    background-color: rgba(255, 255, 255, 0.2); // Полупрозрачный фон для ромбика
    border: 1px solid rgba(255, 255, 255, 0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    transform: rotate(45deg); // Поворачиваем квадрат для получения ромба
    border-radius: 4px;       // Небольшое скругление углов повернутого квадрата
    flex-shrink: 0; // Чтобы ромбик не сжимался

    .shardpass-level-number {
      transform: rotate(-45deg); // Возвращаем текст уровня в нормальное положение
      font-size: 13px;
      font-weight: 700;
      color: white;
      line-height: 1; // Убираем лишние отступы у цифр
    }
  }

  // Эффект переливания (shimmer)
  .shardpass-button-shimmer-overlay {
    position: absolute;
    top: -50%; // Чтобы покрыть всю высоту с учетом наклона
    left: -50%; // Начинаем за пределами кнопки
    width: 200%; // Шире кнопки, чтобы переливание было плавным
    height: 200%;
    background: linear-gradient(
      110deg, // Угол переливания
      rgba(255, 255, 255, 0) 35%,
      rgba(255, 255, 255, 0.35) 50%, // Более яркая линия переливания
      rgba(255, 255, 255, 0) 65%
    );
    transform: translateX(-100%) skewX(-20deg); // Начальное положение и наклон
    animation: shimmer-effect 3.5s infinite linear;
    pointer-events: none; // Чтобы не мешал кликам
  }

  &:hover {
    transform: scale(1.05); // Немного увеличиваем при наведении
    box-shadow: 0 0 12px rgba(220, 150, 255, 0.7), 
                0 0 24px rgba(200, 100, 255, 0.6),
                0 0 36px rgba(160, 50, 220, 0.5);
  }

  &:active {
    transform: scale(0.98); // Немного уменьшаем при клике
  }
}

// Анимация для свечения
@keyframes pulse-glow-shardpass {
  from {
    box-shadow: 0 0 8px rgba(220, 150, 255, 0.5), 
                0 0 16px rgba(200, 100, 255, 0.4),
                0 0 24px rgba(160, 50, 220, 0.3);
  }
  to {
    box-shadow: 0 0 14px rgba(220, 150, 255, 0.7), 
                0 0 28px rgba(200, 100, 255, 0.6),
                0 0 40px rgba(160, 50, 220, 0.5);
  }
}

// Анимация для эффекта переливания
@keyframes shimmer-effect {
  0% {
    transform: translateX(-120%) skewX(-20deg); // За пределами слева
  }
  40%, 60% { // Задержка блика на кнопке
    transform: translateX(20%) skewX(-20deg); // Перемещение вправо (блик проходит по кнопке)
  }
  100% {
    transform: translateX(120%) skewX(-20deg); // За пределами справа
  }
}


// ----------------------------------------------------
// 1. Общий стиль для кнопок с иконкой и подписью
// ----------------------------------------------------
.main-menu-button.icon-label-button {
  // ВАЖНО: Убедитесь, что здесь НЕТ position: absolute;
  // Кнопки должны быть 'static' (по умолчанию) или 'relative', чтобы участвовать во flex-раскладке колонки.
  position: relative; // Или оставьте static (по умолчанию), если нет других причин для relative.

  display: flex;
  flex-direction: column; 
  align-items: center;    
  justify-content: flex-start; 
  gap: 3px;               
  
  width: 68px;     
  height: 72px;    
  padding: 8px 4px 6px 4px; 
  box-sizing: border-box; 
  
  background-color: rgba(30, 30, 45, 0.75); 
  border: 1px solid rgba(255, 255, 255, 0.1); 
  border-radius: 10px; 
  
  color: #e0e0e0; 
  text-align: center;
  cursor: pointer;
  transition: background-color 0.2s ease, transform 0.1s ease;
  user-select: none; 

  appearance: none;
  outline: none;

  &:hover {
    background-color: rgba(45, 45, 65, 0.85); 
  }

  &:active {
    transform: scale(0.96); 
  }

  .button-icon-img {
    width: 38px;  
    height: 38px; 
    object-fit: contain; 
  }

  .button-label {
    font-size: 10px; 
    font-weight: 500;
    color: #c0c0d8;   
    line-height: 1.15; 
  }
}

// ----------------------------------------------------
// 2. Стили для левой колонки
// ----------------------------------------------------
.main-menu-left-column {
  position: absolute;
  top: max(250px, calc(220px + var(--safe-area-inset-top, 0px))); 
  left: calc(env(safe-area-inset-left, 0px) + 10px); 
  z-index: 5;             

  // Размеры колонки
  width: auto;        // Позволит ширине адаптироваться под min-width или контент
  min-width: 68px;    // Минимальная ширина, равная ширине кнопок
  height: auto;       // Высота будет определяться содержимым (кнопками и отступами)
  // min-height: 240px; // Можно установить, если хотите гарантировать мин. высоту 
                        // (3 кнопки * 72px + 2 отступа * 12px = 216 + 24 = 240px)
                        // Но обычно height: auto достаточно, если flex работает.

  // Flex-контейнер для кнопок
  display: flex;
  flex-direction: column; // Располагает дочерние элементы (кнопки) в столбец
  align-items: center;    // Центрирует кнопки по горизонтали внутри колонки
  gap: 12px;              // Вертикальный отступ между кнопками
}

// ----------------------------------------------------
// 3. Стили для правой колонки
// ----------------------------------------------------
.main-menu-right-column {
  position: absolute;
  top: max(250px, calc(220px + var(--safe-area-inset-top, 0px))); 
  right: calc(env(safe-area-inset-right, 0px) + 10px); 
  z-index: 5;  

  // Размеры колонки
  width: auto;
  min-width: 68px;
  height: auto;
  // min-height: 240px; // Аналогично левой колонке

  // Flex-контейнер для кнопок
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 12px;
}

// Название главы (Как было, но можно поднять z-index)
.chapter-name {
  position: absolute;
  bottom: 85px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 5; // Выше карты
  font-size: 20px;
  font-weight: bold;
  color: white;
  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.8);
  background-color: rgba(0, 0, 0, 0.4);
  padding: 5px 15px;
  border-radius: 15px;
  pointer-events: none; // Не мешает кликам по карте под ним
}

// --- Попапы и Оверлеи (Как было) ---
.level-popup,
.level-loading-overlay {
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 100; // Очень высоко
}
.level-popup { background: rgba(0, 0, 0, 0.7); }
.level-loading-overlay { background: rgba(0, 0, 0, 0.85); z-index: 101; } // Самый высокий

.level-popup-box {
  background: #2d3748; padding: 25px 35px; border-radius: 12px; color: white;
  text-align: center; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5); min-width: 280px;
  border: 1px solid #4a5568;

  h3 { margin-top: 0; margin-bottom: 15px; font-size: 1.1rem;}
  p { margin-top: 12px; color: #cbd5e1; font-size: 0.9rem;}
}

.popup-buttons {
  display: flex; justify-content: center; gap: 15px; margin-top: 20px;
  button {
    padding: 10px 20px; border-radius: 8px; border: none; cursor: pointer;
    font-weight: 600; font-size: 0.9rem;
    transition: background-color 0.2s, transform 0.1s;
    &:active { transform: scale(0.97); }

    &:first-child:not(:disabled) { background-color: #4CAF50; color: white; }
    &:first-child:hover:not(:disabled) { background-color: #5cb85c; }
    &:last-child:not(:disabled) { background-color: #718096; color: white; }
    &:last-child:hover:not(:disabled) { background-color: #8592a6; }
    &:disabled { background-color: #555 !important; color: #aaa !important; cursor: default; opacity: 0.7;}
  }
}

.loading-text { color: white; font-size: 1.2rem; }
.loading-spinner {
  border: 4px solid rgba(255, 255, 255, 0.3); border-left-color: #fff;
  border-radius: 50%; width: 40px; height: 40px;
  animation: spin 1s linear infinite; margin-bottom: 15px;
}
@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }

// --- Кнопка Reset (Как было) ---

.reset-button {
  position: absolute; // Позиционируем относительно .main-menu (если у него position: relative) или viewport
  // Отступы от нижнего левого угла, УЧИТЫВАЯ безопасные зоны
  left: calc(env(safe-area-inset-left, 0px) + 200px);   // 15px от левого края + safe area
  top: calc(env(safe-area-inset-bottom, 0px) + 70px); // 15px от нижнего края + safe area
  
  // Если у тебя есть навбар внизу фиксированной высоты (например, 60px),
  // то bottom нужно будет поднять еще выше:
  // bottom: calc(env(safe-area-inset-bottom, 0px) + 60px + 15px); // 60px (навбар) + 15px (зазор)

  background-color: #dc3545; // Красный цвет для опасной кнопки
  color: white;
  padding: 8px 12px;
  border: none;
  border-radius: 5px;
  font-size: 0.9em;
  font-weight: bold;
  cursor: pointer;
  box-shadow: 0 2px 5px rgba(0,0,0,0.3);
  z-index: 1000; // Поверх других элементов меню

  &:hover {
    background-color: #c82333; // Темнее при наведении
  }
}

.popup-overlay-for-mail {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: mail.$mail-overlay-bg-main;
  display: flex;
  align-items: center; // Центрируем поп-ап по вертикали
  justify-content: center; // Центрируем поп-ап по горизонтали
  z-index: 1000;
  padding: 20px; // Отступы, чтобы поп-ап не прилегал к краям экрана
}

.popup-overlay-for-mail {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: mail.$mail-overlay-bg-main;
  display: flex;
  align-items: center; // Центрируем поп-ап по вертикали
  justify-content: center; // Центрируем поп-ап по горизонтали
  z-index: 1000;
  padding: 20px; // Отступы, чтобы поп-ап не прилегал к краям экрана
}


// Новый внешний контейнер, который позволит баннеру "выступать"
.mail-popup-outer-frame {
position: relative; // Для позиционирования баннера и кнопки закрытия
width: 100%;
max-width: 420px; // Ширина как у синего блока
// Высота будет определяться .mail-popup-content-wrapper + выступающий баннер
// padding-top здесь не нужен, так как баннер будет абсолютно позиционирован или с отрицательным margin
animation: mailPopupAppear 0.3s ease-out;
}

.mail-title-banner {
background-color: mail.$mail-banner-bg;
color: mail.$mail-banner-text-color;
font-size: 1.1em;
font-weight: bold;
text-align: center;
padding: 8px 20px; // Паддинги для текста внутри баннера
border: 2px solid mail.$mail-banner-border-color; // Обводка баннера
border-bottom: none; // Нижнюю обводку убираем, если он "сидит" на синем блоке
top: 20px; // <<< ДОБАВЛЕНО: Сдвигаем баннер вниз на 10px (подбери значение)

// --- Позиционирование для "нависания" ---
position: relative; // Можно оставить relative и играть с margin-bottom для .mail-popup-content-wrapper
                    // Либо absolute для более точного контроля над .mail-popup-outer-frame
z-index: 2; // Выше основного контента поп-апа
width: 30%; // Ширина самого желтого элемента
min-width: 120px;
margin: 0 auto; // Центрируем баннер
border-radius: 10px 10px 10px 10px; // Скругление только верхних углов

// Чтобы он "сел" на синий блок, синий блок должен начаться чуть ниже
// Это будет достигнуто тем, что баннер идет первым в потоке .mail-popup-outer-frame
}

// Основной синий блок с контентом
.mail-main-content-body {
  position: relative; // Для позиционирования кнопки закрытия внутри него
  background: linear-gradient(160deg, mail.$mail-popup-bg-start 0%, mail.$mail-popup-bg-end 100%);
  border-radius: 12px;
  border: 1px solid mail.$mail-popup-border-color;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
  
  padding-top: 15px; // Отступ сверху, чтобы контент не заезжал под кнопку X или баннер (если он частично внутри)
  // Если баннер полностью снаружи, этот padding-top может быть меньше или равен отступу кнопки X.
  
  display: flex;
  flex-direction: column;
  overflow: hidden; 
  
  // Задаем высоту здесь, чтобы контролировать количество видимых писем
  // max-height был у .mail-popup-content-wrapper, теперь это .mail-main-content-body
  height: auto; 
  max-height: 400px; // Например, для 3-4 писем + шапка/футер списка
}


// Кнопка закрытия (X) для всего интерфейса почты
.mail-interface-close-button {
position: absolute;
top: 8px; // Отступ от верха .mail-popup-content-wrapper (синего блока)
right: 8px;
background: rgba(255, 255, 255, 0.1);
border: 1px solid rgba(255, 255, 255, 0.2);
color: mail.$mail-text-on-dark-bg;
width: 28px;
height: 28px;
border-radius: 50%;
font-size: 1.1em;
line-height: 26px;
text-align: center;
cursor: pointer;
z-index: 10; // Выше контента списка
transition: background-color 0.2s, transform 0.1s;

&:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.1);
}
 &:active {
  transform: scale(0.95);
 }
}

@keyframes mailPopupAppear {
  from { 
    opacity: 0; 
    transform: scale(0.9); 
  }
  to { 
    opacity: 1; 
    transform: scale(1); 
  }
}
