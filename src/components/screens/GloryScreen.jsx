// GloryScreen.jsx
import React, { useState, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import useGameStore from '../../store/useGameStore.js'; // –ù—É–∂–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–ª—è Trials –∏ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
import trialsData from '../../data/trialsData.js';
import TrophiesTab from '../TrophiesTab'; // <<< –£–ë–ï–î–ò–°–¨, –ß–¢–û –ü–£–¢–¨ –í–ï–†–ù–´–ô (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞)
import './GloryScreen.scss';

// import { pageVariants, pageTransition } from '../../animations'; // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –∫–∞–∫ –∏ –±—ã–ª–æ

const tabContentVariants = {
    initial: { opacity: 0, x: 20 },
    animate: { opacity: 1, x: 0, transition: { duration: 0.3, ease: "easeInOut" } },
    exit: { opacity: 0, x: -20, position: 'absolute', width: '100%', transition: { duration: 0.2, ease: "easeInOut" } },
};

const GloryScreen = () => {
    const [activeTab, setActiveTab] = useState('Trials');
    const [expandedTrialId, setExpandedTrialId] = useState(null);

    // –î–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ—Ä–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è GloryScreen (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–ª—è Trials)
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è Trophies —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ TrophiesTab
    const {
        trialsStatus,
        markTrialActionTaken,
        claimTrialReward,
        // –§—É–Ω–∫—Ü–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è Trophies (achievements) —É–¥–∞–ª–µ–Ω—ã –æ—Ç—Å—é–¥–∞,
        // —Ç–∞–∫ –∫–∞–∫ TrophiesTab –¥–æ–ª–∂–µ–Ω —Å–∞–º –∏—Ö –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Å—Ç–æ—Ä–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ props.
    } = useGameStore((state) => ({
        trialsStatus: state.trialsStatus || {},
        markTrialActionTaken: state.markTrialActionTaken,
        claimTrialReward: state.claimTrialReward,
        // –£–±–µ–¥–∏—Å—å, —á—Ç–æ TrophiesTab –ø–æ–ª—É—á–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –µ–º—É –¥–∞–Ω–Ω—ã–µ –∏–∑ useGameStore —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
    }));

    // --- –õ–æ–≥–∏–∫–∞, –æ—Ç–Ω–æ—Å—è—â–∞—è—Å—è –¢–û–õ–¨–ö–û –∫ Trials, –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å ---
    const toggleTrialExpansion = (trialId) => {
        setExpandedTrialId(prevId => (prevId === trialId ? null : trialId));
    };

    const getTrialRewardPreviewText = (reward) => {
        if (!reward) return "";
        let text = "";
        if (reward.type === 'gold') text = `${reward.amount} Gold`;
        else if (reward.type === 'diamonds') text = `${reward.amount} Diamonds`;
        else if (reward.type === 'toncoin_shards') text = `${reward.amount} TON Shards`;
        else if (reward.type === 'rareChestKeys') text = `${reward.amount} Rare Key${reward.amount > 1 ? 's' : ''}`;
        else if (reward.type === 'epicChestKeys') text = `${reward.amount} Epic Key${reward.amount > 1 ? 's' : ''}`;
        // –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –Ω–∞–≥—Ä–∞–¥, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ trialsData
        return text;
    };

    const trialsToDisplay = useMemo(() => {
        return trialsData.map(trial => {
            const status = trialsStatus[trial.id] || { actionTaken: false, rewardClaimed: false };
            return {
                ...trial,
                actionTaken: status.actionTaken,
                rewardClaimed: status.rewardClaimed,
                canClaimReward: status.actionTaken && !status.rewardClaimed,
            };
        });
    }, [trialsStatus]); // trialsData —É–±—Ä–∞–Ω –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Ç.–∫. –æ–Ω —Å—Ç–∞—Ç–∏—á–µ–Ω

    const handleTrialMainAction = (e, trial) => {
        e.stopPropagation();
        if (trial.rewardClaimed) return;

        if (trial.canClaimReward) {
            if(claimTrialReward) claimTrialReward(trial.id);
        } else if (!trial.actionTaken) {
            if (trial.actionUrl) {
                window.open(trial.actionUrl, '_blank');
            }
            if(markTrialActionTaken) markTrialActionTaken(trial.id);
        }
    };
    // --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –¥–ª—è Trials ---

    // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è Trophies (–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π) —É–¥–∞–ª–µ–Ω–∞ –æ—Ç—Å—é–¥–∞ ---
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ TrophiesTab —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –¥–∞–Ω–Ω—ã–º–∏,
    // –≤–∫–ª—é—á–∞—è selectedAchId, isLevelRewardsPopupOpen, achievementsToDisplay, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Ç.–¥.

    return (
        <motion.div
            className="glory-screen"
            initial="initial" animate="in" exit="out"
            // variants –∏ transition –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã, –∫–∞–∫ –∏ –±—ã–ª–æ
        >
            <div className="tabs-navigation">
                <button
                    className={`tab-button ${activeTab === 'Trophies' ? 'active' : ''}`}
                    onClick={() => setActiveTab('Trophies')}
                >
                    üèÜ Trophies
                </button>
                <button
                    className={`tab-button ${activeTab === 'Trials' ? 'active' : ''}`}
                    onClick={() => setActiveTab('Trials')}
                >
                    üéØ Trials
                </button>
            </div>

            <div className="tab-content">
                <AnimatePresence mode="wait">
                    {activeTab === 'Trophies' && (
                        <motion.div
                            key="trophies"
                            className="trophies-content-motion-wrapper" // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–Ω–∏–ø–ø–µ—Ç–∞ –¥–ª—è –æ–±–µ—Ä—Ç–∫–∏ motion.div
                            variants={tabContentVariants}
                            initial="initial"
                            animate="animate"
                            exit="exit"
                        >
                            {/* VVV –ü–†–û–°–¢–û –†–ï–ù–î–ï–†–ò–ú –ö–û–ú–ü–û–ù–ï–ù–¢ TrophiesTab VVV */}
                            <TrophiesTab />
                            {/* ^^^ –ö–û–ú–ü–û–ù–ï–ù–¢ TrophiesTab –¢–ï–ü–ï–†–¨ –°–ê–ú –ó–ê–ë–û–¢–ò–¢–°–Ø –û –°–í–û–ï–ú –°–û–î–ï–†–ñ–ò–ú–û–ú ^^^ */}
                        </motion.div>
                    )}

                    {activeTab === 'Trials' && (
                        <motion.div
                            key="trials"
                            className="trials-content" // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
                            variants={tabContentVariants}
                            initial="initial"
                            animate="animate"
                            exit="exit"
                        >
                            <img src="/assets/trials-banner.png" alt="Trials Banner" className="trials-banner-image" />
                            <p className="trials-main-description">
                                Unlock amazing and valuable rewards with Trials! It's your chance to earn great prizes by completing simple actions. Don't miss out on these easy opportunities to get rewarded!
                            </p>
                            <div className="available-trials-title-container">
                                <h4 className="available-trials-title">Available Trials:</h4>
                            </div>
                            <div className="trials-list">
                                {trialsToDisplay.map(trial => {
                                    const isExpanded = expandedTrialId === trial.id;
                                    return (
                                        <div
                                            key={trial.id}
                                            className={`trial-item ${trial.rewardClaimed ? 'claimed' : ''} ${trial.canClaimReward ? 'claimable' : ''} ${isExpanded ? 'expanded' : ''}`}
                                            onClick={() => toggleTrialExpansion(trial.id)}
                                        >
                                            <div className="trial-content-wrapper">
                                                <div className="trial-reward-icon-display">
                                                    {trial.reward?.icon || 'üéÅ'}
                                                </div>
                                                <div className="trial-details-area">
                                                    <div className="trial-name">{trial.name}</div>
                                                    <div className="trial-rewards-summary">
                                                        Rewards: <span className="reward-icon-inline">{trial.reward?.icon}</span> {getTrialRewardPreviewText(trial.reward)}
                                                    </div>
                                                </div>
                                                <div className="trial-action-button-container">
                                                    <button
                                                        className={`trial-button ${trial.canClaimReward ? 'claim-type' : 'action-type'}`}
                                                        onClick={(e) => handleTrialMainAction(e, trial)}
                                                        disabled={trial.rewardClaimed}
                                                    >
                                                        {trial.rewardClaimed ? "‚úîÔ∏è" : (trial.canClaimReward ? trial.actionTextClaim : trial.actionTextDefault)}
                                                    </button>
                                                </div>
                                            </div>
                                            <AnimatePresence>
                                                {isExpanded && (
                                                    <motion.div
                                                        className="trial-description-expanded"
                                                        initial={{ opacity: 0, height: 0, y: -10, borderTopWidth: 0 }}
                                                        animate={{ opacity: 1, height: 'auto', y: 0, borderTopWidth: '1px',
                                                                  paddingTop:'12px', paddingBottom:'12px', marginTop: '12px' }}
                                                        exit={{ opacity: 0, height: 0, y: -10, borderTopWidth: 0,
                                                                paddingTop:0, paddingBottom:0, marginTop:0 }}
                                                        transition={{ duration: 0.25, ease: "easeInOut" }}
                                                    >
                                                        <p>{trial.description}</p>
                                                    </motion.div>
                                                )}
                                            </AnimatePresence>
                                        </div>
                                    );
                                })}
                                {trialsToDisplay.length === 0 && <p>–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π.</p>}
                            </div>
                        </motion.div>
                    )}
                </AnimatePresence>
            </div>
        </motion.div>
    );
};

export default GloryScreen;