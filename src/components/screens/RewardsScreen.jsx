// src/components/RewardsScreen.jsx
import React, { useState, useMemo, useCallback, useEffect } from 'react';
import './RewardsScreen.scss';
import initialRewardDataFromFile from '../../data/rewardStagesData.js'; // –î–∞–Ω–Ω—ã–µ –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –ø–æ —ç—Ç–∞–ø–∞–º
import { useNavigate } from 'react-router-dom';
import useGameStore from '../../store/useGameStore.js';

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –û–î–ù–û–ô –Ω–∞–≥—Ä–∞–¥—ã ---
const RewardItem = React.memo(({ reward, isClaimed, isClaimable, isLocked, onClaim }) => {
    if (!reward) return <div className="reward-slot empty"></div>; // –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç, –µ—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç

    const { type, amount, name, icon } = reward; // 'name' –∏ 'icon' –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤

    const handleClick = useCallback(() => {
        if (isClaimable && !isLocked) {
            onClaim(reward);
        }
    }, [isClaimable, isLocked, onClaim, reward]);

    let rewardDisplayName = type;
    if (name) rewardDisplayName = name; // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è (–¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    else if (type === 'gold') rewardDisplayName = '–ó–æ–ª–æ—Ç–æ';
    else if (type === 'diamonds') rewardDisplayName = '–ê–ª–º–∞–∑—ã';
    else if (type === 'toncoin_shards') rewardDisplayName = '–û—Å–∫–æ–ª–∫–∏ TON';
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    const slotClasses = `reward-slot reward-type-${type} ${isClaimed ? 'claimed' : ''} ${isClaimable ? 'claimable' : ''} ${isLocked ? 'locked' : ''}`;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ CSS —á–µ—Ä–µ–∑ type –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ reward.icon)
    const iconStyle = reward.icon ? { backgroundImage: `url(${reward.icon})` } : {};

    return (
        <div
            className={slotClasses}
            onClick={handleClick}
            title={isLocked ? '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ –§–æ–Ω–¥–∞' : (isClaimable ? `–ó–∞–±—Ä–∞—Ç—å ${rewardDisplayName} x ${amount || ''}` : `${rewardDisplayName} ${amount || ''}`)}
        >
            <div className="reward-icon" style={iconStyle}> {/* –ò–∫–æ–Ω–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ reward.icon –∏–ª–∏ CSS */}
                {amount > 0 && <span className="reward-amount">{amount}</span>}
            </div>
            {isClaimed && <div className="checkmark">‚úî</div>}
            {isLocked && !isClaimed && <div className="lock-icon">üîí</div>}
            {!isClaimed && isClaimable && !isLocked && <div className="claim-indicator">–ó–∞–±—Ä–∞—Ç—å</div>}
        </div>
    );
});


// --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≠–ö–†–ê–ù–ê –ù–∞–≥—Ä–∞–¥ ---
const RewardsScreen = () => {
    const navigate = useNavigate();
    const levelsCompletedFromStore = useGameStore(state => state.levelsCompleted);
    const booleanFlags = useGameStore(state => state.booleanFlags);
    const setHasClaimableRewardsIndicator = useGameStore(state => state.setHasClaimableRewardsIndicator);
    const setBooleanFlag = useGameStore(state => state.setBooleanFlag);

    // –ü–æ–ª—É—á–∞–µ–º actions –∏–∑ —Å—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
    const addGold = useGameStore(state => state.addGold);
    const addDiamonds = useGameStore(state => state.addDiamonds);
    const addToncoinShards = useGameStore(state => state.addToncoinShards);
    const addItemToInventory = useGameStore(state => state.addItemToInventory); // –î–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤

    const processStagesWithCompletion = useCallback((stagesData, gameCompletionData) => {
        const processedStages = {};
        // –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        const stagesDataCopy = JSON.parse(JSON.stringify(stagesData));

        for (const stageKey in stagesDataCopy) { // stageKey - —ç—Ç–æ –Ω–æ–º–µ—Ä —ç—Ç–∞–ø–∞ –Ω–∞–≥—Ä–∞–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä, "1", "2"
            if (stagesDataCopy.hasOwnProperty(stageKey)) {
                processedStages[stageKey] = stagesDataCopy[stageKey].map(rewardLevel => {
                    const chapterForCompletion = rewardLevel.gameChapterId;
                    const levelIdForCompletion = rewardLevel.gameLevelInChapter; // –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–π ID —É—Ä–æ–≤–Ω—è
                
                    let isGameLevelActuallyCompleted = false;
                    if (typeof chapterForCompletion === 'number' && typeof levelIdForCompletion !== 'undefined') {
                        const levelKeyInStore = `c${chapterForCompletion}_l${levelIdForCompletion}`;
                        // !!! –î–û–ë–ê–í–¨–¢–ï CONSOLE.LOG –ó–î–ï–°–¨ !!!
                        console.log(`Checking completion for: Stage ${stageKey}, RewardLevel ${rewardLevel.level}, GameLevelKey: ${levelKeyInStore}`);
                        const completionRecord = gameCompletionData[levelKeyInStore];
                        console.log(`CompletionRecord for ${levelKeyInStore}:`, completionRecord);
                        isGameLevelActuallyCompleted = !!(completionRecord && completionRecord.normal);
                        console.log(`isGameLevelActuallyCompleted for ${levelKeyInStore}: ${isGameLevelActuallyCompleted}`);
                    } else {
                        isGameLevelActuallyCompleted = true; // –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —É—Ä–æ–≤–Ω—é, —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–π
                        console.log(`Reward at stage ${stageKey}, level ${rewardLevel.level} has no game level binding. Defaulting to completed: true.`);
                    }
                
                    return {
                        ...rewardLevel,
                        completed: isGameLevelActuallyCompleted,
                    };
                });
            }
        }
        return processedStages;
    }, []);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è stagesProgress —Å —É—á–µ—Ç–æ–º claimed —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ localStorage, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    // –∏–ª–∏ –∏–∑ initialRewardDataFromFile, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫/–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
    const [stagesProgress, setStagesProgress] = useState(() => {
        const savedRewardProgress = useGameStore.getState().rewardScreenProgress; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ —ç—Ç–æ –≤ —Å—Ç–æ—Ä
        const initialData = savedRewardProgress || initialRewardDataFromFile;
        return processStagesWithCompletion(initialData, levelsCompletedFromStore);
    });

    useEffect(() => {
        console.log("–ê–ö–¢–£–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï levelsCompleted:", JSON.stringify(useGameStore.getState().levelsCompleted));
    }, [levelsCompletedFromStore]); // –û–±–Ω–æ–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ levelsCompletedFromStore –∏–∑–º–µ–Ω–∏—Ç—Å—è

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è stagesProgress (–æ—Å–æ–±–µ–Ω–Ω–æ freeClaimed/paidClaimed) –≤ useGameStore
    useEffect(() => {
        // –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ stagesProgress
        // –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å debounce, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        useGameStore.setState({ rewardScreenProgress: stagesProgress });
    }, [stagesProgress]);


    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 'completed' —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–≥—Ä–∞–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ levelsCompletedFromStore
    useEffect(() => {
        setStagesProgress(currentStagesProgress => {
            // –ó–∞–Ω–æ–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ò–°–•–û–î–ù–´–ï –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö —Å –ù–û–í–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π
            const progressFromGameLevels = processStagesWithCompletion(initialRewardDataFromFile, levelsCompletedFromStore);
            const mergedStages = JSON.parse(JSON.stringify(currentStagesProgress)); // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å claimed —Å—Ç–∞—Ç—É—Å–∞–º–∏)

            for (const stageKey in progressFromGameLevels) {
                if (progressFromGameLevels.hasOwnProperty(stageKey)) {
                    if (mergedStages.hasOwnProperty(stageKey)) {
                        mergedStages[stageKey] = mergedStages[stageKey].map(currentLevelReward => {
                            const updatedLevelInfo = progressFromGameLevels[stageKey].find(
                                newInfo => newInfo.level === currentLevelReward.level
                            );
                            if (updatedLevelInfo) {
                                return {
                                    ...currentLevelReward, // –°–æ—Ö—Ä–∞–Ω—è–µ–º freeClaimed, paidClaimed
                                    completed: updatedLevelInfo.completed, // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ completed
                                };
                            }
                            return currentLevelReward;
                        });
                    } else {
                        // –ï—Å–ª–∏ —ç—Ç–∞–ø–∞ –Ω–µ –±—ã–ª–æ –≤ mergedStages, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∏ —Ç–∞–∫–æ–π –ª–æ–≥–∏–∫–µ)
                        mergedStages[stageKey] = progressFromGameLevels[stageKey];
                    }
                }
            }
            return mergedStages;
        });
    }, [levelsCompletedFromStore, processStagesWithCompletion]);


    const [currentStage, setCurrentStage] = useState('1'); // –ö–ª—é—á —ç—Ç–∞–ø–∞ - —Å—Ç—Ä–æ–∫–∞
    const [isPaidUnlocked, setIsPaidUnlocked] = useState(() => booleanFlags.rewardFundPurchased || false);

    const highestCompletedStageNum = useMemo(() => {
        let maxStage = 0;
        const sortedStageKeys = Object.keys(stagesProgress).map(Number).sort((a, b) => a - b);
        for (const stageNum of sortedStageKeys) {
            const stageLevels = stagesProgress[stageNum.toString()];
            if (stageLevels && stageLevels.every(level => level.completed)) {
                maxStage = stageNum;
            } else {
                break; // –ü–µ—Ä–≤—ã–π –∂–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —ç—Ç–∞–ø –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥—Å—á–µ—Ç
            }
        }
        return maxStage;
    }, [stagesProgress]);

    const currentStageRewards = useMemo(() => stagesProgress[currentStage] || [], [stagesProgress, currentStage]);

    const applyRewardToStore = useCallback((reward) => {
        if (!reward || !reward.type || typeof reward.amount === 'undefined') {
            console.error("Invalid reward object for store:", reward);
            return;
        }
        console.log(`Applying reward to store: ${reward.type} x ${reward.amount}`);
        switch (reward.type) {
            case 'gold':
                addGold(reward.amount);
                break;
            case 'diamond':
                addDiamonds(reward.amount);
                break;
            case 'ton_shard':
                addToncoinShards(reward.amount);
                break;
            case 'item':
                if (reward.itemId) {
                    addItemToInventory(reward.itemId, reward.amount || 1);
                } else {
                    console.warn("Claimed item reward is missing itemId:", reward);
                }
                break;
            default:
                console.warn(`Unknown reward type to add to store: ${reward.type}`);
        }
    }, [addGold, addDiamonds, addToncoinShards, addItemToInventory]);


    const handleClaim = useCallback((reward, levelOrderInStage, isPaidTrack) => {
        applyRewardToStore(reward); // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –∫ —Å—Ç–æ—Ä—É

        setStagesProgress(prev => {
            const newStages = { ...prev };
            const stageToUpdate = [...(newStages[currentStage] || [])];
            const rewardIndex = stageToUpdate.findIndex(item => item.level === levelOrderInStage);

            if (rewardIndex !== -1) {
                stageToUpdate[rewardIndex] = {
                    ...stageToUpdate[rewardIndex],
                    [isPaidTrack ? 'paidClaimed' : 'freeClaimed']: true
                };
                newStages[currentStage] = stageToUpdate;
                return newStages;
            }
            return prev; // –ï—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        });
    }, [currentStage, applyRewardToStore]);


    const handleClaimAll = useCallback(() => {
        let anythingClaimed = false;
        setStagesProgress(prevData => {
            const updatedData = JSON.parse(JSON.stringify(prevData));
            const rewardsToApplyBatch = [];

            Object.keys(updatedData).forEach(stageKey => {
                const stageNum = parseInt(stageKey);
                // –ú–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã —Å –ª—é–±–æ–≥–æ —ç—Ç–∞–ø–∞, —É—Å–ª–æ–≤–∏–µ completed –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ,
                // –Ω–æ –æ–±—ã—á–Ω–æ —ç—Ç–æ —ç—Ç–∞–ø—ã –¥–æ highestCompletedStageNum + 1
                if (stageNum > highestCompletedStageNum + 1 && stageNum > 1) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∏–µ –±—É–¥—É—â–∏–µ —ç—Ç–∞–ø—ã (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ)


                updatedData[stageKey] = updatedData[stageKey].map(levelData => {
                    let newFreeClaimed = levelData.freeClaimed;
                    let newPaidClaimed = levelData.paidClaimed;

                    if (levelData.completed && levelData.freeReward && !levelData.freeClaimed) {
                        newFreeClaimed = true;
                        rewardsToApplyBatch.push(levelData.freeReward);
                        anythingClaimed = true;
                    }
                    if (levelData.completed && levelData.paidReward && !levelData.paidClaimed && isPaidUnlocked) {
                        newPaidClaimed = true;
                        rewardsToApplyBatch.push(levelData.paidReward);
                        anythingClaimed = true;
                    }
                    return { ...levelData, freeClaimed: newFreeClaimed, paidClaimed: newPaidClaimed };
                });
            });

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞–∑–æ–º
            rewardsToApplyBatch.forEach(reward => applyRewardToStore(reward));

            return updatedData;
        });

        if (anythingClaimed) {
            console.log('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
        } else {
            console.log('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Å–±–æ—Ä–∞.');
        }
    }, [isPaidUnlocked, highestCompletedStageNum, applyRewardToStore]);


    const handlePurchase = useCallback(() => {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏:
        setIsPaidUnlocked(true);
        setBooleanFlag('rewardFundPurchased', true);
        // alert('–ü–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!'); // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }, [setBooleanFlag]);


    const canClaimAny = useMemo(() => {
        return Object.entries(stagesProgress).some(([stageKey, levels]) => {
            const stageNum = parseInt(stageKey);
            if (stageNum > highestCompletedStageNum + 1 && stageNum > 1) return false;

            return levels.some(level =>
                (level.completed && level.freeReward && !level.freeClaimed) ||
                (level.completed && level.paidReward && isPaidUnlocked && !level.paidClaimed)
            );
        });
    }, [stagesProgress, isPaidUnlocked, highestCompletedStageNum]);


    useEffect(() => {
        setHasClaimableRewardsIndicator(canClaimAny);
    }, [canClaimAny, setHasClaimableRewardsIndicator]);

    const handleGoBack = useCallback(() => navigate(-1), [navigate]);

    return (
        <div className="rewards-screen">
            <button className="popup-close-button" onClick={handleGoBack} aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
            <div className="rewards-screen-header">
                <div className="header-placeholder-left"></div> {/* –î–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω–∞ */}
                <h1>–ù–∞–≥—Ä–∞–¥—ã –§–æ–Ω–¥–∞</h1>
            </div>

            <div className="stage-tabs">
                {Object.keys(initialRewardDataFromFile).map(stageNumStr => {
                    const stageNum = parseInt(stageNumStr);
                    const isLocked = stageNum > 1 && stageNum > (highestCompletedStageNum + 1);
                    return (
                        <button
                            key={stageNumStr}
                            className={`stage-tab ${stageNumStr === currentStage ? 'active' : ''} ${isLocked ? 'locked' : ''}`}
                            onClick={() => !isLocked && setCurrentStage(stageNumStr)}
                            disabled={isLocked}
                            title={isLocked ? `–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç—Ç–∞–ø—ã` : `–≠—Ç–∞–ø ${stageNumStr}`}
                        >
                            {isLocked && <span className="stage-lock-icon">üîí</span>}
                            –≠—Ç–∞–ø {stageNumStr}
                        </button>
                    );
                })}
            </div>

            <div className="rewards-track-titles">
                <div className="title-column title-free">–ë–ï–°–ü–õ–ê–¢–ù–û</div>
                <div className="title-column-spacer"></div> {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏–ª–∏ –ª–µ–π–±–ª —É—Ä–æ–≤–Ω—è */}
                <div className="title-column title-paid">–§–û–ù–î</div>
            </div>

            <div className="rewards-track-wrapper">
                <div className="rewards-track-container">
                    {currentStageRewards.length === 0 ? (
                        <p className="no-rewards-message">–ù–∞–≥—Ä–∞–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!</p>
                    ) : (
                        currentStageRewards.map((levelData) => (
                            <div key={`${currentStage}-${levelData.level}`} className={`reward-row ${levelData.completed ? 'row-completed' : ''}`}>
                                <RewardItem
                                    reward={levelData.freeReward}
                                    isClaimed={!!levelData.freeClaimed}
                                    isClaimable={levelData.completed && !!levelData.freeReward && !levelData.freeClaimed}
                                    isLocked={false}
                                    onClaim={(reward) => handleClaim(reward, levelData.level, false)}
                                />
                                <div className="level-connector">
                                    <div className="grey-line-element"></div>
                                    <div className={`level-number ${levelData.completed ? 'completed' : ''}`}>{levelData.level}</div>
                                    {levelData.completed && (<div className="progress-line-segment"></div>)}
                                </div>
                                <RewardItem
                                    reward={levelData.paidReward}
                                    isClaimed={!!levelData.paidClaimed}
                                    isClaimable={levelData.completed && !!levelData.paidReward && !levelData.paidClaimed && isPaidUnlocked}
                                    isLocked={!isPaidUnlocked && !!levelData.paidReward}
                                    onClaim={(reward) => handleClaim(reward, levelData.level, true)}
                                />
                            </div>
                        ))
                    )}
                </div>
            </div>

            <div className="rewards-footer">
                <button
                    className="claim-all-button"
                    onClick={handleClaimAll}
                    disabled={!canClaimAny}
                    title={!canClaimAny ? "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥" : "–ó–∞–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã"}
                >
                    –ó–∞–±—Ä–∞—Ç—å –≤—Å–µ
                </button>
                {!isPaidUnlocked && (
                    <button className="purchase-button" onClick={handlePurchase}>
                        –ö—É–ø–∏—Ç—å –§–æ–Ω–¥ {/* <span className="price">$?.??</span> TODO: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ */}
                    </button>
                )}
                {isPaidUnlocked && (
                    <div className="paid-unlocked-indicator">–§–æ–Ω–¥ –ê–∫—Ç–∏–≤–µ–Ω ‚úî</div>
                )}
            </div>
        </div>
    );
};

export default RewardsScreen;