// src/components/screens/TaskCenterModal.jsx
import React, { useState, useEffect, useCallback } from 'react'; // –î–æ–±–∞–≤–ª–µ–Ω useCallback –∏–∑ –∫–æ–¥1
import './TaskCenterModal.scss'; // –û—Å—Ç–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π –∏–∑ –∫–æ–¥2
import TaskItemNew from './TaskItemNew'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ –∫–æ–¥1, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –¥–ª—è –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

// categoryGoalInfo –∏–∑ –∫–æ–¥1 (–æ–Ω–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã, –Ω–æ –≤–æ–∑—å–º–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∫–æ–¥1 –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
const categoryGoalInfo = {
  daily: { targetXP: 100, rewardIconEmoji: 'üéüÔ∏è', rewardQuantity: null },
  weekly: { targetXP: 100, rewardIconEmoji: 'üîë', rewardQuantity: null },
  monthly: { targetXP: 100, rewardIconEmoji: 'üí∞', rewardQuantity: '10' }
  // –ï—Å–ª–∏ –¥–ª—è USDC –Ω—É–∂–Ω–∞ —Å–∞–º–∞ –≤–∞–ª—é—Ç–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: rewardCurrency: 'USDC' (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –∫–æ–¥2)
};

const TaskCenterModal = ({ isOpen, onClose, tasksData: initialTasksData }) => { // tasksData –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ initialTasksData (–∏–∑ –∫–æ–¥1)
  const [activeModalTab, setActiveModalTab] = useState('daily');
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å isClaimed (–∏–∑ –∫–æ–¥1)
  const [tasks, setTasks] = useState(initialTasksData);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫–∞–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑ –∫–æ–¥1)
  const [claimedForCategoryProgress, setClaimedForCategoryProgress] = useState({}); // { taskId: boolean }

  useEffect(() => {
    // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏ –∏–ª–∏ —Å–º–µ–Ω–µ initialTasksData, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    // –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ –∑–∞–∫–ª–µ–π–º–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑ –∫–æ–¥1)
    setTasks(initialTasksData);
    setClaimedForCategoryProgress({});
  }, [isOpen, initialTasksData]);

  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };
    if (isOpen) {
      document.addEventListener('keydown', handleKeyDown);
    }
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [isOpen, onClose]); // –≠—Ç–æ—Ç —Ö—É–∫ –±—ã–ª –≤ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–∞—Ö, –æ—Å—Ç–∞–≤–ª—è–µ–º

  if (!isOpen) {
    return null;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è tasks (–∏–∑ –∫–æ–¥1)
  const currentTasksForTab = tasks[activeModalTab] || [];
  const currentCategoryGoal = categoryGoalInfo[activeModalTab];

  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ù–ê –û–°–ù–û–í–ï claimedForCategoryProgress (–∏–∑ –∫–æ–¥1)
  const calculateCurrentCategoryXP = useCallback(() => {
    let totalXPForCategory = 0;
    (tasks[activeModalTab] || []).forEach(task => {
      // –ï—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞—á—É –±—ã–ª–∞ –∑–∞–∫–ª–µ–π–º–ª–µ–Ω–∞ –ò –£–ß–¢–ï–ù–ê –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (task.isCompleted && task.isClaimed && claimedForCategoryProgress[task.id]) {
        if (task.rewards && typeof task.rewards.points === 'number') {
          totalXPForCategory += task.rewards.points;
        }
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å xp:
        // if (task.rewards && typeof task.rewards.xp === 'number') {
        //   totalXPForCategory += task.rewards.xp;
        // }
      }
    });
    return totalXPForCategory;
  }, [tasks, activeModalTab, claimedForCategoryProgress]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è useCallback (–∏–∑ –∫–æ–¥1)

  const currentXPForCategory = calculateCurrentCategoryXP(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –∏–º—è –∏–∑ –∫–æ–¥1
  const targetXPForCategory = currentCategoryGoal.targetXP;
  const progressPercentCategory = targetXPForCategory > 0 ? Math.min((currentXPForCategory / targetXPForCategory) * 100, 100) : 0; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –∫–æ–¥1

  // –§—É–Ω–∫—Ü–∏—è handleClaimTask –∏–∑ –∫–æ–¥1
  const handleClaimTask = (taskId, taskCategory) => {
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á, –ø–æ–º–µ—á–∞—è –∑–∞–¥–∞—á—É –∫–∞–∫ "–∑–∞–∫–ª–µ–π–º–ª–µ–Ω–Ω—É—é"
    setTasks(prevTasks => {
      const updatedCategoryTasks = (prevTasks[taskCategory] || []).map(task =>
        task.id === taskId ? { ...task, isClaimed: true } : task
      );
      return {
        ...prevTasks,
        [taskCategory]: updatedCategoryTasks
      };
    });

    // 2. –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —ç—Ç—É –∑–∞–¥–∞—á—É —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—á—Ç–µ–Ω–∞ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    setClaimedForCategoryProgress(prev => ({ ...prev, [taskId]: true }));

    console.log(`Claimed reward for task ${taskId} in category ${taskCategory}. Progress points will be added.`);
    // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  };

  return (
    <div className="task-center-modal-overlay" onClick={onClose}>
      <div className="task-center-modal-content" onClick={(e) => e.stopPropagation()}>
        {/* –®–∞–ø–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–∑ –∫–æ–¥2 */}
        <header className="task-center-modal-header">
          <h3 className="task-center-modal-title">Quests Center</h3>
        </header>
        <button className="task-center-modal-close-btn" onClick={onClose}>
          &times;
        </button>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º –∏–∑ –∫–æ–¥2 */}
        <nav className="task-center-modal-tabs-nav">
          <button
            className={`modal-tab-btn ${activeModalTab === 'daily' ? 'active' : ''}`}
            onClick={() => setActiveModalTab('daily')}>
            Daily
          </button>
          <button
            className={`modal-tab-btn ${activeModalTab === 'weekly' ? 'active' : ''}`}
            onClick={() => setActiveModalTab('weekly')}>
            Weekly
          </button>
          <button
            className={`modal-tab-btn ${activeModalTab === 'monthly' ? 'active' : ''}`}
            onClick={() => setActiveModalTab('monthly')}>
            Monthly
          </button>
        </nav>

        <section className="task-center-modal-body">
          <div className="category-progress-wrapper">
            <div className="progress-bar-area">
              <div className="progress-bar-background">
                <div
                  className="progress-bar-foreground"
                  style={{ width: `${progressPercentCategory}%` }} // –ò—Å–ø–æ–ª—å–∑—É–µ–º progressPercentCategory –∏–∑ –∫–æ–¥1
                />
              </div>
              <span className="progress-bar-text-underneath">
                {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—á–∫–æ–≤/–æ–ø—ã—Ç–∞ –∏–∑ –∫–æ–¥1 */}
                {currentXPForCategory} / {targetXPForCategory} points {/* –∏–ª–∏ "–æ–ø—ã—Ç–∞" / "–ø–æ–∏–Ω—Ç–æ–≤" –∫–∞–∫ –≤ –∫–æ–¥2 */}
              </span>
            </div>
            {/* –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –Ω–∞–≥—Ä–∞–¥—ã, –∫–∞–∫ –≤ –∫–æ–¥2 (–æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏–∫–µ –∫–æ–¥1) */}
            <div className="category-main-reward-box">
              <span className="reward-icon">{currentCategoryGoal.rewardIconEmoji}</span>
              {currentCategoryGoal.rewardQuantity && (
                <span className="reward-quantity">{currentCategoryGoal.rewardQuantity}</span>
              )}
              {/* –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, USDC –¥–ª—è 10 USDC (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –∫–æ–¥2)
              currentCategoryGoal.rewardQuantity && currentCategoryGoal.rewardCurrency && (
                <span className="reward-currency">{currentCategoryGoal.rewardCurrency}</span>
              )
              */}
            </div>
          </div>

          {currentTasksForTab.length > 0 ? ( // –ò—Å–ø–æ–ª—å–∑—É–µ–º currentTasksForTab –∏–∑ –∫–æ–¥1
            <ul className="modal-task-list">
              {currentTasksForTab.map(task => ( // –ò—Å–ø–æ–ª—å–∑—É–µ–º currentTasksForTab –∏–∑ –∫–æ–¥1
                <TaskItemNew
                  key={task.id}
                  task={task} // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç task, –≤–∫–ª—é—á–∞—è isCompleted –∏ isClaimed
                  onClaim={() => handleClaimTask(task.id, activeModalTab)} // –ò—Å–ø–æ–ª—å–∑—É–µ–º handleClaimTask –∏–∑ –∫–æ–¥1
                />
              ))}
            </ul>
          ) : (
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á –∏–∑ –∫–æ–¥2
            <p className="no-tasks-info">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.</p>
          )}
        </section>
      </div>
    </div>
  );
};

export default TaskCenterModal;