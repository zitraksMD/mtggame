// src/components/screens/TaskCenterModal.jsx
import React, { useState, useEffect } from 'react';
import './TaskCenterModal.scss';

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –Ω–∞–≥—Ä–∞–¥–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const categoryGoalInfo = {
  daily: { targetXP: 100, rewardName: '–í–∞—É—á–µ—Ä', rewardIconEmoji: 'üéüÔ∏è' }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º Emoji –¥–ª—è –∏–∫–æ–Ω–∫–∏-–∑–∞–≥–ª—É—à–∫–∏
  weekly: { targetXP: 100, rewardName: '–ö–ª—é—á –æ—Ç —Å—É–Ω–¥—É–∫–∞', rewardIconEmoji: 'üîë' },
  monthly: { targetXP: 100, rewardName: '10 USDC', rewardIconEmoji: 'üí∞' }
};

const TaskCenterModal = ({ isOpen, onClose, tasksData, TaskItemComponent }) => {
  const [activeModalTab, setActiveModalTab] = useState('daily');

  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };
    if (isOpen) {
      document.addEventListener('keydown', handleKeyDown);
    }
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [isOpen, onClose]);

  if (!isOpen) {
    return null;
  }

  const activeCategoryKey = activeModalTab; // 'daily', 'weekly', –∏–ª–∏ 'monthly'
  const currentTasks = tasksData[activeCategoryKey] || [];
  const currentCategoryGoal = categoryGoalInfo[activeCategoryKey];

  // –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const calculateCurrentXP = (tasks) => {
    return tasks.reduce((totalXP, task) => {
      if (task.isCompleted) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–•–• –æ–ø—ã—Ç–∞"
        const xpValue = parseInt(task.reward.match(/\d+/)?.[0], 10);
        return totalXP + (isNaN(xpValue) ? 0 : xpValue);
      }
      return totalXP;
    }, 0);
  };

  const currentXP = calculateCurrentXP(currentTasks);
  const targetXP = currentCategoryGoal.targetXP;
  const progressPercent = targetXP > 0 ? Math.min((currentXP / targetXP) * 100, 100) : 0;

  return (
    <div className="task-center-modal-overlay" onClick={onClose}>
      <div className="task-center-modal-content" onClick={(e) => e.stopPropagation()}>
        <header className="task-center-modal-header">
          <h3 className="task-center-modal-title">–¶–µ–Ω—Ç—Ä –ó–∞–¥–∞–Ω–∏–π</h3>
          <button className="task-center-modal-close-btn" onClick={onClose}>
            &times;
          </button>
        </header>

        <nav className="task-center-modal-tabs-nav">
          <button
            className={`modal-tab-btn ${activeModalTab === 'daily' ? 'active' : ''}`}
            onClick={() => setActiveModalTab('daily')}>
            Daily
          </button>
          <button
            className={`modal-tab-btn ${activeModalTab === 'weekly' ? 'active' : ''}`}
            onClick={() => setActiveModalTab('weekly')}>
            Weekly
          </button>
          <button
            className={`modal-tab-btn ${activeModalTab === 'monthly' ? 'active' : ''}`}
            onClick={() => setActiveModalTab('monthly')}>
            Monthly
          </button>
        </nav>

        <section className="task-center-modal-body">
          {/* --- –°–ï–ö–¶–ò–Ø –ü–†–û–ì–†–ï–°–°-–ë–ê–†–ê –ò –ù–ê–ì–†–ê–î–´ –ó–ê –ö–ê–¢–ï–ì–û–†–ò–Æ --- */}
          <div className="category-progress-wrapper">
            {/* --- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ì–†–ï–°–°-–ë–ê–†–ê --- */}
            <div className="progress-bar-area"> {/* –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–∞—Ä –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥ –Ω–∏–º */}
              <div className="progress-bar-background">
                <div
                  className="progress-bar-foreground"
                  style={{ width: `${progressPercent}%` }}
                />
              </div>
              <span className="progress-bar-text-underneath">{currentXP} / {targetXP} –æ–ø—ã—Ç–∞</span> {/* –¢–µ–∫—Å—Ç —Ç–µ–ø–µ—Ä—å –∑–¥–µ—Å—å */}
            </div>
            {/* --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ --- */}
            <div className="category-main-reward">
              <span className="reward-icon">{currentCategoryGoal.rewardIconEmoji}</span>
              <span className="reward-text">{currentCategoryGoal.rewardName}</span>
              {/* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å", –µ—Å–ª–∏ currentXP >= targetXP –∏ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–µ –∑–∞–±—Ä–∞–Ω–∞ */}
            </div>
          </div>
          {/* --- –ö–û–ù–ï–¶ –°–ï–ö–¶–ò–ò –ü–†–û–ì–†–ï–°–°-–ë–ê–†–ê --- */}

          {currentTasks.length > 0 ? (
            <ul className="modal-task-list">
              {currentTasks.map(task => (
                <TaskItemComponent
                  key={task.id}
                  name={task.name}
                  progress={task.progress}
                  reward={task.reward} // –≠—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                  isCompleted={task.isCompleted}
                  onClaim={() => console.log(`Claiming reward for ${task.name} (from modal)`)}
                />
              ))}
            </ul>
          ) : (
            <p className="no-tasks-info">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.</p>
          )}
        </section>
      </div>
    </div>
  );
};

export default TaskCenterModal;