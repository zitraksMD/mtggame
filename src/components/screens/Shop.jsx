// src/components/Shop.jsx
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import useGameStore from '../../store/useGameStore.js';

// –î–∞–Ω–Ω—ã–µ —Å—É–Ω–¥—É–∫–æ–≤
import { ARTIFACT_CHESTS, getArtifactChestById } from '../../data/artifactChestData.js';
import { GEAR_CHESTS, getGearChestById } from '../../data/gearChestData.js'; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ –∫–Ω–æ–ø–æ–∫

// –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (–¥–ª—è Daily Shop –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ InfoPopup)
import itemsDatabase, { getItemById as getItemDataById } from '../../data/itemsDatabase.js';
import { getArtifactById } from '../../data/artifactsData.js';

// --- –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –î–õ–Ø –ë–ê–ù–î–õ–û–í ---
import { SPECIAL_DEALS } from '../../data/specialDealsData.js';
import { GENERAL_BUNDLES } from '../../data/generalBundlesData.js';

// <<< –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –≠–¢–û –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨ –ö REWARD_TYPES >>>
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø—É—Ç—å, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
import { REWARD_TYPES } from '../../data/ShardPassRewardsData.js'; // –ü—Ä–∏–º–µ—Ä –ø—É—Ç–∏

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ø–∞–ø–æ–≤
import ChestResultsPopup from '../popups/ChestResultsPopup.jsx';
import ChestInfoPopup from '../popups/ChestInfoPopup.jsx';

// –°—Ç–∏–ª–∏
import './Shop.scss';
import './ChestCard.scss';
// import './Carousel.scss';

// --- –•–µ–ª–ø–µ—Ä—ã –†–µ–¥–∫–æ—Å—Ç–∏ (–¥–ª—è InfoPopup) ---
const rarityOrder = { "Common": 1, "Uncommon": 2, "Rare": 3, "Epic": 4, "Legendary": 5, "Mythic": 6 };
const getTopRarities = (chest, count = 5) => {
    if (!chest || !chest.possibleRarities) {
        return [];
    }
    const sortedRarities = [...chest.possibleRarities].sort((a, b) => (rarityOrder[b] || 0) - (rarityOrder[a] || 0));
    return sortedRarities.slice(0, count);
};

// --- –•–µ–ª–ø–µ—Ä—ã –∏ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ö–∞—Ä—Ç–æ—á–µ–∫ ---
const getItemData = (itemId) => getItemDataById(itemId);

const ShopItemCard = ({ deal, itemData, onPurchase, purchased, playerGold, playerDiamonds }) => {
    const canAfford = deal.currency === 'gold' ? playerGold >= deal.price : playerDiamonds >= deal.price;
    const isAvailable = !purchased;
    const purchaseDisabled = !isAvailable || !canAfford;

    return (
        <div className={`shop-item-card ${!isAvailable ? 'sold-out' : ''} rarity-${itemData?.rarity || 'common'}`}>
            {deal.discount > 0 && <div className="discount-banner">{deal.discount}% OFF</div>}
            <div className="item-name">{itemData?.name || deal.itemId}</div>
            <img src={itemData?.image || '/assets/default-item.png'} alt={itemData?.name || '–ü—Ä–µ–¥–º–µ—Ç'} />
            <div className="purchase-limit">–û—Å—Ç–∞–ª–æ—Å—å: {isAvailable ? (deal.purchaseLimit || 1) : 0}</div>
            <button
                className="purchase-button"
                onClick={() => onPurchase(deal.id)}
                disabled={purchaseDisabled}
            >
                <img src={deal.currency === 'gold' ? '/assets/coin-icon.png' : '/assets/diamond-image.png'} alt={deal.currency} />
                {deal.price.toLocaleString()}
            </button>
        </div>
    );
};

const CurrencyPackCard = ({ pack, onPurchase }) => {
    const purchaseDisabled = false;

    return (
        <div className={`shop-item-card currency-pack-card rarity-${pack.rarity || 'common'}`}>
            <div className="item-name">{pack.name}</div>
            <img src={pack.icon || '/assets/currencies/diamonds_pack_1.png'} alt={pack.name} />
            <button className="purchase-button currency-button" onClick={() => onPurchase(pack.id)} disabled={purchaseDisabled}>
                <span>{pack.priceDisplay || `${pack.price}$`}</span>
            </button>
        </div>
    );
};

const BundleCard = ({ bundle, onPurchase }) => {
    if (!bundle) {
        return <div className="shop-item-card bundle-card error-placeholder" style={{ height: '120px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–±–æ—Ä–∞</p></div>;
    }
    const purchaseDisabled = false;

    return (
        <div className={`shop-item-card bundle-card rarity-${bundle.rarity || 'rare'}`}>
            {bundle.discount > 0 && <div className="discount-banner">{bundle.discount}% OFF</div>}
            <img
                className="bundle-image"
                src={bundle.icon || '/assets/bundles/bundles-icon.png'}
                alt={bundle.name}
            />
            <div className="bundle-text-content">
                <div className="item-name">{bundle.name}</div>
                <div className="bundle-contents">
                    {bundle.contents?.map((content, index) => <span key={index}>{typeof content === 'object' ? content.text : content}</span>)}
                </div>
                <button className="purchase-button bundle-button" onClick={() => onPurchase(bundle.id)} disabled={purchaseDisabled}>
                    <span>
                        {bundle.priceDisplay
                            ? bundle.priceDisplay
                            : `${bundle.price}${bundle.currency === 'USDT' || bundle.currency === 'USDC' ? ` ${bundle.currency}` : '$'}`}
                    </span>
                </button>
            </div>
        </div>
    );
};

const ArtifactShardCard = ({ deal, artifactData, onPurchase, purchased, playerGold, playerDiamonds }) => {
    if (!artifactData) {
        return <div className="shop-item-card sold-out"><p>–û—à–∏–±–∫–∞: –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p></div>;
    }
    const canAfford = deal.currency === 'gold' ? playerGold >= deal.price : playerDiamonds >= deal.price;
    const isAvailable = !purchased;
    const purchaseDisabled = !isAvailable || !canAfford;

    return (
        <div className={`shop-item-card artifact-shard-card ${!isAvailable ? 'sold-out' : ''} rarity-${artifactData.rarity || 'common'}`}>
            {deal.discount > 0 && <div className="discount-banner">{deal.discount}% OFF</div>}
            <div className="item-name">{artifactData.name} (–û—Å–∫–æ–ª–∫–∏) x{deal.quantity}</div>
            <img src={artifactData.icon || '/assets/default-item.png'} alt={`${artifactData.name} (–û—Å–∫–æ–ª–∫–∏)`} />
            <div className="purchase-limit">–û—Å—Ç–∞–ª–æ—Å—å: {isAvailable ? (deal.purchaseLimit || 1) : 0}</div>
            <button
                className="purchase-button shard-button"
                onClick={() => onPurchase(deal.id)}
                disabled={purchaseDisabled}
            >
                <img src={deal.currency === 'gold' ? '/assets/coin-icon.png' : '/assets/diamond-image.png'} alt={deal.currency} />
                {deal.price.toLocaleString()}
            </button>
        </div>
    );
};

// --- –•–µ–ª–ø–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ ---
const formatTime = (ms) => {
    if (ms <= 0) return "00:00:00";
    const totalSeconds = Math.floor(ms / 1000);
    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');
    const minutes = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0');
    const seconds = String(totalSeconds % 60).padStart(2, '0');
    return `${hours}:${minutes}:${seconds}`;
};

const REFRESH_HOUR_UTC = 2; // –ß–∞—Å —Å–±—Ä–æ—Å–∞

// --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ú–∞–≥–∞–∑–∏–Ω–∞ ---
const Shop = () => {
    // --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
    const [refreshTimer, setRefreshTimer] = useState("--:--:--");
    const [openingChestId, setOpeningChestId] = useState(null);
    const [infoPopupChestData, setInfoPopupChestData] = useState(null);
    const [currentGearChestIndex, setCurrentGearChestIndex] = useState(0);
    const [direction, setDirection] = useState(0);
    const [currentArtifactChestIndex, setCurrentArtifactChestIndex] = useState(0);
    const [directionArtifact, setDirectionArtifact] = useState(0);
    const [currentSpecialBundleIndex, setCurrentSpecialBundleIndex] = useState(0);
    const [directionSpecial, setDirectionSpecial] = useState(0);
    const [currentGeneralBundleIndex, setCurrentGeneralBundleIndex] = useState(0);
    const [directionGeneral, setDirectionGeneral] = useState(0);

    const currencyPacks = [
        { id: 'gold_pack_1', name: '–ú–µ—à–æ–∫ –∑–æ–ª–æ—Ç–∞', type: 'gold', amount: 10000, price: 50, currency: 'diamonds', icon: '/assets/currencies/gold_pack_1.png', priceDisplay: '50üíé', rarity: 'common' },
        { id: 'gold_pack_2', name: '–°—É–Ω–¥—É–∫ –∑–æ–ª–æ—Ç–∞', type: 'gold', amount: 55000, price: 250, currency: 'diamonds', icon: '/assets/currencies/gold_pack_2.png', priceDisplay: '250üíé', rarity: 'rare' },
        { id: 'diamond_pack_1', name: '–ì–æ—Ä—Å—Ç—å –∞–ª–º–∞–∑–æ–≤', type: 'diamonds', amount: 100, price: 1.99, currency: 'real_money', icon: '/assets/currencies/diamonds_pack_1.png', priceDisplay: '$1.99', rarity: 'common' },
        { id: 'diamond_pack_2', name: '–ö–æ—à–µ–ª—å –∞–ª–º–∞–∑–æ–≤', type: 'diamonds', amount: 550, price: 9.99, currency: 'real_money', icon: '/assets/currencies/diamonds_pack_2.png', priceDisplay: '$9.99', rarity: 'rare' },
    ];

    const {
        gold, diamonds,
        rareChestKeys,   // <<< –î–û–ë–ê–í–õ–ï–ù–û
        epicChestKeys,   // <<< –î–û–ë–ê–í–õ–ï–ù–û
        dailyDeals, dailyDealsLastGenerated, dailyShopPurchases,
        artifactChestPity = {},
        gearChestPity = {}, // <<< –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è pity
        lastChestRewards, lastOpenedChestInfo,
        purchaseShopItem,
        openArtifactChest, openArtifactChestX10,
        openGearChest, openGearChestX10,       // <<< –≠—Ç–∏ actions —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
        clearLastChestData,
        purchaseCurrencyPack,
        purchaseBundle,
        // playerProgress, // –ü—Ä–∏–º–µ—Ä
        // purchasedSpecialDeals, // –ü—Ä–∏–º–µ—Ä
    } = useGameStore((state) => ({
        gold: state.gold,
        diamonds: state.diamonds,
        rareChestKeys: state.rareChestKeys ?? 0,    // <<< –î–û–ë–ê–í–õ–ï–ù–û
        epicChestKeys: state.epicChestKeys ?? 0,    // <<< –î–û–ë–ê–í–õ–ï–ù–û
        dailyDeals: state.dailyDeals,
        dailyDealsLastGenerated: state.dailyDealsLastGenerated,
        dailyShopPurchases: state.dailyShopPurchases,
        artifactChestPity: state.artifactChestPity,
        gearChestPity: state.gearChestPity,         // <<< –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è pity
        lastChestRewards: state.lastChestRewards,
        lastOpenedChestInfo: state.lastOpenedChestInfo,
        purchaseShopItem: state.purchaseShopItem,
        openArtifactChest: state.openArtifactChest,
        openArtifactChestX10: state.openArtifactChestX10,
        openGearChest: state.openGearChest,
        openGearChestX10: state.openGearChestX10,
        clearLastChestData: state.clearLastChestData,
        purchaseCurrencyPack: state.purchaseCurrencyPack,
        purchaseBundle: state.purchaseBundle,
        // playerProgress: state.playerProgress, // –ü—Ä–∏–º–µ—Ä
        // purchasedSpecialDeals: state.purchasedSpecialDeals, // –ü—Ä–∏–º–µ—Ä
    }), (left, right) => { // –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è shallow
        return left.gold === right.gold &&
            left.diamonds === right.diamonds &&
            left.rareChestKeys === right.rareChestKeys &&   // <<< –î–û–ë–ê–í–õ–ï–ù–û
            left.epicChestKeys === right.epicChestKeys &&   // <<< –î–û–ë–ê–í–õ–ï–ù–û
            left.dailyDealsLastGenerated === right.dailyDealsLastGenerated &&
            JSON.stringify(left.dailyDeals) === JSON.stringify(right.dailyDeals) &&
            JSON.stringify(left.dailyShopPurchases) === JSON.stringify(right.dailyShopPurchases) &&
            JSON.stringify(left.artifactChestPity) === JSON.stringify(right.artifactChestPity) &&
            JSON.stringify(left.gearChestPity) === JSON.stringify(right.gearChestPity) &&
            JSON.stringify(left.lastChestRewards) === JSON.stringify(right.lastChestRewards) &&
            JSON.stringify(left.lastOpenedChestInfo) === JSON.stringify(right.lastOpenedChestInfo);
        // && JSON.stringify(left.playerProgress) === JSON.stringify(right.playerProgress) // –ü—Ä–∏–º–µ—Ä
        // && JSON.stringify(left.purchasedSpecialDeals) === JSON.stringify(right.purchasedSpecialDeals); // –ü—Ä–∏–º–µ—Ä
    });

    const activeSpecialDeals = useMemo(() => {
        if (!SPECIAL_DEALS) return [];
        // const purchasedSpecialDealsFromStore = purchasedSpecialDeals || [];
        // const playerProgressFromStore = playerProgress || {};

        return SPECIAL_DEALS.filter(deal => {
            if (!deal.isActive) return false;
            // if (deal.purchaseLimit === 1 && purchasedSpecialDealsFromStore.includes(deal.id)) return false;

            const condition = deal.availabilityCondition;
            if (condition) {
                if (condition.type === 'firstLogin') {
                    // return playerProgressFromStore?.flags?.firstLoginDone;
                    return true; // –ó–∞–≥–ª—É—à–∫–∞
                }
                if (condition.type === 'chapterComplete') {
                    // return playerProgressFromStore?.chapters?.[condition.chapterId]?.[condition.difficulty]?.completed;
                    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ chapterComplete –¥–ª—è ${deal.id}:`, condition);
                    return true; // –ó–∞–≥–ª—É—à–∫–∞
                }
                if (condition.type === 'levelComplete') {
                    // const chapterProg = playerProgressFromStore?.chapters?.[condition.chapterId]?.[condition.difficulty];
                    // return chapterProg && chapterProg.highestLevelCompleted >= condition.levelNumber;
                    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ levelComplete –¥–ª—è ${deal.id}:`, condition);
                    return true; // –ó–∞–≥–ª—É—à–∫–∞
                }
            }
            return true;
        });
    }, [SPECIAL_DEALS /*, playerProgress, purchasedSpecialDeals */]);

    const numGearChests = GEAR_CHESTS.length;
    const numArtifactChests = ARTIFACT_CHESTS.length;
    const numSpecialBundles = activeSpecialDeals.length;
    const numGeneralBundles = GENERAL_BUNDLES.length;

    const DRAG_BUFFER = 100;
    const VELOCITY_THRESHOLD = 200;

    const handlePurchaseSpecialBundle = useCallback((bundleId) => {
        const dealToPurchase = activeSpecialDeals.find(d => d.id === bundleId);
        if (!dealToPurchase) {
            console.error("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:", bundleId);
            return;
        }
        alert(`–ü–æ–∫—É–ø–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ "${dealToPurchase.name}" –∑–∞ ${dealToPurchase.priceDisplay} (–ª–æ–≥–∏–∫–∞ USDT/USDC –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).`);
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞
    }, [activeSpecialDeals]);

    const slideVariants = {
        enter: (directionParam) => ({
            x: directionParam > 0 ? '100%' : '-100%',
            opacity: 0,
            scale: 0.95
        }),
        center: {
            zIndex: 1,
            x: 0,
            opacity: 1,
            scale: 1,
            transition: { duration: 0.4, ease: [0.4, 0, 0.2, 1] }
        },
        exit: (directionParam) => ({
            zIndex: 0,
            x: directionParam < 0 ? '100%' : '-100%',
            opacity: 0,
            scale: 0.95,
            transition: { duration: 0.3, ease: [0.4, 0, 0.6, 1] }
        })
    };

    const createPaginator = (setCurrentIndex, setDirectionState, numItems) => {
        return useCallback((newDirectionCallback) => {
            if (!!openingChestId || typeof newDirectionCallback !== 'number' || numItems <= 1) return;
            setDirectionState(newDirectionCallback);
            setCurrentIndex(prevIndex => (prevIndex + newDirectionCallback + numItems) % numItems);
        }, [setCurrentIndex, setDirectionState, numItems, openingChestId]);
    };

    const createDragEndHandler = (paginatorFn, dragBufferConst, velocityThresholdConst) => {
        return useCallback((event, info) => {
            if (!!openingChestId) return;
            const { offset, velocity } = info;
            if (Math.abs(offset.x) > dragBufferConst || Math.abs(velocity.x) > velocityThresholdConst) {
                paginatorFn(offset.x < 0 ? 1 : -1);
            }
        }, [paginatorFn, dragBufferConst, velocityThresholdConst, openingChestId]);
    };

    const paginateGear = createPaginator(setCurrentGearChestIndex, setDirection, numGearChests);
    const handleDragEndGear = createDragEndHandler(paginateGear, DRAG_BUFFER, VELOCITY_THRESHOLD);

    const paginateArtifact = createPaginator(setCurrentArtifactChestIndex, setDirectionArtifact, numArtifactChests);
    const handleDragEndArtifact = createDragEndHandler(paginateArtifact, DRAG_BUFFER, VELOCITY_THRESHOLD);

    const paginateSpecialBundle = createPaginator(setCurrentSpecialBundleIndex, setDirectionSpecial, numSpecialBundles);
    const handleDragEndSpecialBundle = createDragEndHandler(paginateSpecialBundle, DRAG_BUFFER, VELOCITY_THRESHOLD);

    const paginateGeneralBundle = createPaginator(setCurrentGeneralBundleIndex, setDirectionGeneral, numGeneralBundles);
    const handleDragEndGeneralBundle = createDragEndHandler(paginateGeneralBundle, DRAG_BUFFER, VELOCITY_THRESHOLD);

    useEffect(() => {
        let intervalId = null;
        const updateTimer = () => {
            const nowTs = Date.now();
            const nowUtcDate = new Date(nowTs);
            const targetTodayUtcTs = Date.UTC(
                nowUtcDate.getUTCFullYear(), nowUtcDate.getUTCMonth(), nowUtcDate.getUTCDate(),
                REFRESH_HOUR_UTC, 0, 0, 0
            );
            let nextRefreshTimeTs;
            if (nowTs < targetTodayUtcTs) {
                nextRefreshTimeTs = targetTodayUtcTs;
            } else {
                const targetTomorrowUtcTs = Date.UTC(
                    nowUtcDate.getUTCFullYear(), nowUtcDate.getUTCMonth(), nowUtcDate.getUTCDate() + 1,
                    REFRESH_HOUR_UTC, 0, 0, 0
                );
                nextRefreshTimeTs = targetTomorrowUtcTs;
            }
            const remainingMs = Math.max(0, nextRefreshTimeTs - nowTs);
            setRefreshTimer(formatTime(remainingMs));
        };
        intervalId = setInterval(updateTimer, 1000);
        updateTimer();
        return () => { if (intervalId) clearInterval(intervalId); };
    }, []);

    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ —Å—Ç–æ—Ä–µ
    const handleOpenGearChest = useCallback((chestId, amount = 1) => {
        if (openingChestId) return;
        // –ü—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ chestData –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ—Ç —Å–∞–º action –≤ —Å—Ç–æ—Ä–µ.
        // UI –¥–æ–ª–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç—Ä–∞–∂–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏, –∞ store —Å–¥–µ–ª–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.
        setOpeningChestId(chestId);
        try {
            if (amount === 10) {
                openGearChestX10(chestId); // action –∏–∑ —Å—Ç–æ—Ä–∞
            } else {
                openGearChest(chestId);    // action –∏–∑ —Å—Ç–æ—Ä–∞
            }
        } catch (error) {
            console.error(`[Shop] Error calling open action for gear chest ${chestId} x${amount}:`, error);
            setOpeningChestId(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –≤—ã–∑–æ–≤ action —Å–∞–º –ø–æ —Å–µ–±–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É
        }
    }, [openingChestId, openGearChest, openGearChestX10]);

    const handleOpenArtifactChest = useCallback((chestId, amount = 1) => {
        if (openingChestId) return;
        const chestData = getArtifactChestById(chestId);
        if (!chestData) { console.error(`[Shop] Artifact chest data not found: ${chestId}`); return; }
        const cost = chestData.cost.price * amount;
        if (diamonds < cost) { alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–ª–º–∞–∑–æ–≤! –ù—É–∂–Ω–æ ${cost.toLocaleString()}`); return; }

        setOpeningChestId(chestId);
        try {
            if (amount === 10) openArtifactChestX10(chestId); else openArtifactChest(chestId);
        } catch (error) {
            console.error(`[Shop] Error calling open action for artifact chest ${chestId} x${amount}:`, error);
            setOpeningChestId(null);
        }
    }, [openingChestId, diamonds, openArtifactChest, openArtifactChestX10]);


    useEffect(() => {
        if (lastChestRewards && openingChestId) {
            setOpeningChestId(null);
        }
    }, [lastChestRewards, openingChestId]);

    const handleShowInfoPopup = useCallback((chestData) => {
        setInfoPopupChestData(chestData);
    }, []);
    const handleCloseInfoPopup = useCallback(() => {
        setInfoPopupChestData(null);
    }, []);
    const handleCloseResultsPopup = useCallback(() => {
        clearLastChestData();
    }, [clearLastChestData]);

    return (
        <>
            <motion.div
                className="shop-screen"
                style={{ position: 'absolute', width: '100%', height: '100%', top: 0, left: 0 }}
            >
                <div className="shop-header-permanent">
                    {/* –†–µ—Å—É—Ä—Å—ã (–∑–æ–ª–æ—Ç–æ, –∞–ª–º–∞–∑—ã) - —Å–ª–µ–≤–∞ */}
                    <div className="player-resources-display resource-group-container">
                        <div className="currency-item">
                            <img src="/assets/coin-icon.png" alt="–ó–æ–ª–æ—Ç–æ" className="currency-icon-shop" />
                            <span>{gold !== undefined && gold !== null ? gold.toLocaleString() : '--'}</span>
                        </div>
                        <div className="currency-item">
                            <img src="/assets/diamond-image.png" alt="–ê–ª–º–∞–∑—ã" className="currency-icon-shop" />
                            <span>{diamonds !== undefined && diamonds !== null ? diamonds.toLocaleString() : '--'}</span>
                        </div>
                    </div>

                    {/* –ö–ª—é—á–∏ - —Å–ø—Ä–∞–≤–∞ */}
                    <div className="player-keys-display resource-group-container">
                        {typeof rareChestKeys === 'number' && (
                            <div className="key-item">
                                <img src="/assets/key-image.png" alt="–†–µ–¥–∫–∏–µ –∫–ª—é—á–∏" className="key-icon-shop" />
                                {/* –ó–ê–ú–ï–ù–ò–¢–ï /assets/icons/rare-key-icon.png –ù–ê –í–ê–® –ü–£–¢–¨ */}
                                <span>{rareChestKeys.toLocaleString()}</span>
                            </div>
                        )}
                        {typeof epicChestKeys === 'number' && (
                            <div className="key-item">
                                <img src="/assets/key-image.png" alt="–≠–ø–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏" className="key-icon-shop" />
                                {/* –ó–ê–ú–ï–ù–ò–¢–ï /assets/icons/epic-key-icon.png –ù–ê –í–ê–® –ü–£–¢–¨ */}
                                <span>{epicChestKeys.toLocaleString()}</span>
                            </div>
                        )}
                    </div>
                </div>

                <div className="shop-scrollable-content">
                    {/* --- 2. –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø (Special Bundles) --- */}
                    {activeSpecialDeals && activeSpecialDeals.length > 0 && (
                        <div className="shop-section special-bundles-section">
                            <h3 className="shop-section-title">Unique Deals</h3>
                            <div className="section-content-box">
                                <div className="bundle-carousel-container special-bundle-carousel">
                                    <AnimatePresence initial={false} custom={directionSpecial} mode="wait">
                                        <motion.div
                                            key={`special-${currentSpecialBundleIndex}`}
                                            className="bundle-slide"
                                            custom={directionSpecial}
                                            variants={slideVariants}
                                            initial="enter" animate="center" exit="exit"
                                            drag="x" dragConstraints={{ left: 0, right: 0 }}
                                            dragElastic={0.6}
                                            onDragEnd={handleDragEndSpecialBundle}
                                            style={{ position: 'absolute', width: '100%' }}
                                        >
                                            {activeSpecialDeals[currentSpecialBundleIndex] && (
                                                <BundleCard
                                                    bundle={activeSpecialDeals[currentSpecialBundleIndex]}
                                                    onPurchase={() => handlePurchaseSpecialBundle(activeSpecialDeals[currentSpecialBundleIndex].id)}
                                                />
                                            )}
                                        </motion.div>
                                    </AnimatePresence>
                                    {numSpecialBundles > 1 && !openingChestId && (
                                        <>
                                            <button className="carousel-nav-button prev" onClick={() => paginateSpecialBundle(-1)} aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∞–±–æ—Ä">‚óÄ</button>
                                            <button className="carousel-nav-button next" onClick={() => paginateSpecialBundle(1)} aria-label="–°–ª–µ–¥—É—é—â–∏–π –Ω–∞–±–æ—Ä">‚ñ∂</button>
                                            <div className="carousel-pagination">
                                                {activeSpecialDeals.map((_, index) => (
                                                    <button
                                                        key={`dot-special-${index}`}
                                                        className={`dot ${index === currentSpecialBundleIndex ? 'active' : ''}`}
                                                        onClick={() => {
                                                            if (index !== currentSpecialBundleIndex) {
                                                                setDirectionSpecial(index > currentSpecialBundleIndex ? 1 : -1);
                                                                setCurrentSpecialBundleIndex(index);
                                                            }
                                                        }}
                                                        aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞–±–æ—Ä—É ${index + 1}`}
                                                    />
                                                ))}
                                            </div>
                                        </>
                                    )}
                                </div>
                            </div>
                        </div>
                    )}
                    {/* --- –ö–û–ù–ï–¶ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô --- */}

                    {/* --- 3. –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø (Daily Deals) --- */}
                    <div className="shop-section">
                        <h3 className="shop-section-title">Daily Deals</h3>
                        <div className="section-content-box">
                            <div className="shop-timer daily-timer">Refresh in: {refreshTimer}</div>
                            <div className="daily-shop-grid">
                                {dailyDeals && dailyDeals.length > 0 ? (
                                    dailyDeals.map(deal => {
                                        const purchased = !!dailyShopPurchases[deal.id];
                                        if (deal.type === 'item') {
                                            const itemData = getItemData(deal.itemId);
                                            if (!itemData) {
                                                console.warn(`–ü—Ä–µ–¥–º–µ—Ç ${deal.itemId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Daily Shop`);
                                                return <div key={deal.id} className="shop-item-card sold-out"><p>–û—à–∏–±–∫–∞: –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p></div>;
                                            }
                                            return <ShopItemCard key={deal.id} deal={deal} itemData={itemData} onPurchase={purchaseShopItem} purchased={purchased} playerGold={gold} playerDiamonds={diamonds} />;
                                        } else if (deal.type === 'artifact_shard') {
                                            const artifactData = getArtifactById(deal.itemId);
                                            if (!artifactData) {
                                                console.warn(`–ê—Ä—Ç–µ—Ñ–∞–∫—Ç ${deal.itemId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Daily Shop`);
                                                return <div key={deal.id} className="shop-item-card sold-out"><p>–û—à–∏–±–∫–∞: –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p></div>;
                                            }
                                            return <ArtifactShardCard key={deal.id} deal={deal} artifactData={artifactData} onPurchase={purchaseShopItem} purchased={purchased} playerGold={gold} playerDiamonds={diamonds} />;
                                        } else {
                                            console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –≤ Daily Shop: ${deal.type}`);
                                            return null;
                                        }
                                    })
                                ) : (<p className="no-offers-message">–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...</p>)}
                            </div>
                        </div>
                    </div>
                    {/* --- –ö–û–ù–ï–¶ –ï–ñ–ï–î–ù–ï–í–ù–´–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô --- */}

                    {/* --- 4. –°–£–ù–î–£–ö–ò –°–ù–ê–†–Ø–ñ–ï–ù–ò–Ø (Gear Chests) --- */}
                    <div className="shop-section">
                        <h3 className="shop-section-title">Gear Chests</h3>
                        <div className="section-content-box">
                            <div className="chest-carousel-container gear-carousel">
                                <AnimatePresence initial={false} custom={direction} mode='wait'>
                                    <motion.div
                                        key={`gear-${currentGearChestIndex}`}
                                        className={`chest-slide gear-chest-slide ${openingChestId === GEAR_CHESTS[currentGearChestIndex]?.id ? 'opening' : ''}`}
                                        custom={direction}
                                        variants={slideVariants}
                                        initial="enter"
                                        animate="center"
                                        exit="exit"
                                        drag="x"
                                        dragConstraints={{ left: 0, right: 0 }}
                                        dragElastic={0.6}
                                        onDragEnd={handleDragEndGear}
                                        style={{ position: 'absolute', width: '100%' }}
                                    >
                                        {(() => {
                                            const chest = GEAR_CHESTS[currentGearChestIndex];
                                            if (!chest) return <div className="error-placeholder" style={{ height: '300px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–Ω–¥—É–∫–∞</div>;

                                            const isOpeningThis = openingChestId === chest.id;

                                            let canOpenX1 = false;
                                            let displayCostX1 = "";
                                            let displayIconX1 = chest.cost.currency === 'gold' ? '/assets/coin-icon.png' : '/assets/diamond-image.png';

                                            let canOpenX10 = false;
                                            let displayCostX10 = "";
                                            let displayIconX10 = chest.cost.currency === 'gold' ? '/assets/coin-icon.png' : '/assets/diamond-image.png';

                                            const keyType = chest.keyToOpenForFree; // –ù–∞–ø—Ä–∏–º–µ—Ä, REWARD_TYPES.RARE_CHEST_KEY
                                            let playerKeysForThisChest = 0;
                                            let keyIconPath = null;

                                            if (keyType === REWARD_TYPES.RARE_CHEST_KEY) {
                                                playerKeysForThisChest = rareChestKeys;
                                                keyIconPath = "/assets/key-image.png"; // –ó–ê–ú–ï–ù–ò–¢–ï –ü–£–¢–¨
                                            } else if (keyType === REWARD_TYPES.EPIC_CHEST_KEY) {
                                                playerKeysForThisChest = epicChestKeys;
                                                keyIconPath = "/assets/key-image.png"; // –ó–ê–ú–ï–ù–ò–¢–ï –ü–£–¢–¨
                                            }

                                            // –õ–æ–≥–∏–∫–∞ –¥–ª—è x1
                                            if (keyType && playerKeysForThisChest >= 1) {
                                                canOpenX1 = true;
                                                displayCostX1 = "1";
                                                displayIconX1 = keyIconPath;
                                            } else if (chest.cost.price === 0) { // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ –≤–∞–ª—é—Ç–µ
                                                canOpenX1 = true;
                                                displayCostX1 = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ";
                                            } else if (chest.cost.currency === 'gold' ? gold >= chest.cost.price : diamonds >= chest.cost.price) {
                                                canOpenX1 = true;
                                                displayCostX1 = chest.cost.price.toLocaleString();
                                            } else {
                                                displayCostX1 = chest.cost.price.toLocaleString();
                                            }

                                            // –õ–æ–≥–∏–∫–∞ –¥–ª—è x10
                                            if (keyType && playerKeysForThisChest >= 10) {
                                                canOpenX10 = true;
                                                displayCostX10 = "10";
                                                displayIconX10 = keyIconPath;
                                            } else if (chest.cost.price === 0) {
                                                canOpenX10 = true;
                                                displayCostX10 = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ";
                                            } else {
                                                const totalCurrencyCostX10 = chest.cost.price * 10;
                                                if (chest.cost.currency === 'gold' ? gold >= totalCurrencyCostX10 : diamonds >= totalCurrencyCostX10) {
                                                    canOpenX10 = true;
                                                }
                                                displayCostX10 = totalCurrencyCostX10.toLocaleString();
                                            }

                                            const openDisabledX1 = !!isOpeningThis || !canOpenX1;
                                            const openDisabledX10 = !!isOpeningThis || !canOpenX10;

                                            return (
                                                <>
                                                    <div className="chest-title-wrapper">
                                                        <h4 className="chest-slide-name">{chest.name}</h4>
                                                        <button className="chest-info-button" onClick={(e) => { e.stopPropagation(); handleShowInfoPopup(chest); }} aria-label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–Ω—Å–∞—Ö"> i </button>
                                                    </div>
                                                    <div className="chest-slide-graphic-area">
                                                        <img src={chest.icon || '/assets/chests/gear_chest_default.png'} alt={chest.name} className="chest-slide-graphic-img" draggable="false" />
                                                    </div>
                                                    {chest.description && <p className="chest-slide-description">{chest.description}</p>}
                                                    <div className="chest-pity-info-container">
                                                        {chest.pity && (
                                                            <div className="chest-pity-info multiple">
                                                                {(Array.isArray(chest.pity) ? chest.pity : [chest.pity])
                                                                    .sort((a, b) => (rarityOrder[b.rarity] || 0) - (rarityOrder[a.rarity] || 0))
                                                                    .map(p => {
                                                                        const pityKey = p.rarity.toLowerCase();
                                                                        const currentPityCount = (gearChestPity[chest.id]?.[pityKey]) || 0;
                                                                        const pityRemaining = Math.max(0, p.limit - currentPityCount);
                                                                        const text = pityRemaining > 0 ? `Guaranteed ${p.rarity} in  ${pityRemaining}` : `Guaranteed ${p.rarity} NEXT!`;
                                                                        return <span key={p.rarity} className={`rarity-${pityKey}`}>{text}</span>;
                                                                    })}
                                                            </div>
                                                        )}
                                                    </div>
                                                    <div className={`chest-button-wrapper two-buttons`}>
                                                        <button
                                                            className="purchase-button open-chest-button gear-style"
                                                            onClick={() => handleOpenGearChest(chest.id, 1)}
                                                            disabled={openDisabledX1}
                                                        >
                                                            <img src={displayIconX1} alt="cost" /> {displayCostX1} <span>x1</span>
                                                        </button>
                                                        <button
                                                            className="purchase-button open-chest-button gear-style"
                                                            onClick={() => handleOpenGearChest(chest.id, 10)}
                                                            disabled={openDisabledX10}
                                                        >
                                                            <img src={displayIconX10} alt="cost" /> {displayCostX10} <span>x10</span>
                                                        </button>
                                                    </div>
                                                </>
                                            );
                                        })()}
                                    </motion.div>
                                </AnimatePresence>
                                {numGearChests > 1 && !openingChestId && (
                                    <>
                                        <button className="carousel-nav-button prev" onClick={() => paginateGear(-1)} aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—É–Ω–¥—É–∫">‚óÄ</button>
                                        <button className="carousel-nav-button next" onClick={() => paginateGear(1)} aria-label="–°–ª–µ–¥—É—é—â–∏–π —Å—É–Ω–¥—É–∫">‚ñ∂</button>
                                        <div className="carousel-pagination">
                                            {GEAR_CHESTS.map((_, index) => (
                                                <button
                                                    key={`dot-gear-${index}`}
                                                    className={`dot ${index === currentGearChestIndex ? 'active' : ''}`}
                                                    onClick={() => {
                                                        if (index !== currentGearChestIndex) {
                                                            setDirection(index > currentGearChestIndex ? 1 : -1);
                                                            setCurrentGearChestIndex(index);
                                                        }
                                                    }}
                                                    aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—É–Ω–¥—É–∫—É ${index + 1}`}
                                                />
                                            ))}
                                        </div>
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                    {/* --- –ö–û–ù–ï–¶ –°–£–ù–î–£–ö–û–í –°–ù–ê–†–Ø–ñ–ï–ù–ò–Ø --- */}

                    {/* --- 5. –°–£–ù–î–£–ö–ò –ê–†–¢–ï–§–ê–ö–¢–û–í (Artifact Chests) --- */}
                    <div className="shop-section">
                        <h3 className="shop-section-title">Artifact Chests</h3>
                        <div className="section-content-box">
                            <div className="chest-carousel-container swiper-mode artifact-carousel">
                                <AnimatePresence initial={false} custom={directionArtifact} mode='wait'>
                                    <motion.div
                                        key={`artifact-${currentArtifactChestIndex}`}
                                        className={`chest-slide artifact-chest-slide ${openingChestId === ARTIFACT_CHESTS[currentArtifactChestIndex]?.id ? 'opening' : ''}`}
                                        custom={directionArtifact}
                                        variants={slideVariants}
                                        initial="enter"
                                        animate="center"
                                        exit="exit"
                                        drag="x"
                                        dragConstraints={{ left: 0, right: 0 }}
                                        dragElastic={0.6}
                                        onDragEnd={handleDragEndArtifact}
                                        style={{ position: 'absolute', width: '100%' }}
                                    >
                                        {(() => {
                                            const chest = ARTIFACT_CHESTS[currentArtifactChestIndex];
                                            if (!chest) {
                                                return <div className="error-placeholder" style={{ height: '300px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–Ω–¥—É–∫–∞</div>;
                                            }
                                            const isOpeningThis = openingChestId === chest.id;
                                            const costX1 = chest.cost.price;
                                            const costX10 = chest.cost.price * 10;
                                            const canAffordX1 = diamonds >= costX1;
                                            const canAffordX10 = diamonds >= costX10;
                                            const openDisabledX1 = !!openingChestId || !canAffordX1;
                                            const openDisabledX10 = !!openingChestId || !canAffordX10;

                                            const currentArtifactPityCount = artifactChestPity[chest.id] || 0;
                                            let displayPityInfo = false;
                                            let pityInfoText = '';

                                            if (chest.pity && typeof chest.pity.triggerLimit === 'number') {
                                                displayPityInfo = true;
                                                const pityLimit = chest.pity.triggerLimit;
                                                const pityRemaining = Math.max(0, pityLimit - currentArtifactPityCount);
                                                const guaranteedItemText = "–∞—Ä—Ç–µ—Ñ–∞–∫—Ç";
                                                pityInfoText = pityRemaining > 0
                                                    ? `Guaranteed ${guaranteedItemText} in ${pityRemaining}`
                                                    : `Guaranteed ${guaranteedItemText} NEXT!`;
                                            }

                                            return (
                                                <>
                                                    <div className="chest-title-wrapper">
                                                        <h4 className="chest-slide-name">{chest.name}</h4>
                                                        <button className="chest-info-button" onClick={(e) => { e.stopPropagation(); handleShowInfoPopup(chest); }} aria-label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–Ω—Å–∞—Ö"> i </button>
                                                    </div>
                                                    <div className="chest-slide-graphic-area">
                                                        <img
                                                            src={chest.icon || '/assets/chests/artifact_chest_default.png'}
                                                            alt={chest.name}
                                                            className="chest-slide-graphic-img"
                                                            draggable="false"
                                                        />
                                                    </div>
                                                    {chest.description && (
                                                        <p className="chest-slide-description">{chest.description}</p>
                                                    )}
                                                    <div className="chest-pity-info-container">
                                                        {displayPityInfo && (
                                                            <div className="chest-pity-info">
                                                                <span className={`rarity-legendary`}> {/* –ü—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞ */}
                                                                    {pityInfoText}
                                                                </span>
                                                            </div>
                                                        )}
                                                    </div>
                                                    <div className={`chest-button-wrapper two-buttons`}>
                                                        <button
                                                            className="purchase-button open-chest-button wish-style"
                                                            onClick={() => !isOpeningThis && handleOpenArtifactChest(chest.id, 1)}
                                                            disabled={openDisabledX1}>
                                                            <img src={'/assets/diamond-image.png'} alt="–∞–ª–º–∞–∑—ã" /> {costX1.toLocaleString()} <span>x1</span>
                                                        </button>
                                                        <button
                                                            className="purchase-button open-chest-button wish-style"
                                                            onClick={() => !isOpeningThis && handleOpenArtifactChest(chest.id, 10)}
                                                            disabled={openDisabledX10}>
                                                            <img src={'/assets/diamond-image.png'} alt="–∞–ª–º–∞–∑—ã" /> {costX10.toLocaleString()} <span>x10</span>
                                                        </button>
                                                    </div>
                                                </>
                                            );
                                        })()}
                                    </motion.div>
                                </AnimatePresence>
                                {numArtifactChests > 1 && !openingChestId && (
                                    <>
                                        <button className="carousel-nav-button prev" onClick={() => paginateArtifact(-1)} aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—É–Ω–¥—É–∫">‚óÄ</button>
                                        <button className="carousel-nav-button next" onClick={() => paginateArtifact(1)} aria-label="–°–ª–µ–¥—É—é—â–∏–π —Å—É–Ω–¥—É–∫">‚ñ∂</button>
                                        <div className="carousel-pagination">
                                            {ARTIFACT_CHESTS.map((_, index) => (
                                                <button
                                                    key={`dot-artifact-${index}`}
                                                    className={`dot ${index === currentArtifactChestIndex ? 'active' : ''}`}
                                                    onClick={() => {
                                                        if (index !== currentArtifactChestIndex) {
                                                            setDirectionArtifact(index > currentArtifactChestIndex ? 1 : -1);
                                                            setCurrentArtifactChestIndex(index);
                                                        }
                                                    }}
                                                    aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—É–Ω–¥—É–∫—É ${index + 1}`}
                                                />
                                            ))}
                                        </div>
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                    {/* --- –ö–û–ù–ï–¶ –°–£–ù–î–£–ö–û–í –ê–†–¢–ï–§–ê–ö–¢–û–í --- */}

                    {/* --- 6. –û–ë–´–ß–ù–´–ï –ù–ê–ë–û–†–´ (General Bundles) --- */}
                    {GENERAL_BUNDLES && GENERAL_BUNDLES.length > 0 && (
                        <div className="shop-section general-bundles-section">
                            <h3 className="shop-section-title">Bundles:</h3>
                            <div className="section-content-box">
                                <div className="bundle-carousel-container general-bundle-carousel">
                                    <AnimatePresence initial={false} custom={directionGeneral} mode='wait'>
                                        <motion.div
                                            key={`general-${currentGeneralBundleIndex}`}
                                            className="bundle-slide"
                                            custom={directionGeneral}
                                            variants={slideVariants}
                                            initial="enter"
                                            animate="center"
                                            exit="exit"
                                            drag="x"
                                            dragConstraints={{ left: 0, right: 0 }}
                                            dragElastic={0.6}
                                            onDragEnd={handleDragEndGeneralBundle}
                                            style={{ position: 'absolute', width: '100%' }}
                                        >
                                            {GENERAL_BUNDLES[currentGeneralBundleIndex] && (
                                                <BundleCard
                                                    bundle={GENERAL_BUNDLES[currentGeneralBundleIndex]}
                                                    onPurchase={() => {
                                                        const currentBundle = GENERAL_BUNDLES[currentGeneralBundleIndex];
                                                        if (currentBundle && purchaseBundle) {
                                                            purchaseBundle(currentBundle.id);
                                                        } else if (currentBundle) {
                                                            alert(`–ü–æ–∫—É–ø–∫–∞ –Ω–∞–±–æ—Ä–∞ ${currentBundle.name} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`);
                                                        }
                                                    }}
                                                />
                                            )}
                                        </motion.div>
                                    </AnimatePresence>
                                    {numGeneralBundles > 1 && !openingChestId && (
                                        <>
                                            <button className="carousel-nav-button prev" onClick={() => paginateGeneralBundle(-1)} aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∞–±–æ—Ä">‚óÄ</button>
                                            <button className="carousel-nav-button next" onClick={() => paginateGeneralBundle(1)} aria-label="–°–ª–µ–¥—É—é—â–∏–π –Ω–∞–±–æ—Ä">‚ñ∂</button>
                                            <div className="carousel-pagination">
                                                {GENERAL_BUNDLES.map((_, index) => (
                                                    <button
                                                        key={`dot-general-${index}`}
                                                        className={`dot ${index === currentGeneralBundleIndex ? 'active' : ''}`}
                                                        onClick={() => {
                                                            if (index !== currentGeneralBundleIndex) {
                                                                setDirectionGeneral(index > currentGeneralBundleIndex ? 1 : -1);
                                                                setCurrentGeneralBundleIndex(index);
                                                            }
                                                        }}
                                                        aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞–±–æ—Ä—É ${index + 1}`}
                                                    />
                                                ))}
                                            </div>
                                        </>
                                    )}
                                </div>
                            </div>
                        </div>
                    )}
                    {/* --- –ö–û–ù–ï–¶ –û–ë–´–ß–ù–´–• –ù–ê–ë–û–†–û–í --- */}

                    {/* --- 7. –ü–û–ö–£–ü–ö–ê –í–ê–õ–Æ–¢–´ (Currency) --- */}
                    {currencyPacks && currencyPacks.length > 0 && (
                        <div className="shop-section">
                            <h3 className="shop-section-title">Currency</h3>
                            <div className="section-content-box">
                                <div className="daily-shop-grid currency-grid">
                                    {currencyPacks.map(pack => (
                                        <CurrencyPackCard
                                            key={pack.id}
                                            pack={pack}
                                            onPurchase={() => purchaseCurrencyPack ? purchaseCurrencyPack(pack.id) : alert('–ü–æ–∫—É–ø–∫–∞ –≤–∞–ª—é—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
                                        />
                                    ))}
                                </div>
                            </div>
                        </div>
                    )}
                    {/* --- –ö–û–ù–ï–¶ –ü–û–ö–£–ü–ö–ò –í–ê–õ–Æ–¢–´ --- */}

                </div> {/* –ö–æ–Ω–µ—Ü .shop-scrollable-content */}
            </motion.div> {/* –ö–æ–Ω–µ—Ü .shop-screen */}

            {/* –ü–æ–ø–∞–ø—ã */}
            {lastChestRewards && (
                <ChestResultsPopup
                    rewards={lastChestRewards}
                    lastOpenInfo={lastOpenedChestInfo}
                    onClose={handleCloseResultsPopup}
                />
            )}
            {infoPopupChestData && (
                <ChestInfoPopup
                    chestData={infoPopupChestData}
                    onClose={handleCloseInfoPopup}
                />
            )}
        </>
    );
};

export default Shop;