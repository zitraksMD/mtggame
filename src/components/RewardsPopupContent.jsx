// src/components/RewardsPopupContent.jsx
import React, { useState, useMemo, useCallback } from 'react';
import './RewardsPopupContent.scss'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
import initialRewardData from '../data/rewardStagesData.js';

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã ---
// (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –∫–æ–¥–∞ 2)
const RewardItem = React.memo(({ reward, isClaimed, isClaimable, isLocked, onClaim }) => {
  if (!reward) return <div className="reward-slot empty"></div>;
  const { type, amount } = reward;
  const handleClick = useCallback(() => {
    if (isClaimable && !isLocked) {
      onClaim(reward);
    }
  }, [isClaimable, isLocked, onClaim, reward]);
  const slotClasses = `reward-slot reward-type-${type} ${isClaimed ? 'claimed' : ''} ${isClaimable ? 'claimable' : ''} ${isLocked ? 'locked' : ''}`;
  return (
    <div className={slotClasses} onClick={handleClick} title={isLocked ? '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ –§–æ–Ω–¥–∞' : (isClaimable ? `–ó–∞–±—Ä–∞—Ç—å ${type} x ${amount}` : '')}>
      <div className="reward-icon">
        <span className="reward-amount">{amount}</span>
      </div>
      {isClaimed && <div className="checkmark">‚úî</div>}
      {isLocked && !isClaimed && <div className="lock-icon">üîí</div>}
      {!isClaimed && isClaimable && !isLocked && <div className="claim-indicator">–ó–∞–±—Ä–∞—Ç—å</div>}
    </div>
  );
});

// --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–ø-–∞–ø–∞ ---
const RewardsPopupContent = () => {
  const [currentStage, setCurrentStage] = useState('1');
  const [stagesProgress, setStagesProgress] = useState(initialRewardData);
  const [isPaidUnlocked, setIsPaidUnlocked] = useState(false);

  // --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
  const highestCompletedStage = useMemo(() => {
    let maxCompleted = 0;
    const sortedStageKeys = Object.keys(stagesProgress)
                              .map(Number)
                              .sort((a, b) => a - b);

    for (const stageNum of sortedStageKeys) {
      const stageLevels = stagesProgress[stageNum.toString()];
      if (!stageLevels || stageLevels.length === 0) {
        break;
      }
      const allLevelsCompleted = stageLevels.every(level => level.completed);
      if (allLevelsCompleted) {
        maxCompleted = stageNum;
      } else {
        break;
      }
    }
    return maxCompleted;
  }, [stagesProgress]);

  const currentStageRewards = useMemo(() => stagesProgress[currentStage] || [], [stagesProgress, currentStage]);

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–û—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
  const handleClaim = useCallback((reward, level, isPaid) => {
    console.log(`Attempting to claim ${isPaid ? 'paid' : 'free'} reward for stage ${currentStage} level ${level}:`, reward);
    setStagesProgress(prev => {
      const updatedStage = prev[currentStage].map(item => {
        if (item.level === level) {
          return {
            ...item,
            [isPaid ? 'paidClaimed' : 'freeClaimed']: true
          };
        }
        return item;
      });
      return {
        ...prev,
        [currentStage]: updatedStage
      };
    });
    alert(`–ù–∞–≥—Ä–∞–¥–∞ ${reward.type} x ${reward.amount} (—Ç–∏–ø–∞) –ø–æ–ª—É—á–µ–Ω–∞!`);
  }, [currentStage]);

  const handleClaimAll = useCallback(() => {
    console.log('Attempting to claim all available rewards...');
    setStagesProgress(prev => {
        const updatedData = { ...prev };
        Object.keys(updatedData).forEach(stageKey => {
          const stageNum = parseInt(stageKey);
          const isStageLocked = stageNum > 1 && stageNum > (highestCompletedStage + 1);
          if (isStageLocked) return;

          updatedData[stageKey] = updatedData[stageKey].map(levelData => {
            let freeClaimed = levelData.freeClaimed;
            let paidClaimed = levelData.paidClaimed;
            if (levelData.completed && !levelData.freeClaimed) {
              freeClaimed = true;
              console.log(`Claiming all: Free reward for stage ${stageKey} level ${levelData.level}`);
            }
            if (levelData.completed && !levelData.paidClaimed && isPaidUnlocked) {
              paidClaimed = true;
              console.log(`Claiming all: Paid reward for stage ${stageKey} level ${levelData.level}`);
            }
            return { ...levelData, freeClaimed, paidClaimed };
          });
        });
        return updatedData;
      });
    alert('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã (—Ç–∏–ø–∞) –ø–æ–ª—É—á–µ–Ω—ã!');
  }, [isPaidUnlocked, highestCompletedStage]);

  const handlePurchase = useCallback(() => {
    console.log('Attempting to purchase Advanced Fund...');
    setIsPaidUnlocked(true);
    alert('–ü–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ (—Ç–∏–ø–∞) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!');
  }, []);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –∑–∞–±–∏—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–±—Ä–∞—Ç—å –≤—Å–µ" (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const canClaimAny = useMemo(() => {
    return Object.entries(stagesProgress).some(([stageKey, levels]) => {
        const stageNum = parseInt(stageKey);
        const isStageAccessible = stageNum === 1 || stageNum <= (highestCompletedStage + 1);
        if (!isStageAccessible) return false;

        return levels.some(level =>
            (level.completed && !level.freeClaimed) ||
            (level.completed && isPaidUnlocked && !level.paidClaimed)
        );
    });
  }, [stagesProgress, isPaidUnlocked, highestCompletedStage]);


  return (
    <div className="rewards-popup-content"> {/* –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç */}
      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≠—Ç–∞–ø–æ–≤ */}
      <div className="stage-tabs">
        {Object.keys(initialRewardData).map(stageNumStr => {
            const stageNum = parseInt(stageNumStr);
            const isLocked = stageNum > 1 && stageNum > (highestCompletedStage + 1);
            return (
                <button
                    key={stageNumStr}
                    className={`stage-tab ${stageNumStr === currentStage ? 'active' : ''} ${isLocked ? 'locked' : ''}`}
                    onClick={() => !isLocked && setCurrentStage(stageNumStr)}
                    disabled={isLocked}
                    title={isLocked ? `–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≠—Ç–∞–ø ${stageNum - 1}`: `–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≠—Ç–∞–ø ${stageNum}`}
                >
                    {isLocked && <span className="stage-lock-icon">üîí</span>}
                    –≠—Ç–∞–ø {stageNumStr}
                </button>
            );
        })}
      </div>

      {/* <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –ù–ê–ß–ê–õ–û: –û–±–µ—Ä—Ç–∫–∞ .rewards-track-wrapper –£–î–ê–õ–ï–ù–ê >>> */}

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–æ—Ä–æ–∂–∫–∞–º–∏ –Ω–∞–≥—Ä–∞–¥ (—Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–æ–ª–ª-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä) */}
      <div className="rewards-track-container">

          {/* <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: .initial-progress-line –ü–ï–†–ï–ú–ï–©–ï–ù–ê –í–ù–£–¢–†–¨ .rewards-track-container >>> */}
          {/* –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∂–µ–ª—Ç–æ–π –ª–∏–Ω–∏–∏ (–¥–æ —É—Ä–æ–≤–Ω—è 1) */}
          {currentStageRewards.length > 0 && (
            <div className="initial-progress-line"></div>
          )}
          {/* <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø >>> */}


          {/* –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä—è–¥–æ–≤ –Ω–∞–≥—Ä–∞–¥ */}
          {currentStageRewards.length === 0 ? (
              <p style={{ textAlign: 'center', padding: '20px' }}>–ù–∞–≥—Ä–∞–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!</p>
          ) : (
              currentStageRewards.map((levelData) => (
                  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å row-completed, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω (–∏–∑ –ö–æ–¥–∞ 1)
                  <div key={levelData.level} className={`reward-row ${levelData.completed ? 'row-completed' : ''}`}>

                      {/* –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ */}
                      <RewardItem
                          reward={levelData.freeReward}
                          isClaimed={levelData.freeClaimed}
                          isClaimable={levelData.completed && !levelData.freeClaimed}
                          isLocked={false}
                          onClaim={(reward) => handleClaim(reward, levelData.level, false)}
                      />

                      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
                      <div className="level-connector">
                        {/* div –¥–ª—è —Å–µ—Ä–æ–π –ª–∏–Ω–∏–∏ */}
                        <div className="grey-line-element"></div>

                        {/* –ù–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è */}
                        <div className={`level-number ${levelData.completed ? 'completed' : ''}`}>
                          {levelData.level}
                        </div>

                        {/* –ñ–µ–ª—Ç—ã–π —Å–µ–≥–º–µ–Ω—Ç */}
                        {levelData.completed && (
                          <div className="progress-line-segment"></div>
                        )}
                      </div>

                      {/* –ü–ª–∞—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ */}
                      <RewardItem
                          reward={levelData.paidReward}
                          isClaimed={levelData.paidClaimed}
                          isClaimable={levelData.completed && !levelData.paidClaimed}
                          isLocked={!isPaidUnlocked} // –ë–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ñ–æ–Ω–¥ –Ω–µ –∫—É–ø–ª–µ–Ω
                          onClaim={(reward) => handleClaim(reward, levelData.level, true)}
                      />
                  </div>
                ))
            )}
      </div> {/* –ö–æ–Ω–µ—Ü .rewards-track-container */}

      {/* <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–û–ù–ï–¶: –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ –¥–ª—è .rewards-track-wrapper –£–î–ê–õ–ï–ù >>> */}


      {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <div className="rewards-footer">
        <button
          className="claim-all-button"
          onClick={handleClaimAll}
          disabled={!canClaimAny}
          title={!canClaimAny ? "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Å–±–æ—Ä–∞" : "–ó–∞–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã"}
        >
          –ó–∞–±—Ä–∞—Ç—å –≤—Å–µ
        </button>

        {!isPaidUnlocked && (
          <button className="purchase-button" onClick={handlePurchase}>
            <span className="purchase-icon">&#127873;</span> {/* –ò–∫–æ–Ω–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ */}
            <div className="purchase-details">
              <span className="purchase-text">–ö—É–ø–∏—Ç—å –§–æ–Ω–¥</span>
              <span className="price">$9.99</span> {/* –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É */}
            </div>
          </button>
        )}
        {isPaidUnlocked && (
          <div className="paid-unlocked-indicator">–§–æ–Ω–¥ –ê–∫—Ç–∏–≤–µ–Ω ‚úî</div>
        )}
      </div> {/* –ö–æ–Ω–µ—Ü .rewards-footer */}

    </div> /* –ö–æ–Ω–µ—Ü .rewards-popup-content */
  );
};

export default RewardsPopupContent;