  // src/components/RewardsPopupContent.jsx
  import React, { useState, useMemo, useCallback } from 'react';
  import './RewardsPopupContent.scss'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
  import initialRewardData from '../data/rewardStagesData.js';

  // --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã ---
  // (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –∫–æ–¥–∞ 2)
  const RewardItem = React.memo(({ reward, isClaimed, isClaimable, isLocked, onClaim }) => {
    if (!reward) return <div className="reward-slot empty"></div>;
    const { type, amount } = reward;
    const handleClick = useCallback(() => {
      if (isClaimable && !isLocked) {
        onClaim(reward);
      }
    }, [isClaimable, isLocked, onClaim, reward]);
    const slotClasses = `reward-slot reward-type-${type} ${isClaimed ? 'claimed' : ''} ${isClaimable ? 'claimable' : ''} ${isLocked ? 'locked' : ''}`;
    return (
      <div className={slotClasses} onClick={handleClick} title={isLocked ? '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ –§–æ–Ω–¥–∞' : (isClaimable ? `–ó–∞–±—Ä–∞—Ç—å ${type} x ${amount}` : '')}>
        <div className="reward-icon">
          <span className="reward-amount">{amount}</span>
        </div>
        {isClaimed && <div className="checkmark">‚úî</div>}
        {isLocked && !isClaimed && <div className="lock-icon">üîí</div>}
        {!isClaimed && isClaimable && !isLocked && <div className="claim-indicator">–ó–∞–±—Ä–∞—Ç—å</div>}
      </div>
    );
  });

  // --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–ø-–∞–ø–∞ ---
  const RewardsPopupContent = () => {
    const [currentStage, setCurrentStage] = useState('1');
    const [stagesProgress, setStagesProgress] = useState(initialRewardData);
    const [isPaidUnlocked, setIsPaidUnlocked] = useState(false);

    // --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ (–û–±—ä–µ–¥–∏–Ω–µ–Ω–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∞ –∏–∑ –ö–æ–¥–∞ 1 –∏ –ö–æ–¥–∞ 2) ---
    const highestCompletedStage = useMemo(() => {
      let maxCompleted = 0; // –≠—Ç–∞–ø 0 —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≠—Ç–∞–ø–∞ 1
      const sortedStageKeys = Object.keys(stagesProgress)
                                .map(Number) // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ —á–∏—Å–ª–∞
                                .sort((a, b) => a - b); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ —ç—Ç–∞–ø–æ–≤

      for (const stageNum of sortedStageKeys) {
        const stageLevels = stagesProgress[stageNum.toString()]; // –î–æ—Å—Ç—É–ø –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∫–ª—é—á—É
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–∞–ø–∞ –∏–ª–∏ –æ–Ω –ø—É—Å—Ç, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º
        if (!stageLevels || stageLevels.length === 0) {
          // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–∞–ø–∞ –±–µ–∑ —É—Ä–æ–≤–Ω–µ–π, –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º
          break;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —É—Ä–æ–≤–Ω–∏ –Ω–∞ –≠–¢–û–ú —ç—Ç–∞–ø–µ –ø—Ä–æ–π–¥–µ–Ω—ã
        const allLevelsCompleted = stageLevels.every(level => level.completed);

        if (allLevelsCompleted) {
          maxCompleted = stageNum; // –ï—Å–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —ç—Ç–∞–ø
        } else {
          // –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —ç—Ç–∞–ø —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
          break;
        }
      }
      return maxCompleted;
    }, [stagesProgress]); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    const currentStageRewards = useMemo(() => stagesProgress[currentStage] || [], [stagesProgress, currentStage]);

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–û—Å—Ç–∞—é—Ç—Å—è –∏–∑ –ö–æ–¥–∞ 2, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    const handleClaim = useCallback((reward, level, isPaid) => {
      console.log(`Attempting to claim ${isPaid ? 'paid' : 'free'} reward for stage ${currentStage} level ${level}:`, reward);
      // !!! –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–∏–º–µ—Ä) !!!
      setStagesProgress(prev => {
        const updatedStage = prev[currentStage].map(item => {
          if (item.level === level) {
            return {
              ...item,
              [isPaid ? 'paidClaimed' : 'freeClaimed']: true
            };
          }
          return item;
        });
        return {
          ...prev,
          [currentStage]: updatedStage
        };
      });
      alert(`–ù–∞–≥—Ä–∞–¥–∞ ${reward.type} x ${reward.amount} (—Ç–∏–ø–∞) –ø–æ–ª—É—á–µ–Ω–∞!`);
    }, [currentStage]);

    const handleClaimAll = useCallback(() => {
      console.log('Attempting to claim all available rewards...');
      // !!! –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–∏–º–µ—Ä) !!!
      setStagesProgress(prev => {
          const updatedData = { ...prev };
          Object.keys(updatedData).forEach(stageKey => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —ç—Ç–∞–ø –¥–ª—è —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥ (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω)
            const stageNum = parseInt(stageKey);
            const isStageLocked = stageNum > 1 && stageNum > (highestCompletedStage + 1);
            if (isStageLocked) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã

            updatedData[stageKey] = updatedData[stageKey].map(levelData => {
              let freeClaimed = levelData.freeClaimed;
              let paidClaimed = levelData.paidClaimed;
              // –ó–∞–±–∏—Ä–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω –∏ –æ–Ω–∞ –Ω–µ –∑–∞–±—Ä–∞–Ω–∞
              if (levelData.completed && !levelData.freeClaimed) {
                freeClaimed = true;
                console.log(`Claiming all: Free reward for stage ${stageKey} level ${levelData.level}`);
              }
              // –ó–∞–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç–Ω—É—é, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω, –æ–Ω–∞ –Ω–µ –∑–∞–±—Ä–∞–Ω–∞ –ò —Ñ–æ–Ω–¥ –∫—É–ø–ª–µ–Ω
              if (levelData.completed && !levelData.paidClaimed && isPaidUnlocked) {
                paidClaimed = true;
                console.log(`Claiming all: Paid reward for stage ${stageKey} level ${levelData.level}`);
              }
              return { ...levelData, freeClaimed, paidClaimed };
            });
          });
          return updatedData;
        });
      alert('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã (—Ç–∏–ø–∞) –ø–æ–ª—É—á–µ–Ω—ã!');
    }, [isPaidUnlocked, highestCompletedStage]); // –î–æ–±–∞–≤–∏–ª–∏ highestCompletedStage –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    const handlePurchase = useCallback(() => {
      console.log('Attempting to purchase Advanced Fund...');
      setIsPaidUnlocked(true);
      alert('–ü–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ (—Ç–∏–ø–∞) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!');
    }, []);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –∑–∞–±–∏—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–±—Ä–∞—Ç—å –≤—Å–µ" (–ò–∑ –ö–æ–¥–∞ 2, –Ω–æ —Å —É—á–µ—Ç–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç—Ç–∞–ø–æ–≤)
    const canClaimAny = useMemo(() => {
      return Object.entries(stagesProgress).some(([stageKey, levels]) => {
          const stageNum = parseInt(stageKey);
          // –≠—Ç–∞–ø –¥–æ—Å—Ç—É–ø–µ–Ω –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø –∏–ª–∏ –æ–Ω –Ω–µ –¥–∞–ª—å—à–µ —á–µ–º (highestCompletedStage + 1)
          const isStageAccessible = stageNum === 1 || stageNum <= (highestCompletedStage + 1);
          if (!isStageAccessible) return false; // –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤

          return levels.some(level =>
              (level.completed && !level.freeClaimed) ||
              (level.completed && isPaidUnlocked && !level.paidClaimed)
          );
      });
    }, [stagesProgress, isPaidUnlocked, highestCompletedStage]); // –î–æ–±–∞–≤–∏–ª–∏ highestCompletedStage –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏


    return (
      <div className="rewards-popup-content">
        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≠—Ç–∞–ø–æ–≤ (–û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –ö–æ–¥–∞ 1 –∏ –∏—Ç–µ—Ä–∞—Ü–∏—é –∏–∑ –ö–æ–¥–∞ 2) */}
        <div className="stage-tabs">
          {/* –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ */}
          {Object.keys(initialRewardData).map(stageNumStr => {
              const stageNum = parseInt(stageNumStr);
              // –õ–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑ –ö–æ–¥–∞ 1:
              // –≠—Ç–∞–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–æ–º–µ—Ä –ë–û–õ–¨–®–ï, —á–µ–º (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ü–û–õ–ù–û–°–¢–¨–Æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —ç—Ç–∞–ø + 1).
              // –≠—Ç–∞–ø 1 –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è.
              const isLocked = stageNum > 1 && stageNum > (highestCompletedStage + 1);

              return (
                  <button
                      key={stageNumStr}
                      // –ö–ª–∞—Å—Å—ã: –∞–∫—Ç–∏–≤–Ω—ã–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                      className={`stage-tab ${stageNumStr === currentStage ? 'active' : ''} ${isLocked ? 'locked' : ''}`}
                      // –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                      onClick={() => !isLocked && setCurrentStage(stageNumStr)}
                      // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
                      disabled={isLocked}
                      // –ü–æ–¥—Å–∫–∞–∑–∫–∞
                      title={isLocked ? `–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≠—Ç–∞–ø ${stageNum - 1}`: `–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≠—Ç–∞–ø ${stageNum}`}
                  >
                      {/* –ò–∫–æ–Ω–∫–∞ –∑–∞–º–∫–∞ */}
                      {isLocked && <span className="stage-lock-icon">üîí</span>}
                      –≠—Ç–∞–ø {stageNumStr}
                  </button>
              );
          })}
        </div>

        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–æ—Ä–æ–∂–∫–∞–º–∏ –Ω–∞–≥—Ä–∞–¥ */}
        {/* –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ (–∏–∑ –ö–æ–¥–∞ 1) */}
        <div className="rewards-track-wrapper">
          {/* –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∂–µ–ª—Ç–æ–π –ª–∏–Ω–∏–∏ (–¥–æ —É—Ä–æ–≤–Ω—è 1) (–∏–∑ –ö–æ–¥–∞ 1) */}
          {currentStageRewards.length > 0 && (
            <div className="initial-progress-line"></div>
        )}
        {/* ================================================= */}


        <div className="rewards-track-container">
          {currentStageRewards.length === 0 ? (
              <p style={{ textAlign: 'center', padding: '20px' }}>–ù–∞–≥—Ä–∞–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!</p>
          ) : (
              currentStageRewards.map((levelData) => (
                  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å row-completed, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω (–∏–∑ –ö–æ–¥–∞ 1)
                  <div key={levelData.level} className={`reward-row ${levelData.completed ? 'row-completed' : ''}`}>

                      {/* –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ (–ª–æ–≥–∏–∫–∞ –∏–∑ –ö–æ–¥–∞ 2) */}
                      <RewardItem
                          reward={levelData.freeReward}
                          isClaimed={levelData.freeClaimed}
                          isClaimable={levelData.completed && !levelData.freeClaimed}
                          isLocked={false}
                          onClaim={(reward) => handleClaim(reward, levelData.level, false)}
                      />

                      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
                      <div className="level-connector">
    {/* <<< –î–û–ë–ê–í–õ–ï–ù–û: div –¥–ª—è —Å–µ—Ä–æ–π –ª–∏–Ω–∏–∏ >>> */}
    <div className="grey-line-element"></div>

    {/* –ù–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è */}
    <div className={`level-number ${levelData.completed ? 'completed' : ''}`}>
        {levelData.level}
    </div>

    {/* –ñ–µ–ª—Ç—ã–π —Å–µ–≥–º–µ–Ω—Ç (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å) */}
    {levelData.completed && (
        <div className="progress-line-segment"></div>
    )}
</div>

                      {/* –ü–ª–∞—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ (–ª–æ–≥–∏–∫–∞ –∏–∑ –ö–æ–¥–∞ 2) */}
                      <RewardItem
                          reward={levelData.paidReward}
                          isClaimed={levelData.paidClaimed}
                          isClaimable={levelData.completed && !levelData.paidClaimed}
                          isLocked={!isPaidUnlocked} // –ë–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ñ–æ–Ω–¥ –Ω–µ –∫—É–ø–ª–µ–Ω
                          onClaim={(reward) => handleClaim(reward, levelData.level, true)}
                      />
                  </div>
                ))
            )}
          </div>
        </div> {/* –ö–æ–Ω–µ—Ü rewards-track-wrapper */}

        {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (–û—Å—Ç–∞–µ—Ç—Å—è –∏–∑ –ö–æ–¥–∞ 2) */}
        <div className="rewards-footer">
          <button
              className="claim-all-button"
              onClick={handleClaimAll}
              disabled={!canClaimAny} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π canClaimAny
              title={!canClaimAny ? "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Å–±–æ—Ä–∞" : "–ó–∞–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã"}
          >
              –ó–∞–±—Ä–∞—Ç—å –≤—Å–µ
          </button>

          {!isPaidUnlocked && (
              <button className="purchase-button" onClick={handlePurchase}>
                  –ö—É–ø–∏—Ç—å –§–æ–Ω–¥
                  <span className="price">$?.??</span> {/* –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É */}
              </button>
          )}
          {isPaidUnlocked && (
              <div className="paid-unlocked-indicator">–§–æ–Ω–¥ –ê–∫—Ç–∏–≤–µ–Ω ‚úî</div>
          )}
        </div>
      </div>
    );
  };

  export default RewardsPopupContent;