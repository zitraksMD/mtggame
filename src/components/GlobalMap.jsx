// src/components/GlobalMap.jsx
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { motion, useMotionValue, animate } from 'framer-motion'; // animate –∏–∑ framer-motion, useTransform —É–¥–∞–ª–µ–Ω, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ
import './GlobalMap.scss';
import { ALL_ZONES_CONFIG as allZones } from '../data/worldMapData'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–æ–Ω –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –≤ –∫–æ–¥1

// –†–∞–∑–º–µ—Ä—ã –≤—Å–µ–π "–ø–æ–¥–ª–æ–∂–∫–∏" –∫–∞—Ä—Ç—ã (–∏–∑ –∫–æ–¥1)
const GLOBAL_MAP_CONTENT_WIDTH = 1200;
const GLOBAL_MAP_CONTENT_HEIGHT = 800;

const GlobalMap = ({
    initialFocusZoneId,   // ID –∑–æ–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞
    onSelectZone,         // (zoneId, startChapterId) => void
    onGoBack,             // () => void, –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    // allZonesData –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –≤ props, —Ç–∞–∫ –∫–∞–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
}) => {
    // const isChapterCompleted = useGameStore(state => state.isChapterCompleted); // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ª–æ–≥–∏–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

    const viewportRef = useRef(null); // –ò—Å–ø–æ–ª—å–∑—É–µ–º viewportRef –∫–∞–∫ –≤ –∫–æ–¥1
    const [isAnimatingToFocus, setIsAnimatingToFocus] = useState(false);

    const mapX = useMotionValue(0);
    const mapY = useMotionValue(0);
    const mapScale = useMotionValue(0.8); // –ù–∞—á–∞–ª—å–Ω—ã–π –∑—É–º

    useEffect(() => {
        if (!viewportRef.current) return;

        setIsAnimatingToFocus(true);
        const viewportWidth = viewportRef.current.offsetWidth;
        const viewportHeight = viewportRef.current.offsetHeight;

        let targetX = (viewportWidth - GLOBAL_MAP_CONTENT_WIDTH * 0.8) / 2; // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let targetY = (viewportHeight - GLOBAL_MAP_CONTENT_HEIGHT * 0.8) / 2;
        let targetZoom = 0.8;

        if (initialFocusZoneId && allZones) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º allZones (–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            const targetZone = allZones.find(z => z.id === initialFocusZoneId);
            if (targetZone?.globalCoordinates) {
                targetZoom = 1.2; // –ó—É–º –Ω–∞ –∑–æ–Ω—É
                const zoneIconWidth = targetZone.iconWidth || 100;
                const zoneIconHeight = targetZone.iconHeight || 80;
                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–æ–Ω—É –≤ viewport'–µ
                targetX = viewportWidth / 2 - (targetZone.globalCoordinates.x + zoneIconWidth / 2) * targetZoom;
                targetY = viewportHeight / 2 - (targetZone.globalCoordinates.y + zoneIconHeight / 2) * targetZoom;
            } else if (targetZone) { // –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –∫–æ–¥2, –µ—Å–ª–∏ –∑–æ–Ω–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                console.warn(`GlobalMap: Zone with id "${initialFocusZoneId}" has no globalCoordinates.`);
            } else {
                console.warn(`GlobalMap: Zone with id "${initialFocusZoneId}" not found.`);
            }
        }
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ª–æ–≥–∏–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑ –∫–æ–¥1
        const animOptions = { type: 'spring', stiffness: 120, damping: 20 };
        const animX = animate(mapX, targetX, animOptions);
        const animY = animate(mapY, targetY, animOptions);
        const animScale = animate(mapScale, targetZoom, { 
            ...animOptions, 
            onComplete: () => {
                setIsAnimatingToFocus(false);
                console.log("GlobalMap: Animation to zone complete."); // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            }
        });

        return () => { 
            animX.stop(); 
            animY.stop(); 
            animScale.stop(); 
            // clearTimeout(timer) –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ onComplete –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        };
    }, [initialFocusZoneId, /* allZones - —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è */ mapX, mapY, mapScale]); // allZones –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏

    const handleZoneClick = useCallback((zone) => {
        // –õ–æ–≥–∏–∫–∞ –∏–∑ –∫–æ–¥1
        if (isAnimatingToFocus || typeof onSelectZone !== 'function') return;

        // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∏ isImplemented –∏ unlockCondition –¥–ª—è –∑–æ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ zone –æ–±—ä–µ–∫—Ç–µ
        // –≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–æ–Ω—ã, –∫–∞–∫ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–∑ –æ–±–æ–∏—Ö –∫–æ–¥–æ–≤
        // if (!zone.isImplemented) { alert("–≠—Ç–∞ –∑–æ–Ω–∞ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."); return; }
        // let isUnlocked = !zone.unlockCondition; // –ü—Ä–∏–º–µ—Ä
        // if (zone.unlockCondition?.type === 'zone_completed') {
        //     // isUnlocked = useGameStore.getState().isZoneCompleted(zone.unlockCondition.requiredZoneId);
        // }
        // if (!isUnlocked) { alert("–≠—Ç–∞ –∑–æ–Ω–∞ –ø–æ–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞."); return; }

        onSelectZone(zone.id, zone.startChapterId);
    }, [onSelectZone, isAnimatingToFocus]);

    const handleBackClick = useCallback(() => {
        // –õ–æ–≥–∏–∫–∞ –∏–∑ –∫–æ–¥1
        if (isAnimatingToFocus || typeof onGoBack !== 'function') return;
        onGoBack();
    }, [onGoBack, isAnimatingToFocus]);
    
    // dragConstraintsRef –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ, viewportRef –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é

    return (
        <motion.div className="global-map-screen"> {/* –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç —ç–∫—Ä–∞–Ω–∞ */}
            <div className="global-map-header">
                <h1>–ö–∞—Ä—Ç–∞ –ú–∏—Ä–∞</h1>
                {onGoBack && (
                    <button onClick={handleBackClick} className="map-back-button">
                        &#x21A9; –ù–∞–∑–∞–¥
                    </button>
                )}
            </div>

            {/* Viewport: –æ–±–ª–∞—Å—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–∏–¥–Ω–∞ –∫–∞—Ä—Ç–∞. –ò–º–µ–µ—Ç overflow: hidden */}
            <div className="global-map-viewport" ref={viewportRef}>
                <motion.div
                    className="global-map-pannable-content" // –ò–º—è –∫–ª–∞—Å—Å–∞ –∏–∑ –∫–æ–¥1
                    style={{
                        width: `${GLOBAL_MAP_CONTENT_WIDTH}px`, // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –∫–æ–¥1
                        height: `${GLOBAL_MAP_CONTENT_HEIGHT}px`,
                        x: mapX,
                        y: mapY,
                        scale: mapScale,
                        // backgroundImage: `url('/assets/maps/earth_texture.jpg')`, // –ü—Ä–∏–º–µ—Ä —Ñ–æ–Ω–∞
                        // backgroundSize: '100% 100%', 
                    }}
                    drag
                    dragConstraints={viewportRef} // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ viewportRef (–∏–∑ –∫–æ–¥1)
                    // onDragStart={() => console.log("Drag Start")}
                    // onDragEnd={() => console.log("Drag End")}
                >
                    {(allZones || []).map((zone) => {
                        // –õ–æ–≥–∏–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∑–æ–Ω—ã –∏–∑ –∫–æ–¥1 (—Å –Ω–µ–±–æ–ª—å—à–∏–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –¥–ª—è isUnlocked)
                        // TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é isZoneLocked(zone) –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É
                        const isZoneLocked = (z) => {
                            // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã:
                            // if (z.unlockCondition?.type === 'zone_completed') {
                            // return !useGameStore.getState().isZoneCompleted(z.unlockCondition.requiredZoneId);
                            // }
                            // return !!z.unlockCondition; // –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏–µ, —Ç–æ –∑–∞–ª–æ—á–µ–Ω–æ –ø–æ–∫–∞
                            return false; // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –∫–∞–∫ –≤ –∫–æ–¥1
                        };
                        const zoneClasses = `zone-node ${!zone.isImplemented ? 'not-implemented' : (isZoneLocked(zone) ? 'locked' : 'unlocked')}`;
                        
                        return (
                            <motion.div
                                key={zone.id}
                                className={zoneClasses}
                                style={{
                                    position: 'absolute',
                                    top: `${zone.globalCoordinates?.y || 0}px`,
                                    left: `${zone.globalCoordinates?.x || 0}px`,
                                    width: `${zone.iconWidth || 100}px`, // –†–∞–∑–º–µ—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ –∫–æ–¥1)
                                    height: `${zone.iconHeight || 80}px`,
                                }}
                                onClick={() => handleZoneClick(zone)}
                                title={zone.name}
                                whileHover={{ scale: 1.1, zIndex: 10 }} // zIndex –∏–∑ –∫–æ–¥1
                                whileTap={{ scale: 0.95 }}
                            >
                                <img src={zone.globalImage || '/assets/icons/default_zone_icon.png'} alt={zone.name} className="zone-image" />
                                <span className="zone-label">{zone.name}</span>
                                {/* –ò–∫–æ–Ω–∫–∏ –∑–∞–º–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å */}
                                {/* {!zone.isImplemented && <div className="zone-status-label">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</div>} */}
                                {/* {isZoneLocked(zone) && zone.isImplemented && <div className="zone-lock-icon">üîí</div>} */}
                            </motion.div>
                        );
                    })}
                </motion.div>
            </div>
        </motion.div>
    );
};

export default GlobalMap;