// src/components/GlobalMap.jsx
import React, { useState, useEffect, useCallback, useRef } from 'react'; // –î–æ–±–∞–≤–ª–µ–Ω—ã useState, useEffect, useCallback, useRef
import { motion } from 'framer-motion'; // –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
import './GlobalMap.scss';
import useGameStore from '../store/useGameStore';
import TransitionOverlay from "./TransitionOverlay"; // <<< –ò–ú–ü–û–†–¢ –∏–∑ –∫–æ–¥1
import chapter1Data from '../data/chapters/chapter1/chapter1Data.js';
import chapter2Data from '../data/chapters/chapter2/chapter2Data.js';
// import chapter3Data from '../data/chapters/chapter3/chapter3Data.js';

// –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–¥2
const allChaptersLevelData = {
  1: chapter1Data?.levels || [],
  2: chapter2Data?.levels || [],
  // 3: chapter3Data?.levels || [],
};

const continentsData = [
  {
    id: 'necroworld_continent',
    name: '–ù–µ–∫—Ä–æ–º–∏—Ä',
    image: '/assets/continents/necroworld_map_icon.png',
    x: 200, y: 300,
    chapters: [1],
    startChapterId: 1,
    isImplemented: true,
  },
  {
    id: 'inferno_continent',
    name: '–ò–Ω—Ñ–µ—Ä–Ω–æ',
    image: '/assets/continents/inferno_map_icon.png',
    x: 600, y: 400,
    chapters: [2],
    startChapterId: 2,
    isImplemented: false,
  },
  // ... –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã ...
];

// –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è GlobalMap (–∏–∑ –∫–æ–¥1)
const globalMapContentVariants = {
  hidden: { opacity: 0 },
  visible: { opacity: 1, transition: { duration: 0.3, delay: 0.1 } },
  exit: { opacity: 0, transition: { duration: 0.15 } }
};

const GlobalMap = ({
  onSelectContinent,    // –æ—Ç MainMenu (–±—É–¥–µ—Ç handleContinentSelectFromGlobalMap)
  onGoBackToChapterMap, // –æ—Ç MainMenu (–±—É–¥–µ—Ç handleGoBackToWorldMapFromGlobal)
}) => {
  const isChapterCompleted = useGameStore(state => state.isChapterCompleted);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è TransitionOverlay (–∏–∑ –∫–æ–¥1)
  const [isOverlayActive, setIsOverlayActive] = useState(true);
  const [triggerOpenOverlay, setTriggerOpenOverlay] = useState(false);
  const [triggerCloseOverlay, setTriggerCloseOverlay] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–±—ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–∏–∑ –∫–æ–¥1)
  const pendingNavigationCallbackRef = useRef(null);

  // –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ GlobalMap –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è —à—Ç–æ—Ä–æ–∫ (–∏–∑ –∫–æ–¥1)
  useEffect(() => {
    console.log("GlobalMap: Mounted. Triggering OPEN overlay animation.");
    setIsOverlayActive(true);
    setTriggerCloseOverlay(false);
    setTriggerOpenOverlay(true);
  }, []);

  const handleOverlayOpenComplete = useCallback(() => {
    console.log("GlobalMap: Overlay OPEN complete. Hiding overlay component.");
    setTriggerOpenOverlay(false);
    setIsOverlayActive(false);
  }, []);

  const handleOverlayCloseComplete = useCallback(() => {
    console.log("GlobalMap: Overlay CLOSE complete.");
    if (pendingNavigationCallbackRef.current) {
      console.log("GlobalMap: Executing pending navigation.");
      pendingNavigationCallbackRef.current();
      pendingNavigationCallbackRef.current = null;
    }
    setTriggerCloseOverlay(false);
    // setIsOverlayActive(false); // –û–≤–µ—Ä–ª–µ–π —Å–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑-–∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  }, []);

  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è —à—Ç–æ—Ä–æ–∫ (–∏–∑ –∫–æ–¥1)
  const navigateWithTransition = useCallback((navigationAction) => {
    pendingNavigationCallbackRef.current = navigationAction;
    setIsOverlayActive(true);
    setTriggerOpenOverlay(false);
    setTriggerCloseOverlay(true);
  }, []);

  const handleContinentClick = useCallback((continent) => {
    // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ –∫–æ–¥2
    if (!continent.isImplemented) {
      alert(`–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞ "${continent.name}" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`);
      return;
    }
    if (!continent.isUnlockedCalculated) {
      alert(`–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç "${continent.name}" –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–ª–∞–≤—ã.`);
      return;
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∏–∑ –∫–æ–¥1
    if (typeof onSelectContinent === 'function') {
      console.log("GlobalMap: Continent clicked, preparing transition...");
      navigateWithTransition(() => onSelectContinent(continent.startChapterId));
    }
  }, [onSelectContinent, navigateWithTransition]); // –î–æ–±–∞–≤–ª–µ–Ω navigateWithTransition –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  const handleBackToWorldMapClick = useCallback(() => {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∏–∑ –∫–æ–¥1
    if (typeof onGoBackToChapterMap === 'function') {
      console.log("GlobalMap: Back button clicked, preparing transition...");
      navigateWithTransition(onGoBackToChapterMap);
    }
  }, [onGoBackToChapterMap, navigateWithTransition]); // –î–æ–±–∞–≤–ª–µ–Ω navigateWithTransition –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  return (
    <motion.div // –û–±–µ—Ä—Ç–∫–∞ –∏–∑ –∫–æ–¥1
      className="global-map-screen"
      key="globalmap-screen-content"
      variants={globalMapContentVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
    >
      {isOverlayActive && ( // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ TransitionOverlay –∏–∑ –∫–æ–¥1
        <TransitionOverlay
          playOpen={triggerOpenOverlay}
          onOpenComplete={handleOverlayOpenComplete}
          playClose={triggerCloseOverlay}
          onCloseComplete={handleOverlayCloseComplete}
        />
      )}

      <div className="global-map-header">
        <h1>–ö–∞—Ä—Ç–∞ –ú–∏—Ä–∞</h1>
        {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º handleBackToWorldMapClick –∏–∑ –∫–æ–¥1 –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ */}
        <button onClick={handleBackToWorldMapClick} className="map-back-button">
          &#x21A9; –ù–∞–∑–∞–¥ –∫ –ö–∞—Ä—Ç–µ –ì–ª–∞–≤
        </button>
      </div>

      <div className="global-map-background">
        {continentsData.map((continent, continentIndex) => {
          // –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–¥2
          let isCurrentContinentUnlocked = false;
          if (continentIndex === 0) {
            isCurrentContinentUnlocked = true;
          } else {
            const prevContinent = continentsData[continentIndex - 1];
            let prevContinentAllChaptersCompleted = true;

            if (prevContinent && prevContinent.isImplemented && prevContinent.chapters && Array.isArray(prevContinent.chapters)) {
              for (const chapterId of prevContinent.chapters) {
                const levelsOfThisChapter = allChaptersLevelData[chapterId];
                if (typeof isChapterCompleted !== 'function' || !levelsOfThisChapter || !isChapterCompleted(chapterId, levelsOfThisChapter)) {
                  prevContinentAllChaptersCompleted = false;
                  break;
                }
              }
            } else {
              prevContinentAllChaptersCompleted = false;
              if (prevContinent && !prevContinent.isImplemented) {
                console.warn(`–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç (id: ${prevContinent.id}) –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω. –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç "${continent.name}" –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
              } else if (prevContinent) {
                console.warn(`–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç (id: ${prevContinent.id}) –Ω–µ –∏–º–µ–µ—Ç —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤. –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç "${continent.name}" –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
              }
            }
            isCurrentContinentUnlocked = prevContinentAllChaptersCompleted;
          }

          const continentClasses = `continent-node ${isCurrentContinentUnlocked ? 'unlocked' : 'locked'} ${!continent.isImplemented ? 'not-implemented' : ''}`;

          return (
            <div
              key={continent.id}
              className={continentClasses}
              style={{
                position: 'absolute',
                top: `${continent.y}px`,
                left: `${continent.x}px`,
              }}
              // –ü–µ—Ä–µ–¥–∞–µ–º isUnlockedCalculated –≤ handleContinentClick
              onClick={() => handleContinentClick({ ...continent, isUnlockedCalculated: isCurrentContinentUnlocked })}
              title={continent.name}
            >
              <img src={continent.image} alt={continent.name} className="continent-image" />
              <span className="continent-label">{continent.name}</span>
              {!isCurrentContinentUnlocked && continent.isImplemented && <div className="continent-lock-icon">üîí</div>}
              {!continent.isImplemented && <div className="continent-status-label">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</div>}
            </div>
          );
        })}
      </div>
    </motion.div>
  );
};

export default GlobalMap;