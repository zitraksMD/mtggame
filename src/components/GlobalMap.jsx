// src/components/GlobalMap.jsx
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { motion, useMotionValue, animate } from 'framer-motion';
import './GlobalMap.scss';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ALL_ZONES_CONFIG –∫–∞–∫ allZones –ò findZoneIdForChapter
import { ALL_ZONES_CONFIG as allZones, findZoneIdForChapter } from '../data/worldMapData';
import useGameStore from '../store/useGameStore';

// –†–∞–∑–º–µ—Ä—ã –≤—Å–µ–π "–ø–æ–¥–ª–æ–∂–∫–∏" –∫–∞—Ä—Ç—ã
const GLOBAL_MAP_CONTENT_WIDTH = 1200;
const GLOBAL_MAP_CONTENT_HEIGHT = 800;

// –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∫–æ–Ω–æ–∫ –∑–æ–Ω –Ω–∞ GlobalMap (–∏–∑ –∫–æ–¥1, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –∫–æ–¥2)
const ZONE_ICON_WIDTH = 400; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏–∫–æ–Ω–∫–∏ –∑–æ–Ω—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ zone.iconWidth)
const ZONE_ICON_HEIGHT = 280; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∏–∫–æ–Ω–∫–∏ –∑–æ–Ω—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ zone.iconHeight)

const GlobalMap = ({
    initialFocusZoneId,   // ID –∑–æ–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞
    onSelectZone,         // (zoneId, startChapterId) => void
    onGoBack,             // () => void, –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
}) => {
    const isZoneUnlocked = useGameStore(state => state.isZoneUnlocked);
    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ã –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å—Ç–æ—Ä–∞ (–∏–∑ –∫–æ–¥1)
    const currentPlayerChapterId = useGameStore(state => state.currentChapterId);

    const viewportRef = useRef(null);
    const [isAnimatingToFocus, setIsAnimatingToFocus] = useState(false);
    const mapX = useMotionValue(0);
    const mapY = useMotionValue(0);
    const mapScale = useMotionValue(0.8); // –ù–∞—á–∞–ª—å–Ω—ã–π –∑—É–º

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–æ–Ω—ã –∏–≥—Ä–æ–∫–∞ (–∏–∑ –∫–æ–¥1)
    const currentPlayerZoneId = findZoneIdForChapter(currentPlayerChapterId);

    useEffect(() => {
        if (!viewportRef.current) return;

        setIsAnimatingToFocus(true);
        const viewportWidth = viewportRef.current.offsetWidth;
        const viewportHeight = viewportRef.current.offsetHeight;

        let targetX = (viewportWidth - GLOBAL_MAP_CONTENT_WIDTH * 0.8) / 2; // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let targetY = (viewportHeight - GLOBAL_MAP_CONTENT_HEIGHT * 0.8) / 2;
        let targetZoom = 0.8;

        if (initialFocusZoneId && allZones) {
            const targetZone = allZones.find(z => z.id === initialFocusZoneId);
            if (targetZone?.globalCoordinates) {
                targetZoom = 1.2; // –ó—É–º –Ω–∞ –∑–æ–Ω—É
                const zoneIconWidth = targetZone.iconWidth || ZONE_ICON_WIDTH; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É, –µ—Å–ª–∏ –Ω–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ –∑–æ–Ω—ã
                const zoneIconHeight = targetZone.iconHeight || ZONE_ICON_HEIGHT; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–æ–Ω—É –≤ viewport'–µ
                targetX = viewportWidth / 2 - (targetZone.globalCoordinates.x + zoneIconWidth / 2) * targetZoom;
                targetY = viewportHeight / 2 - (targetZone.globalCoordinates.y + zoneIconHeight / 2) * targetZoom;
            } else if (targetZone) {
                console.warn(`GlobalMap: Zone with id "${initialFocusZoneId}" has no globalCoordinates.`);
            } else {
                console.warn(`GlobalMap: Zone with id "${initialFocusZoneId}" not found.`);
            }
        }
        
        const animOptions = { type: 'spring', stiffness: 120, damping: 20 };
        const animX = animate(mapX, targetX, animOptions);
        const animY = animate(mapY, targetY, animOptions);
        const animScale = animate(mapScale, targetZoom, { 
            ...animOptions, 
            onComplete: () => {
                setIsAnimatingToFocus(false);
                console.log("GlobalMap: Animation to zone complete.");
            }
        });

        return () => { 
            animX.stop(); 
            animY.stop(); 
            animScale.stop(); 
        };
    }, [initialFocusZoneId, mapX, mapY, mapScale]);

    const handleZoneClick = useCallback((zone) => {
        if (isAnimatingToFocus || typeof onSelectZone !== 'function') return;
    
        if (!zone.isImplemented) {
            alert(`–ó–æ–Ω–∞ "${zone.name || zone.id}" –µ—â–µ –Ω–µ –≤ –∏–≥—Ä–µ!`);
            return;
        }
    
        if (!isZoneUnlocked(zone.id)) {
            let unlockMessage = `–ó–æ–Ω–∞ "${zone.name || zone.id}" –ø–æ–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.`;
            if (zone.unlockCondition?.type === 'zone_completed' && zone.unlockCondition?.requiredZoneId) {
                const prevZoneConf = allZones.find(z => z.id === zone.unlockCondition.requiredZoneId); 
                unlockMessage += `\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∑–æ–Ω—É "${prevZoneConf?.name || zone.unlockCondition.requiredZoneId}".`;
            }
            alert(unlockMessage);
            return;
        }
    
        onSelectZone(zone.id, zone.startChapterId);
    }, [onSelectZone, isAnimatingToFocus, isZoneUnlocked]); // allZones —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –æ–Ω —Å—Ç–∞—Ç–∏—á–µ–Ω

    const handleBackClick = useCallback(() => {
        if (isAnimatingToFocus || typeof onGoBack !== 'function') return;
        onGoBack();
    }, [onGoBack, isAnimatingToFocus]);
    
    return (
        <motion.div className="global-map-screen">
            <div className="global-map-title-plate">
                <h1>–ö–∞—Ä—Ç–∞ –ú–∏—Ä–∞</h1>
            </div>

            {typeof onGoBack === 'function' && (
                <button
                    onClick={handleBackClick}
                    className="global-map-back-button"
                    title="–ù–∞–∑–∞–¥"
                >
                    &larr;
                </button>
            )}

            <div className="global-map-viewport" ref={viewportRef}>
                <motion.div
                    className="global-map-pannable-content"
                    style={{
                        width: `${GLOBAL_MAP_CONTENT_WIDTH}px`,
                        height: `${GLOBAL_MAP_CONTENT_HEIGHT}px`,
                        x: mapX,
                        y: mapY,
                        scale: mapScale,
                        // backgroundImage: `url('/assets/maps/earth_texture.jpg')`,
                        // backgroundSize: '100% 100%', 
                    }}
                    drag
                    dragConstraints={viewportRef}
                >
                    {(allZones || []).map((zone) => {
                        const locked = !isZoneUnlocked(zone.id);
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∑–æ–Ω–∞ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–æ–Ω–æ–π –∏–≥—Ä–æ–∫–∞ (–∏–∑ –∫–æ–¥1)
                        const isCurrentPlayerZone = zone.id === currentPlayerZoneId;

                        let zoneClasses = `zone-node ${!zone.isImplemented ? 'not-implemented' : (locked ? 'locked' : 'unlocked')}`;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –∑–æ–Ω–∞ –∏–≥—Ä–æ–∫–∞ –∏ –æ–Ω–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞/–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (–∏–∑ –∫–æ–¥1)
                        if (isCurrentPlayerZone && !locked && zone.isImplemented) {
                            zoneClasses += ' current-player-zone';
                        }
                        
                        const currentZoneIconWidth = zone.iconWidth || ZONE_ICON_WIDTH;
                        const currentZoneIconHeight = zone.iconHeight || ZONE_ICON_HEIGHT;

                        return (
                            <motion.div
                                key={zone.id}
                                className={zoneClasses} // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å—ã (–∏–∑ –∫–æ–¥1)
                                style={{
                                    position: 'absolute',
                                    top: `${zone.globalCoordinates?.y || 0}px`,
                                    left: `${zone.globalCoordinates?.x || 0}px`,
                                    width: `${currentZoneIconWidth}px`,
                                    height: `${currentZoneIconHeight}px`,
                                }}
                                onClick={() => handleZoneClick(zone)}
                                title={zone.name}
                                // –£—Å–ª–æ–≤–Ω—ã–µ whileHover –∏ whileTap (–∏–∑ –∫–æ–¥1)
                                whileHover={!locked && zone.isImplemented ? { scale: 1.05, zIndex: 10 } : {}}
                                whileTap={!locked && zone.isImplemented ? { scale: 0.95 } : {}}
                            >
                                <img 
                                    src={zone.globalImage || '/assets/icons/default_zone_icon.png'} 
                                    alt={zone.name} 
                                    className="zone-image"
                                />
                                <span className="zone-label">{zone.name}</span>
                                {locked && zone.isImplemented && <div className="global-map-zone-lock-icon">üîí</div>}
                            </motion.div>
                        );
                    })}
                </motion.div>
            </div>
        </motion.div>
    );
};

export default GlobalMap;