/* В WorldMap.scss - ОБНОВЛЕННАЯ ВЕРСИЯ с изменениями из код1 */

// Главный контейнер карты, взято за основу .world-map из код2,
// но добавлены свойства из .world-map-screen (код1)
.world-map {
  width: 100%;
  height: 100%;
  // --- ЗАДАЕМ ГРАДИЕНТНЫЙ ФОН ИЗ КОД1 ---
  background: linear-gradient(160deg, #1a2a4a 0%, #0f1a30 100%);
  // background-color: #1a202c; // <<< Эта строка заменена градиентом
  // --- КОНЕЦ ФОНА ---
  overflow: hidden;          // Важно для контейнера перетаскивания (из обоих)
  position: relative;       // Для позиционирования дочерних элементов (из обоих)
  user-select: none;        // Запретить выделение текста при перетаскивании (из код1)
}

// Заголовок карты, стили преимущественно из код1 для точности позиционирования
.worldmap-title {
  position: absolute;
  top: calc(env(safe-area-inset-top, 0px) + 15px); // С учетом безопасной зоны (из код1)
  left: 50%;
  transform: translateX(-50%);
  color: white;
  z-index: 10;
  font-size: 1.5em; // (из код1, было 40px и другое позиционирование в код2)
  text-shadow: 1px 1px 3px rgba(0,0,0,0.5); // (из код1)
  // width: 100%; text-align: center; из код2 не нужны при таком позиционировании
}

// Кнопка "Назад", позиционирование из код1 (с safe-area), стили из код2
.map-back-button {
  position: absolute;
  top: calc(env(safe-area-inset-top, 0px) + 15px); // (из код1)
  // left: env(safe-area-inset-left, 15px); // Позиционирование слева из код1
  // Если нужно справа, как в код2, но с safe-area:
  right: env(safe-area-inset-right, 15px); // Используем right из код2, но с safe-area
  left: auto; // Сбрасываем left, если используется right
  z-index: 1000; // (из код2, в код1 было z-index: 10)

  // Внешний вид и размер (из код2)
  background-color: rgba(0, 0, 0, 0.6);
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.7);
  border-radius: 8px;
  padding: 8px 12px;
  font-size: 22px;
  line-height: 1;
  cursor: pointer;
  transition: background-color 0.2s ease, border-color 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;

  &:hover {
    background-color: rgba(0, 0, 0, 0.8);
    border-color: white;
  }

  &:active {
    background-color: rgba(0, 0, 0, 0.9);
  }
}

// Контейнер, который реагирует на события мыши/тача для перетаскивания (из код1)
// Заменяет часть функционала .map-background из код2
.map-drag-container {
  width: 100%;
  height: 100%;
  overflow: hidden; // Скрывает части карты, которые выходят за его пределы
  cursor: grab;     // Курсор по умолчанию
  background: transparent; // Убедимся, что он прозрачный (ИЗМЕНЕНИЕ ИЗ КОД1)
  position: relative;   // <--- ДОБАВЬТЕ ЭТУ СТРОКУ!


  &.dragging { // Когда карта перетаскивается
    cursor: grabbing;
  }
}

// Этот div будет трансформироваться (scale, translate) (из код1)
// Заменяет .map-background из код2 по своей роли
.map-background-content {
  // width и height задаются в style из JS (MAP_BACKGROUND_WIDTH/HEIGHT) - как в код1
  // backgroundImage УДАЛЯЕМ ИЗ JS ИЛИ ДЕЛАЕМ TRANSPARENT (требование из код1)
  position: relative; // Чтобы острова позиционировались абсолютно внутри него (из код1)
                      // В код2 .map-background был absolute, но это для другого контекста
                      background: transparent !important;
  transform-origin: top left; // Важно для масштабирования от угла (из код1, было и в код2 .map-background)
  // Если .map-drag-container занимает всю область .world-map,
  // то .map-background-content может быть не absolute, а его перемещение/масштабирование
  // будет достигаться через transform. Если он должен быть больше drag-container,
  // тогда position: absolute и top/left могут понадобиться, но transform-origin все равно key.
  // Для простоты сейчас оставим relative, предполагая, что JS управляет transform.
  // Если размеры из JS будут очень большими, то он будет выходить за пределы drag-container
  // и overflow:hidden на drag-container его обрежет.
  // Изначальные top: 0, left: 0 из код2 .map-background здесь не нужны, если JS ставит transform.
}

// Стили для островов-глав (объединение код1 и код2)
.map-island {
  position: absolute; // Позиционируются внутри .map-background-content (из код1)
  // width и height задаются в style из JS (ISLAND_RENDERED_WIDTH/HEIGHT) (из код1)
  // Примерные значения из код2 для .island-image (200x150) теперь будут задаваться для .map-island через JS.
  display: flex;              // (из код1)
  flex-direction: column;     // (из код1)
  align-items: center;        // (из код1)
  justify-content: center;    // (из код1)
  cursor: pointer;
  // transition из код2 для box-shadow сохранен, но transform убран, т.к. код1 его не использует для hover
  // и подсветка идет через filter.
  transition: box-shadow 0.2s ease-out; // filter transition будет на .island-image

  // Общий hover-эффект на остров из код2 (свечение)
  // Убрано transform: scale(1.05) т.к. в код1 его специально убрали.
  // Оставим box-shadow, если он не конфликтует с подсветкой статусов.
  // Однако, код1 использует filter для подсветки, что лучше для PNG с прозрачностью.
  // Поэтому общий hover на .map-island может быть излишним, если статусы имеют свои hover-эффекты.
  // Пока уберем его, чтобы не конфликтовать с более специфичными hover-эффектами из код1.
  // &:hover {
  //   // transform: scale(1.05); // УБРАНО в код1
  //   // box-shadow: 0 0 15px rgba(255, 255, 255, 0.7); // Может конфликтовать/быть ненужным
  // }

  .island-image {
    width: 100%; // Растягиваем картинку на всю ширину/высоту .map-island (из код1)
    height: 100%; // (из код1)
    object-fit: contain; // ИСПОЛЬЗУЕМ contain, чтобы картинка вписалась и не обрезалась (из код1, было cover в код2)
    border-radius: 10px; // Скругление для самой картинки (из обоих)
    // Для подсветки по контуру PNG с прозрачностью (из код1):
    filter: drop-shadow(0px 0px 0px rgba(255, 255, 0, 0)); // Начальное состояние - нет тени (из код1)
    transition: filter 0.2s ease-out; // Плавный переход для фильтра (из код1)
  }

  .island-label {
    position: absolute;
    bottom: -20px; // Смещаем название ПОД остров (из код1, в код2 было bottom: 10px)
    left: 50%;
    transform: translateX(-50%);
    color: white;
    background-color: rgba(0, 0, 0, 0.7); // (из код1, похоже на код2)
    padding: 3px 8px;         // (из код1, было 5px 10px в код2)
    border-radius: 4px;       // (из код1, было 5px в код2)
    font-size: 0.85em;        // (из код1, было 0.9em или 14px в код2)
    white-space: nowrap;
    pointer-events: none;     // Чтобы не мешал клику на остров (из код1)
  }

  // --- Стили для статусов (преимущественно из код1, т.к. используют filter drop-shadow) ---
  &.unlocked:hover .island-image,
  &.current .island-image, // .current всегда подсвечен
  &.completed:hover .island-image { // .completed подсвечивается только при наведении
    // Подсветка по контуру для PNG с прозрачностью (желтая) (из код1)
    filter: drop-shadow(0px 0px 10px rgba(255, 223, 0, 0.9)) drop-shadow(0px 0px 4px rgba(255, 223, 0, 0.7));
  }

  // &.current из код2 имел border и box-shadow. Заменяем на усиленный filter из код1.
  &.current .island-image {
    // Дополнительно для текущей главы можно усилить эффект (из код1)
    filter: drop-shadow(0px 0px 12px gold) drop-shadow(0px 0px 5px gold) saturate(1.2);
    // Убираем border и box-shadow из код2, так как filter выглядит лучше для контуров PNG
    // border: 3px solid gold; // (из код2 - заменено)
    // box-shadow: 0 0 20px gold; // (из код2 - заменено)
  }

  &.locked {
    .island-image {
      filter: grayscale(90%) brightness(0.6); // Затемненная и обесцвеченная (из код1, значения чуть другие чем в код2)
    }
    .island-label {
      color: #888; // (из код1, было #aaa в код2)
    }
    cursor: not-allowed;
    // &:hover из код2 для .locked убирал transform и box-shadow.
    // Так как мы убрали общий hover transform, это правило не так критично,
    // но важно, чтобы подсветка от filter не применялась.
    // Это достигается тем, что .locked:hover .island-image не определен для подсветки.
  }

  &.completed { // Пройдена, но не текущая
    .island-image {
      // Можно добавить легкую зеленую обводку или эффект (из код1)
      // filter: drop-shadow(0px 0px 6px lightgreen); // Пример из код1
      // В код2 был закомментирован border: 2px solid lightgreen;
      // Пока оставим без специального стиля, кроме hover-эффекта выше.
    }
  }

  .island-lock-icon {
    position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);
    font-size: 2.5em; // (из код1, было 3em в код2)
    color: rgba(255, 255, 255, 0.6); // (из код1, было 0.7 в код2)
    text-shadow: 0 0 4px black; // (из код1, было 5px в код2)
    pointer-events: none;
  }
}

// Попап подтверждения (стили полностью из код2, т.к. в код1 они не детализированы)
.map-popup-backdrop {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.6);
  z-index: 9998;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: fadeIn 0.3s ease;
}

.map-popup {
  background: #222;
  color: #fff;
  padding: 20px;
  border-radius: 12px;
  z-index: 9999;
  max-width: 90%;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.5);
  animation: popupZoomIn 0.25s ease;
}

.popup-box {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.popup-buttons {
  margin-top: 10px;
  display: flex;
  gap: 10px;

  button {
    background: #444;
    border: none;
    padding: 8px 16px;
    color: white;
    border-radius: 6px;
    cursor: pointer;

    &:hover {
      background: #666;
    }
  }
}

.global-map-controls {
  position: absolute;
  bottom: 0; // Прижимаем к низу родителя (.world-map-screen)
  left: 50%;
  transform: translateX(-50%); // Центрируем по горизонтали
  padding-bottom: calc(env(safe-area-inset-bottom, 0px) + 20px); // Отступ от нижнего края + safe area
  z-index: 10; // Поверх карты, но под попапами
  display: flex;
  justify-content: center;
}

// Стили для кнопки "Общая Карта Мира" / "Покинуть Континент"
.map-action-button.leave-continent-button {
  padding: 10px 20px;
  font-size: 1em;
  font-weight: bold;
  color: white;
  background-color: rgba(0, 0, 0, 0.6); // Полупрозрачный темный
  border: 1px solid rgba(255, 255, 255, 0.5);
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.2s ease, border-color 0.2s ease;

  &:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: white;
  }
}

/* animations (из код2) */
@keyframes fadeIn {
  from { opacity: 0 }
  to { opacity: 1 }
}

@keyframes popupZoomIn {
  from {
    transform: scale(0.8);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}