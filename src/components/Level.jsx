// src/components/Level.jsx
import * as THREE from "three";
import React, { useEffect, useRef, useState, useCallback, useMemo } from "react";
import nipplejs from "nipplejs";
import './Styles.scss'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –∏–∑ code1
import useGameStore from '../store/useGameStore';
import usePlayerLoader from './usePlayerLoader';
import useEnemyLoader from './useEnemyLoader'; // –ò–º–ø–æ—Ä—Ç –∏–∑ code1
import GameOverPopup from './GameOverPopup';
import LoadingScreen from "./LoadingScreen"; // –ò–º–ø–æ—Ä—Ç –∏–∑ code1
import { clamp, checkCollision, convertTiledX, convertTiledY, DEFAULT_WORLD_WIDTH, DEFAULT_WORLD_HEIGHT } from './utils';
import { BASE_ENEMY_STATS } from '../data/enemyBaseStats';


// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const HEALTH_BAR_WIDTH = 30;
const HEALTH_BAR_HEIGHT = 4;
const HEALTH_BAR_OFFSET_Y = 25; // Y-—Å–º–µ—â–µ–Ω–∏–µ —Ö–µ–ª—Å–±–∞—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –≤—Ä–∞–≥–∞
const BEAM_WIDTH = 15;
const BEAM_TEXTURE_FIRE = '/assets/fire-beam.png'; // <<<--- –£–ö–ê–ñ–ò –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨
const BEAM_TEXTURE_ICE = '/assets/ice-beam.png';   // <<<--- –£–ö–ê–ñ–ò –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨
const ENEMY_COLLISION_SIZE = { width: 30, height: 30 }; // –†–∞–∑–º–µ—Ä —Ö–∏—Ç–±–æ–∫—Å–∞ –≤—Ä–∞–≥–∞ (–∏–∑ code1)

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç HealthBar ---
const HealthBar = ({ currentHp, maxHp }) => {
    const healthPercent = maxHp > 0 ? Math.max(0, (currentHp / maxHp) * 100) : 0;
    return (
        <div className="health-bar-container">
            <div className="health-bar" style={{ width: `${healthPercent}%` }}></div>
        </div>
    );
};
// ---------------------------------------------

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –º–∏—Ä–∞ ---
const getWorldDimensions = (levelData) => {
    const gameWorldWidth = levelData?.width || DEFAULT_WORLD_WIDTH;
    const gameWorldHeight = levelData?.height || DEFAULT_WORLD_HEIGHT;
    const WORLD_Y_OFFSET = gameWorldHeight / 2;
    return { gameWorldWidth, gameWorldHeight, WORLD_Y_OFFSET };
};
// ---------------------------------------------

// === –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –£—Ä–æ–≤–Ω—è ===
const Level = ({ levelData, onLevelComplete, onReady, difficulty = 'normal' }) => {

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ levelData –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ ---
    if (!levelData || typeof levelData.id === 'undefined') {
        console.error("[Level.jsx] –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ levelData!", levelData);
        return <div className="level-screen error">–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è!</div>;
    }

    // === –†–µ—Ñ—ã ===
    const mountRef = useRef(null);
    const cameraRef = useRef(null);
    const sceneRef = useRef(null);
    const rendererRef = useRef(null);
    const joystickRef = useRef(null);
    const animationFrameId = useRef(null);
    const wallsRef = useRef([]);
    const projectilesRef = useRef([]); // –°–Ω–∞—Ä—è–¥—ã –∏–≥—Ä–æ–∫–∞
    const enemyProjectilesRef = useRef([]); // –°–Ω–∞—Ä—è–¥—ã –≤—Ä–∞–≥–æ–≤
    const effectTimersRef = useRef([]);
    const velocity = useRef({ x: 0, y: 0, force: 0 });
    const playerAttackCooldown = useRef(0);
    const levelStartTimeRef = useRef(null);
    const readyCalledRef = useRef(false);
    const beamTexturesRef = useRef({});
    const backgroundMeshRef = useRef(null); // –†–µ—Ñ –¥–ª—è —Ñ–æ–Ω–∞
    const fogOverlaysRef = useRef({}); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—à–µ–π —Ç—É–º–∞–Ω–∞ –ø–æ ID –∫–æ–º–Ω–∞—Ç—ã
    const fogMaterialRef = useRef(null); // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Ç—É–º–∞–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑
    const worldRoomBoundariesRef = useRef({});
    const [clearedRoomIds, setClearedRoomIds] = useState(new Set());


    

    // === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
    const [isLoading, setIsLoading] = useState(true);
    const [levelStatus, setLevelStatus] = useState('playing');
    const [enemiesState, setEnemiesState] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ HP –≤—Ä–∞–≥–æ–≤
    const [remainingTime, setRemainingTime] = useState(null);
    const [beamTexturesLoaded, setBeamTexturesLoaded] = useState(false);
    const [activeClouds, setActiveClouds] = useState([]); // <<< –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –¥–ª—è –æ–±–ª–∞–∫–æ–≤
    const activeCloudsRef = useRef([]); // –†–µ—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ animate
    const enemiesStateRef = useRef(enemiesState); // –†–µ—Ñ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ä–∞–≥–æ–≤
    const [currentActiveRoomId, setCurrentActiveRoomId] = useState(null);


    useEffect(() => {
        enemiesStateRef.current = enemiesState;
        console.log("[enemiesStateRef updated] Length:", enemiesState.length, enemiesState); // –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    }, [enemiesState]); // –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ö–ê–ñ–î–´–ô –†–ê–ó –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ enemiesState

    
    
    // === –ì–ª–æ–±–∞–ª—å–Ω—ã–π –°—Ç–æ—Ä ===
    const {
        playerHp,
        displayMaxHp, // computedStats().hp
        playerStats,  // computedStats()
        playerTakeDamage,
        initializeLevelHp,
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑ code1 (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å applyDebuff)
        // applyDebuff // <- –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å action
    } = useGameStore(state => ({
        playerHp: state.playerHp,
        displayMaxHp: state.computedStats().hp,
        playerStats: state.computedStats(),
        playerTakeDamage: state.playerTakeDamage,
        initializeLevelHp: state.initializeLevelHp,
        // applyDebuff: state.applyDebuff // <- –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å action
    }));

    
    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HP –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è ---
    useEffect(() => {
        console.log(`[Level ${levelData.id}] Mount/Data Change: –í—ã–∑–æ–≤ initializeLevelHp()`);
        if (typeof initializeLevelHp === 'function') {
             initializeLevelHp();
        } else {
            console.error("–û–®–ò–ë–ö–ê: initializeLevelHp –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è!");
        }
        setLevelStatus('playing');
        readyCalledRef.current = false;
    }, [initializeLevelHp, levelData.id]);

    // --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –£—Ä–æ–≤–Ω—è ---
    const levelConfig = useMemo(() => {
        console.log("[Level.jsx] Calculating levelConfig");
        return getWorldDimensions(levelData);
    }, [levelData?.width, levelData?.height]);

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –ª—É—á–µ–π ---
    useEffect(() => {
        const textureLoader = new THREE.TextureLoader();
        let fireLoaded = false;
        let iceLoaded = false;
        let mounted = true;

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –ª—É—á–µ–π...");

        const checkTexLoadComplete = () => {
            if (fireLoaded && iceLoaded && mounted) {
                console.log("‚úÖ –¢–µ–∫—Å—Ç—É—Ä—ã –ª—É—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
                setBeamTexturesLoaded(true);
            }
        };

        textureLoader.load(
            BEAM_TEXTURE_FIRE,
            (texture) => {
                if (!mounted) return;
                console.log("üî• –¢–µ–∫—Å—Ç—É—Ä–∞ –û–≥–Ω—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                texture.encoding = THREE.sRGBEncoding;
                beamTexturesRef.current.fire = texture;
                fireLoaded = true;
                checkTexLoadComplete();
            },
            undefined,
            (error) => {
                if (!mounted) return;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${BEAM_TEXTURE_FIRE}:`, error);
                fireLoaded = true; // –°—á–∏—Ç–∞–µ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º" –¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π
                checkTexLoadComplete();
            }
        );

        textureLoader.load(
            BEAM_TEXTURE_ICE,
            (texture) => {
                if (!mounted) return;
                console.log("‚ùÑÔ∏è –¢–µ–∫—Å—Ç—É—Ä–∞ –õ—å–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                texture.encoding = THREE.sRGBEncoding;
                beamTexturesRef.current.ice = texture;
                iceLoaded = true;
                checkTexLoadComplete();
            },
            undefined,
            (error) => {
                if (!mounted) return;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${BEAM_TEXTURE_ICE}:`, error);
                iceLoaded = true; // –°—á–∏—Ç–∞–µ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º" –¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π
                checkTexLoadComplete();
            }
        );

        return () => {
            mounted = false;
            beamTexturesRef.current.fire?.dispose();
            beamTexturesRef.current.ice?.dispose();
            beamTexturesRef.current = {};
            setBeamTexturesLoaded(false);
        }
    }, []);

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –°—Ü–µ–Ω—ã, –†–µ–Ω–¥–µ—Ä–µ—Ä–∞, –ö–∞–º–µ—Ä—ã ---
    useEffect(() => {
        console.log("[Level.jsx] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã Three.js");
        const scene = new THREE.Scene();
        sceneRef.current = scene;

        const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 2000);
        camera.position.set(0, 0, 1000);
        cameraRef.current = camera;

        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.outputEncoding = THREE.sRGBEncoding;
        rendererRef.current = renderer;

        const mountPoint = mountRef.current;
        if (!mountPoint) { console.error("Mount point not found!"); setLevelStatus('error'); return; }

        mountPoint.innerHTML = "";
        mountPoint.appendChild(renderer.domElement);

        const handleResize = () => {
            if (!mountRef.current || !rendererRef.current || !cameraRef.current) return;
            const width = mountPoint.clientWidth;
            const height = mountPoint.clientHeight;
            rendererRef.current.setSize(width, height);
            cameraRef.current.left = width / -2;
            cameraRef.current.right = width / 2;
            cameraRef.current.top = height / 2;
            cameraRef.current.bottom = height / -2;
            cameraRef.current.updateProjectionMatrix();
        };

        handleResize();
        window.addEventListener('resize', handleResize);

        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
        directionalLight.position.set(50, 150, 100);
        directionalLight.target.position.set(0, 0, 0);
        scene.add(directionalLight);
        scene.add(directionalLight.target);

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ Three.js (–æ—Å–Ω–æ–≤–Ω–∞—è)
        return () => {
            console.log("[Level.jsx] –û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω—ã Three.js");
            window.removeEventListener('resize', handleResize);

            // –û—Ç–º–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current);
                animationFrameId.current = null;
            }
            // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞
            if (joystickRef.current) {
                try { joystickRef.current.destroy(); } catch (e) { console.warn("Joystick destroy error:", e); }
                joystickRef.current = null;
            }

            // –£–¥–∞–ª—è–µ–º —Å–Ω–∞—Ä—è–¥—ã
            if (sceneRef.current) {
                 enemyProjectilesRef.current.forEach(proj => {
                     if (proj.mesh) {
                         sceneRef.current?.remove(proj.mesh);
                         proj.mesh.geometry?.dispose();
                         proj.mesh.material?.dispose();
                     }
                 });
                 projectilesRef.current.forEach(proj => {
                     if (proj.mesh) {
                         sceneRef.current?.remove(proj.mesh);
                         proj.mesh.geometry?.dispose();
                         proj.mesh.material?.dispose();
                     }
                 });
                 // –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∞
                 sceneRef.current.remove(ambientLight);
                 sceneRef.current.remove(directionalLight);
                 sceneRef.current.remove(directionalLight.target);
                 // –ú–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–∞ –∏ –≤—Ä–∞–≥–æ–≤ —É–¥–∞–ª—è—é—Ç—Å—è —Å–≤–æ–∏–º–∏ —Ö—É–∫–∞–º–∏ –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
            }
             enemyProjectilesRef.current = [];
             projectilesRef.current = [];


            // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
            rendererRef.current?.dispose();
            if (mountPoint && rendererRef.current?.domElement && mountPoint.contains(rendererRef.current.domElement)) {
                mountPoint.removeChild(rendererRef.current.domElement);
            }
            if (fogMaterialRef.current) {
                console.log("[Level.jsx] Disposing shared fog material");
                fogMaterialRef.current.dispose();
                fogMaterialRef.current = null;
            }

            // –°–±—Ä–æ—Å —Ä–µ—Ñ–æ–≤
            sceneRef.current = null;
            rendererRef.current = null;
            cameraRef.current = null;
        };
    }, []);

 // --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –§–æ–Ω–∞, –°—Ç–µ–Ω, –¢–£–ú–ê–ù–ê –í–û–ô–ù–´ –∏ –†–ê–°–ß–ï–¢ –ì–†–ê–ù–ò–¶ –ö–û–ú–ù–ê–¢ ---
useEffect(() => {
    const currentScene = sceneRef.current;
    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–±–∞–≤–∏–ª–∏ levelData –∏ fogMaterialRef
    if (!currentScene || !levelConfig || !levelData || !fogMaterialRef.current) {
        console.log("[Level.jsx] Skip Background/Walls/Fog/Boundaries: Missing critical refs or data.");
        return;
    }
    console.log("[Level.jsx] –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞, —Å—Ç–µ–Ω, —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã –∏ –≥—Ä–∞–Ω–∏—Ü –∫–æ–º–Ω–∞—Ç");

    // --- –†–ê–°–ß–ï–¢ –ì–†–ê–ù–ò–¶ –ö–û–ú–ù–ê–¢ –í –ú–ò–†–û–í–´–• –ö–û–û–†–î–ò–ù–ê–¢–ê–• (–∏–∑ –∫–æ–¥1) ---
    // –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ levelConfig –∏ levelData.rooms —Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã
    if (levelData.rooms && levelConfig) {
        const boundaries = {};
        levelData.rooms.forEach(room => {
            if (room.area) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º min/max Tiled –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ min/max –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                // –î–ª—è X: Tiled X -> World X (convertTiledX(tiledX, 0, worldWidth))
                // –î–ª—è Y: Tiled Y -> World Y (WORLD_Y_OFFSET - tiledY) (—É–ø—Ä–æ—â–µ–Ω–Ω–æ, –±–µ–∑ objectHeight)
                // convertTiledY(tiledY, 0, gameWorldHeight, WORLD_Y_OFFSET)

                // –í–∞–∂–Ω–æ: convertTiledX –¥–∞–µ—Ç –¶–ï–ù–¢–† –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ objectWidth > 0.
                // –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º 0, —Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–æ—á–∫–∏.
                // x_min_world –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü–µ, x_max_world - –ø—Ä–∞–≤–æ–π.
                // y_min_world –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–ï–†–•–ù–ï–ô –≥—Ä–∞–Ω–∏—Ü–µ –≤ Three.js (–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Y –≤ Tiled),
                // y_max_world –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ù–ò–ñ–ù–ï–ô –≥—Ä–∞–Ω–∏—Ü–µ –≤ Three.js (–º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Y –≤ Tiled).
                // –≠—Ç–æ –∏–∑-–∑–∞ –∏–Ω–≤–µ—Ä—Å–∏–∏ Y –≤ convertTiledY.

                // x_min_world < x_max_world
                // y_min_world (–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞) > y_max_world (–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞) –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö Three.js, –µ—Å–ª–∏ Y —Ä–∞—Å—Ç–µ—Ç –≤–≤–µ—Ä—Ö.
                // –î–∞–≤–∞–π –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏–º convertTiledY: WORLD_Y_OFFSET - y - objectHeight / 2.
                // –ï—Å–ª–∏ y_tiled_min = 50 (–≤–µ—Ä—Ö–Ω—è—è –≤ Tiled), y_tiled_max = 590 (–Ω–∏–∂–Ω—è—è –≤ Tiled) –¥–ª—è room2_north
                // world_y_for_tiled_y_50 = W_H/2 - 50
                // world_y_for_tiled_y_590 = W_H/2 - 590
                // –¢–æ –µ—Å—Ç—å, –≤ –º–∏—Ä–µ Three.js: y_max_world = W_H/2 - 50, y_min_world = W_H/2 - 590. (y_min_world < y_max_world)

                boundaries[room.id] = {
                    xMinWorld: convertTiledX(room.area.x_min, 0, levelConfig.gameWorldWidth),
                    xMaxWorld: convertTiledX(room.area.x_max, 0, levelConfig.gameWorldWidth),
                    // –î–ª—è Y –Ω—É–∂–Ω–æ –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º —Å –∏–Ω–≤–µ—Ä—Å–∏–µ–π.
                    // convertTiledY –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É Tiled –≤ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –º–∏—Ä–∞, –Ω–∏–∂–Ω—é—é Tiled –≤ –Ω–∏–∂–Ω—é—é –º–∏—Ä–∞.
                    // y_min –≤ Tiled (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50) —ç—Ç–æ –í–ï–†–• –∫–æ–º–Ω–∞—Ç—ã. y_max –≤ Tiled (–Ω–∞–ø—Ä–∏–º–µ—Ä, 590) —ç—Ç–æ –ù–ò–ó –∫–æ–º–Ω–∞—Ç—ã.
                    // –í –º–∏—Ä–µ Three.js Y —Ä–∞—Å—Ç–µ—Ç –í–í–ï–†–•.
                    // convertTiledY(room.area.y_min) –¥–∞—Å—Ç –ë–û–õ–¨–®–ï–ï –∑–Ω–∞—á–µ–Ω–∏–µ Y (–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–∏—Ä–∞)
                    // convertTiledY(room.area.y_max) –¥–∞—Å—Ç –ú–ï–ù–¨–®–ï–ï –∑–Ω–∞—á–µ–Ω–∏–µ Y (–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–∏—Ä–∞)
                    yMaxWorld: convertTiledY(room.area.y_min, 0, levelConfig.gameWorldHeight, levelConfig.WORLD_Y_OFFSET), // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ–º–Ω–∞—Ç—ã –≤ –º–∏—Ä–µ
                    yMinWorld: convertTiledY(room.area.y_max, 0, levelConfig.gameWorldHeight, levelConfig.WORLD_Y_OFFSET)  // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ–º–Ω–∞—Ç—ã –≤ –º–∏—Ä–µ
                };
            }
        });
        worldRoomBoundariesRef.current = boundaries; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ worldRoomBoundariesRef —ç—Ç–æ useRef(), –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥–¥–µ-—Ç–æ –≤—ã—à–µ
        console.log("[Level.jsx] World room boundaries calculated:", boundaries);
    }

    // --- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ ---

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ–Ω–∞
    if(backgroundMeshRef.current) {
        console.log("  > Removing old background");
        currentScene.remove(backgroundMeshRef.current);
        backgroundMeshRef.current.geometry?.dispose();
        backgroundMeshRef.current.material?.map?.dispose();
        backgroundMeshRef.current.material?.dispose();
        backgroundMeshRef.current = null;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–µ–Ω
    if(wallsRef.current.length > 0) {
        console.log(`  > Removing ${wallsRef.current.length} old walls`);
        wallsRef.current.forEach(w => {
            if(w.mesh) {
                currentScene.remove(w.mesh);
                w.mesh.geometry?.dispose();
                // –û–±—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –Ω–µ —É–¥–∞–ª—è–µ–º —Ç—É—Ç, –æ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            }
        });
        wallsRef.current = [];
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ç—É–º–∞–Ω–∞
    Object.values(fogOverlaysRef.current).forEach(overlay => {
        if (overlay) {
            console.log(`  > Removing old fog overlay: ${overlay.name}`);
            currentScene.remove(overlay);
            overlay.geometry?.dispose();
            // –ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±—â–∏–π (fogMaterialRef.current), –Ω–µ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∑–¥–µ—Å—å.
        }
    });
    fogOverlaysRef.current = {}; // –û—á–∏—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ç—É–º–∞–Ω

    // --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –§–û–ù–ê ---
    const textureLoader = new THREE.TextureLoader();
    if (levelData?.backgroundTexture) {
        console.log(`  > Loading background texture: ${levelData.backgroundTexture}`);
        textureLoader.load(
            levelData.backgroundTexture,
            (texture) => { // Success callback
                if (!sceneRef.current) return;
                console.log("    * Background texture loaded successfully");
                texture.encoding = THREE.sRGBEncoding;
                const bgGeometry = new THREE.PlaneGeometry(levelConfig.gameWorldWidth, levelConfig.gameWorldHeight);
                const bgMaterial = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });
                const backgroundMesh = new THREE.Mesh(bgGeometry, bgMaterial);
                backgroundMesh.position.set(0, 0, -10); // Z=-10
                backgroundMesh.renderOrder = -1; // –ß—Ç–æ–±—ã —Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è –ø–µ—Ä–≤—ã–º
                sceneRef.current.add(backgroundMesh);
                backgroundMeshRef.current = backgroundMesh;
            },
            undefined, // onProgress callback (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            (error) => { // Error callback
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞:", error);
                if(sceneRef.current) sceneRef.current.background = new THREE.Color(0x282c34); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        );
    } else {
        console.log("  > No background texture specified, using color.");
        currentScene.background = new THREE.Color(0x282c34);
    }

    // --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –°–¢–ï–ù ---
    // –í–∞–∂–Ω–æ: —Å—Ç–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ü–µ–Ω—É –î–û —Ç—É–º–∞–Ω–∞,
    // —á—Ç–æ–±—ã —Ç—É–º–∞–Ω –±—ã–ª –ø–æ–≤–µ—Ä—Ö –Ω–∏—Ö (–µ—Å–ª–∏ Z-–ø–æ–∑–∏—Ü–∏—è —Ç—É–º–∞–Ω–∞ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç).
    if (levelData?.walls && levelData.walls.length > 0) {
        console.log(`  > Creating ${levelData.walls.length} walls`);
          const wallMaterial = new THREE.MeshStandardMaterial({ // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—â–∏–º
                color: 0x808080,
                roughness: 0.8,
                metalness: 0.2
          });
          const tempWalls = [];

          levelData.walls.forEach(wallData => {
                const wallWidth = wallData.width;
                const wallHeight = wallData.height;
                const wallX = convertTiledX(wallData.x, wallWidth, levelConfig.gameWorldWidth);
                const wallY = convertTiledY(wallData.y, wallHeight, levelConfig.gameWorldHeight, levelConfig.WORLD_Y_OFFSET);

                const wallGeometry = new THREE.BoxGeometry(wallWidth, wallHeight, 10); // –ì–ª—É–±–∏–Ω–∞ —Å—Ç–µ–Ω—ã 10
                const wallMesh = new THREE.Mesh(wallGeometry, wallMaterial);
                wallMesh.position.set(wallX, wallY, -5); // Z-–ø–æ–∑–∏—Ü–∏—è —Å—Ç–µ–Ω, —á—Ç–æ–±—ã –±—ã–ª–∏ –ø–µ—Ä–µ–¥ —Ñ–æ–Ω–æ–º, –Ω–æ –∑–∞ —Ç—É–º–∞–Ω–æ–º
                currentScene.add(wallMesh);

                tempWalls.push({
                    id: wallData.id || `wall-${Math.random()}`,
                    x: wallX - wallWidth / 2,
                    y: wallY - wallHeight / 2,
                    width: wallWidth,
                    height: wallHeight,
                    mesh: wallMesh
                });
          });
          wallsRef.current = tempWalls;
       } else {
           console.log("  > No walls data found for creation.");
       }

    // --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¢–£–ú–ê–ù–ê –í–û–ô–ù–´ ---
    if (levelData.rooms && levelData.rooms.length > 0) {
        console.log(`  > Creating fog for ${levelData.rooms.length} rooms`);
        levelData.rooms.forEach(room => {
            if (!room.area) {
                console.warn(`Room ${room.id} has no area defined, skipping fog.`);
                return;
            }

            const roomWidth = room.area.x_max - room.area.x_min;
            const roomHeight = room.area.y_max - room.area.y_min;

            if (roomWidth <= 0 || roomHeight <= 0) {
                console.warn(`Room ${room.id} has invalid area dimensions, skipping fog.`);
                return;
            }

            const fogGeometry = new THREE.PlaneGeometry(roomWidth, roomHeight);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ fogMaterialRef
            const fogOverlayMesh = new THREE.Mesh(fogGeometry, fogMaterialRef.current);

            const roomCenterX_tiled = room.area.x_min + roomWidth / 2;
            const roomCenterY_tiled = room.area.y_min + roomHeight / 2;

            const worldX = convertTiledX(roomCenterX_tiled, 0, levelConfig.gameWorldWidth);
            const worldY = convertTiledY(roomCenterY_tiled, 0, levelConfig.gameWorldHeight, levelConfig.WORLD_Y_OFFSET);

            fogOverlayMesh.position.set(worldX, worldY, 0.5); // Z=0.5, —á—Ç–æ–±—ã –±—ã—Ç—å –Ω–∞–¥ —Ñ–æ–Ω–æ–º/–ø–æ–ª–æ–º, –Ω–æ –ø–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
            fogOverlayMesh.name = `fog_overlay_${room.id}`;

            if (room.isStartingRoom) {
                fogOverlayMesh.visible = false;
                console.log(`    * Fog for starting room ${room.id} created and hidden.`);
            } else {
                fogOverlayMesh.visible = true;
                console.log(`    * Fog for room ${room.id} created and visible.`);
            }
            
            currentScene.add(fogOverlayMesh);
            fogOverlaysRef.current[room.id] = fogOverlayMesh;
        });
    } else {
        console.log("  > No rooms data found for fog creation.");
    }

    // --- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ useEffect ---
    return () => {
        console.log("[Level.jsx] –û—á–∏—Å—Ç–∫–∞ —Ñ–æ–Ω–∞, —Å—Ç–µ–Ω –∏ —Ç—É–º–∞–Ω–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º/—Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º");
        const sceneForCleanup = sceneRef.current; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ sceneRef –∏–∑–º–µ–Ω–∏—Ç—Å—è
        if (sceneForCleanup) {
            // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ–Ω–∞
            if(backgroundMeshRef.current) {
                sceneForCleanup.remove(backgroundMeshRef.current);
                backgroundMeshRef.current.geometry?.dispose();
                backgroundMeshRef.current.material?.map?.dispose();
                backgroundMeshRef.current.material?.dispose();
            }
            
            // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–µ–Ω
            wallsRef.current.forEach(w => {
                if (w.mesh) {
                    sceneForCleanup.remove(w.mesh);
                    w.mesh.geometry?.dispose();
                    // –û–±—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω (wallMaterial) –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ useEffect.
                    // –ï—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ ref –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ dispose,
                    // –æ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞, –∫–æ–≥–¥–∞ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ–≥–æ –ø—Ä–æ–ø–∞–¥—É—Ç.
                    // –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –±–æ–ª–µ–µ —è–≤–Ω—ã–º–∏, –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å wallMaterial –≤ ref
                    // (–Ω–∞–ø—Ä–∏–º–µ—Ä, wallMaterialRef.current = wallMaterial;) –∏ –∑–∞—Ç–µ–º –¥–∏—Å–ø–æ–∑–∏—Ç—å –µ–≥–æ –∑–¥–µ—Å—å:
                    // wallMaterialRef.current?.dispose(); wallMaterialRef.current = null;
                    // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –æ–Ω –Ω–µ –¥–∏—Å–ø–æ–∑–∏—Ç—Å—è —è–≤–Ω–æ, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –º–Ω–æ–≥–∏—Ö —Å–ª—É—á–∞–µ–≤.
                }
            });
            sceneForCleanup.background = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ–Ω —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Ü–≤–µ—Ç

            // –û—á–∏—Å—Ç–∫–∞ —Ç—É–º–∞–Ω–∞
            Object.values(fogOverlaysRef.current).forEach(overlay => {
                if (overlay) {
                    sceneForCleanup.remove(overlay);
                    overlay.geometry?.dispose();
                    // –û–±—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª fogMaterialRef.current –ù–ï —É–¥–∞–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å,
                    // –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Level —Ü–µ–ª–∏–∫–æ–º, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º —Å–æ–∑–¥–∞–µ—Ç—Å—è.
                }
            });
        }
        backgroundMeshRef.current = null;
        wallsRef.current = [];
        fogOverlaysRef.current = {};
        // worldRoomBoundariesRef.current = {}; // –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞–Ω–∏—Ü, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏
    };
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ levelData –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
// –∏ worldRoomBoundariesRef —Ç–∞–∫–∂–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç levelData –∏ levelConfig
}, [levelConfig, levelData, fogMaterialRef.current]); // sceneRef, convertTiledX, convertTiledY, worldRoomBoundariesRef - —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã.
                                                    // –û–¥–Ω–∞–∫–æ, ref-—ã (sceneRef, fogMaterialRef, worldRoomBoundariesRef) –æ–±—ã—á–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã.
                                                    // –§—É–Ω–∫—Ü–∏–∏ convertTiledX, convertTiledY - –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ —è–≤–ª—è—é—Ç—Å—è useCallback —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π,
                                                    // —Ç–æ –∏—Ö –º–æ–∂–Ω–æ –Ω–µ –≤–∫–ª—é—á–∞—Ç—å. –ï—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ, –∏—Ö —Å—Ç–æ–∏—Ç –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ–±–µ—Ä–Ω—É—Ç—å –≤ useCallback.

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –ò–≥—Ä–æ–∫–∞ ---
    const { playerObject, isPlayerModelLoaded } = usePlayerLoader(
        playerStats?.skin || "/Models/character.glb",
        levelData?.playerStart || (levelConfig ? { x: 0, y: levelConfig.WORLD_Y_OFFSET - 50 } : { x: 0, y: 0 }),
        sceneRef.current,
        levelConfig
    );

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –í—Ä–∞–≥–æ–≤ (–ò–°–ü–û–õ–¨–ó–£–ï–ú useEnemyLoader) ---
    const {
        enemyRefs: loadedEnemyRefsArray,  // –≠—Ç–æ –ú–ê–°–°–ò–í –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤ –∏–∑ useEnemyLoader
        setEnemyRefs: setLoadedEnemyRefsArray, // –≠—Ç–æ –§–£–ù–ö–¶–ò–Ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        areEnemiesLoaded,
        initialEnemyStates: loadedInitialStates,
        // shieldResources // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã
    } = useEnemyLoader(
        levelData?.enemies,
        sceneRef.current, // sceneRef –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å useRef(), –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ Level.jsx
        levelConfig,
        levelData?.id,
        difficulty,
        BASE_ENEMY_STATS
    );

    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π –∑–∞–≥—Ä—É–∑–∫–æ–π ---
    useEffect(() => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—Å–µ –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        const allLoaded = !!levelConfig && isPlayerModelLoaded && areEnemiesLoaded && beamTexturesLoaded;
        const currentlyLoading = !allLoaded; // –û–±—Ä–∞—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "–∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞"
    
        // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å true –Ω–∞ false)
        if (isLoading !== currentlyLoading) {
            setIsLoading(currentlyLoading); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    
            // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¢–û–õ–¨–ö–û –ß–¢–û –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
            if (!currentlyLoading) {
                // –ò –µ—Å–ª–∏ –∫–æ–ª–±–µ–∫ onReady –µ—â–µ –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞)
                if (!readyCalledRef.current) {
                    console.log("‚ú® –£—Ä–æ–≤–µ–Ω—å –ì–û–¢–û–í! –í—ã–∑–æ–≤ onReady.");
    
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HP –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞
                    if (typeof initializeLevelHp === 'function') {
                        initializeLevelHp();
                        console.log("HP –∏–≥—Ä–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.");
                    } else {
                        console.error("–û–®–ò–ë–ö–ê: initializeLevelHp –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ onReady!");
                    }
    
                    // –í—ã–∑–æ–≤ –∫–æ–ª–±–µ–∫–∞ onReady, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –ø—Ä–æ–ø—Å
                    if (typeof onReady === 'function') {
                        onReady();
                    } else {
                        console.warn("–ü—Ä–æ–ø—Å onReady –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ Level.");
                    }
                    readyCalledRef.current = true; // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ onReady –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    
                    // --- –ù–ê–ß–ê–õ–û –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê (–∏–∑ –∫–æ–¥1) ---
                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è –∏ –≤—ã–∑–æ–≤–∞ onReady
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ levelData –∏ –º–∞—Å—Å–∏–≤–∞ –∫–æ–º–Ω–∞—Ç
                    if (levelData && levelData.rooms && Array.isArray(levelData.rooms)) {
                        // –ò—â–µ–º –∫–æ–º–Ω–∞—Ç—É, –ø–æ–º–µ—á–µ–Ω–Ω—É—é –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è
                        const startingRoom = levelData.rooms.find(room => room.isStartingRoom);
    
                        if (startingRoom) {
                            setCurrentActiveRoomId(startingRoom.id);
                            console.log(`[Level.jsx] Starting room set to: ${startingRoom.id}`);
                            // –°–æ–≥–ª–∞—Å–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –≤ –∫–æ–¥1: "–¢—É–º–∞–Ω –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫—Ä—ã—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏".
                            // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è —Å–∫—Ä—ã—Ç–∏—è —Ç—É–º–∞–Ω–∞ –∑–¥–µ—Å—å:
                            // if (fogOverlaysRef.current && fogOverlaysRef.current[startingRoom.id] && fogOverlaysRef.current[startingRoom.id].visible !== false) {
                            //     fogOverlaysRef.current[startingRoom.id].visible = false;
                            //     console.log(`[Level.jsx] Fog explicitly ensured hidden for designated starting room: ${startingRoom.id}`);
                            // }
                        } else {
                            console.warn("[Level.jsx] No starting room defined in levelData.rooms!");
                            // –ï—Å–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –Ω–æ –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∏–∑ —Å–ø–∏—Å–∫–∞
                            if (levelData.rooms.length > 0) {
                                const firstRoomAsStarting = levelData.rooms[0];
                                setCurrentActiveRoomId(firstRoomAsStarting.id);
                                console.log(`[Level.jsx] Defaulting to first room as starting room: ${firstRoomAsStarting.id}`);
                                // –°–∫—Ä—ã—Ç—å —Ç—É–º–∞–Ω –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                if (fogOverlaysRef.current && fogOverlaysRef.current[firstRoomAsStarting.id]) {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É–º–∞–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–∏–º, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –µ–≥–æ —Å–∫—Ä—ã–≤–∞—Ç—å
                                    if (fogOverlaysRef.current[firstRoomAsStarting.id].visible !== false) {
                                        fogOverlaysRef.current[firstRoomAsStarting.id].visible = false;
                                        console.log(`[Level.jsx] Fog cleared for default starting room: ${firstRoomAsStarting.id}`);
                                    }
                                } else {
                                    // –≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å –æ–≤–µ—Ä–ª–µ–π —Ç—É–º–∞–Ω–∞
                                    console.warn(`[Level.jsx] Fog overlay not found or not applicable for default starting room: ${firstRoomAsStarting.id}`);
                                }
                            } else {
                                // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç –≤–æ–æ–±—â–µ –Ω–µ—Ç
                                console.error("[Level.jsx] No rooms available in levelData.rooms to set as a default starting room.");
                            }
                        }
                    } else {
                        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–Ω–∞—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
                        console.warn("[Level.jsx] levelData.rooms is not available or not an array. Cannot set starting room.");
                    }
                    // --- –ö–û–ù–ï–¶ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê ---
    
                    // –õ–æ–≥–∏–∫–∞ –¥–ª—è —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã "–≤—ã–∂–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
                    if (levelData?.winCondition?.type === 'survive_duration') {
                        levelStartTimeRef.current = Date.now(); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–≤–Ω—è
                        setRemainingTime(levelData.winCondition.duration); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è
                        console.log(`Survival Timer Started: ${levelData.winCondition.duration}s`);
                    } else {
                        levelStartTimeRef.current = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ "survive_duration"
                        setRemainingTime(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                    }
                } else {
                    // –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –Ω–æ onReady —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Ä–∞–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
                    console.log("[Level.jsx] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ onReady —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Ä–∞–Ω–µ–µ.");
                }
            } else {
                // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (currentlyLoading === true)
                console.log("[Level.jsx] –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...");
            }
        }
    }, [
        levelConfig,            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è
        isPlayerModelLoaded,    // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–∞
        areEnemiesLoaded,       // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–∞–≥–æ–≤
        beamTexturesLoaded,     // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä –ª—É—á–µ–π
        isLoading,              // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–∏–∑ state)
        // setIsLoading,        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ isLoading, –æ–±—ã—á–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö, –µ—Å–ª–∏ —ç—Ç–æ setState –∏–∑ useState
        onReady,                // –ö–æ–ª–±–µ–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—è (–ø—Ä–æ–ø—Å)
        initializeLevelHp,      // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HP (–ø—Ä–æ–ø—Å)
        levelData,              // –î–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è, –≤–∫–ª—é—á–∞—è levelData.rooms –∏ levelData.winCondition. –í–∞–∂–Ω–æ –¥–ª—è –ª–æ–≥–∏–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã –∏ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã.
        // setCurrentActiveRoomId, // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã (setState), —Å—Ç–∞–±–∏–ª—å–Ω–∞
        // fogOverlaysRef,      // ref-–æ–±—ä–µ–∫—Ç, —Å—Ç–∞–±–∏–ª–µ–Ω
        // readyCalledRef,      // ref-–æ–±—ä–µ–∫—Ç, —Å—Ç–∞–±–∏–ª–µ–Ω
        // levelStartTimeRef,   // ref-–æ–±—ä–µ–∫—Ç, —Å—Ç–∞–±–∏–ª–µ–Ω
        // setRemainingTime     // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ (setState), —Å—Ç–∞–±–∏–ª—å–Ω–∞
    ]);

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ä–∞–≥–æ–≤ ---
    useEffect(() => {
        if (areEnemiesLoaded && loadedInitialStates && loadedInitialStates.length > 0) {
            if (JSON.stringify(enemiesState) !== JSON.stringify(loadedInitialStates)) {
                 console.log(`--- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø enemiesState (${loadedInitialStates.length} —à—Ç.) –∏–∑ initialEnemyStates ---`);
                 setEnemiesState(loadedInitialStates);
            }
        } else if (!areEnemiesLoaded && enemiesState.length > 0) {
             console.log("--- –û—á–∏—Å—Ç–∫–∞ enemiesState, —Ç.–∫. areEnemiesLoaded = false ---");
             setEnemiesState([]);
        }
    }, [areEnemiesLoaded, loadedInitialStates]); // –ù–µ –∑–∞–≤–∏—Å–∏–º –æ—Ç enemiesState

    const hpResources = useMemo(() => ({
        geometryBg: new THREE.PlaneGeometry(HEALTH_BAR_WIDTH, HEALTH_BAR_HEIGHT),
        geometryFill: new THREE.PlaneGeometry(HEALTH_BAR_WIDTH, HEALTH_BAR_HEIGHT),
        materialBg: new THREE.MeshBasicMaterial({ color: 0x333333, depthTest: false, depthWrite: false, transparent: true, opacity: 0.8 }),
        materialFill: new THREE.MeshBasicMaterial({ color: 0x00ff00, depthTest: false, depthWrite: false, transparent: true, opacity: 0.9 })
    }), []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π = —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ—Ñ–∞ –∏ —Å—Ç–µ–π—Ç–∞
    useEffect(() => {
        console.log(`[Sync Ref] activeClouds state changed, updating activeCloudsRef. New length: ${activeClouds.length}`);
        activeCloudsRef.current = activeClouds;
    }, [activeClouds]);

    const spikeResources = useMemo(() => {
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∏–ø–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã)
        const indicatorRadius = 30; // –ë–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å
        const spikeHeight = indicatorRadius * 1.2;
        const spikeRadius = indicatorRadius * 0.15;
        const spikeColor = 0xB8860B; // –ü–µ—Å–æ—á–Ω—ã–π
    
        return {
            geometry: new THREE.ConeGeometry(spikeRadius, spikeHeight, 8),
            material: new THREE.MeshStandardMaterial({
                color: spikeColor,
                roughness: 0.7,
                metalness: 0.2
            })
        };
    }, []); // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
    
    // --- –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É spikeResources –≤ useEffect ---
    useEffect(() => {
        return () => {
            console.log("–û—á–∏—Å—Ç–∫–∞ –æ–±—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —à–∏–ø–æ–≤ –∏–∑ Level");
            spikeResources.geometry.dispose();
            spikeResources.material.dispose();
            // ... –æ—á–∏—Å—Ç–∫–∞ hpResources ...
        };
    }, [spikeResources, hpResources]); // –î–æ–±–∞–≤–ª—è–µ–º spikeResources –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    useEffect(() => {
        console.log('[RoomCheck DEBUG] useEffect triggered. currentActiveRoomId:', currentActiveRoomId, 'clearedRoomIds:', clearedRoomIds, 'enemiesState length:', enemiesState?.length);
    
        if (!currentActiveRoomId || clearedRoomIds.has(currentActiveRoomId) || !levelData?.enemies || !enemiesState?.length) {
            console.log('[RoomCheck DEBUG] Early return. Conditions:', {
                hasActiveRoom: !!currentActiveRoomId,
                isAlreadyCleared: currentActiveRoomId ? clearedRoomIds.has(currentActiveRoomId) : 'N/A',
                hasLevelEnemies: !!levelData?.enemies,
                hasEnemiesState: !!enemiesState?.length
            });
            return;
        }
    
        const monstersInCurrentRoom = levelData.enemies.filter(enemyDef => enemyDef.roomId === currentActiveRoomId);
        console.log(`[RoomCheck DEBUG] For room '${currentActiveRoomId}', monstersInCurrentRoom (from levelData):`, monstersInCurrentRoom.map(m => m.id), `Count: ${monstersInCurrentRoom.length}`);
        
        if (monstersInCurrentRoom.length === 0 && currentActiveRoomId && !levelData.rooms.find(r => r.id === currentActiveRoomId)?.isStartingRoom) {
            console.log(`[RoomCheck DEBUG] Room '${currentActiveRoomId}' is defined as empty in levelData and not starting room. Returning.`);
            return;
        }
    
        let allMonstersInRoomDead = true;
        if (monstersInCurrentRoom.length > 0) {
            console.log('[RoomCheck DEBUG] Checking individual monster states...');
            for (const enemyDef of monstersInCurrentRoom) {
                const enemyState = enemiesState.find(es => es.id === enemyDef.id);
                if (enemyState) {
                    console.log(`[RoomCheck DEBUG] Monster ${enemyDef.id} (in room ${currentActiveRoomId}): currentHp = ${enemyState.currentHp}`);
                    if (enemyState.currentHp > 0) {
                        allMonstersInRoomDead = false;
                        console.log(`[RoomCheck DEBUG] Monster ${enemyDef.id} is ALIVE. Setting allMonstersInRoomDead = false.`);
                        break;
                    }
                } else {
                    // –ï—Å–ª–∏ –º–æ–Ω—Å—Ç—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã –≤ levelData, –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ enemiesState
                    // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (initiallyActive: false –∏ –∫–æ–º–Ω–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å–µ—â–∞–ª–∞—Å—å)
                    // –ù–æ –µ—Å–ª–∏ –í–°–ï –º–æ–Ω—Å—Ç—Ä—ã –∫–æ–º–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –∞–∫—Ç–∏–≤–Ω—ã, –º–µ—Ä—Ç–≤—ã, –∫–æ–º–Ω–∞—Ç–∞ –∑–∞—á–∏—â–µ–Ω–∞.
                    // –ï—Å–ª–∏ –º–æ–Ω—Å—Ç—Ä initiallyActive: true, –æ–Ω –î–û–õ–ñ–ï–ù –±—ã—Ç—å –≤ enemiesState.
                    // –ï—Å–ª–∏ initiallyActive: false, –∏ –∫–æ–º–Ω–∞—Ç–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π, –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ enemiesState.
                    // –≠—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –Ω—É–∂–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–æ–¥—É–º–∞—Ç—å: –∫–∞–∫ –º—ã —Å—á–∏—Ç–∞–µ–º –º–æ–Ω—Å—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ enemiesState?
                    // –ü–æ–∫–∞ —á—Ç–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ enemiesState, –º—ã –µ–≥–æ –Ω–µ —Å—á–∏—Ç–∞–µ–º "–∂–∏–≤—ã–º", —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞—á–∏—Å—Ç–∫–µ,
                    // –ï–°–õ–ò –Ω–µ –≤—Å–µ –º–æ–Ω—Å—Ç—Ä—ã –∫–æ–º–Ω–∞—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ enemiesState –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç—ã.
                    // –ù–æ useEnemyLoader –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –≤—Å–µ—Ö (–¥–∞–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö initiallyActive:false) –≤ initialEnemyStates,
                    // —Ç–∞–∫ —á—Ç–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ enemiesState —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.
                    console.warn(`[RoomCheck DEBUG] Monster ${enemyDef.id} (defined for room ${currentActiveRoomId}) NOT FOUND in enemiesState. This might be an issue.`);
                    // –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –≤—Å–µ –º–æ–Ω—Å—Ç—Ä—ã, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã, –±—ã–ª–∏ –£–ß–¢–ï–ù–´ (—Ç.–µ. –±—ã–ª–∏ –≤ enemiesState –∏ –∏–º–µ–ª–∏ hp <=0),
                    // —Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤ enemiesState –¥–æ–ª–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å—Å—è –∫–∞–∫ "–∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –∑–∞—á–∏—â–µ–Ω–∞".
                    // allMonstersInRoomDead = false; 
                    // break;
                }
            }
        } else {
            // –ï—Å–ª–∏ –≤ levelData.enemies –Ω–µ—Ç –º–æ–Ω—Å—Ç—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
            allMonstersInRoomDead = false;
            console.log(`[RoomCheck DEBUG] No monsters defined for room ${currentActiveRoomId} in levelData, so allMonstersInRoomDead = false (nothing to clear).`);
        }
        
        console.log(`[RoomCheck DEBUG] Final check: allMonstersInRoomDead = ${allMonstersInRoomDead}, monstersInCurrentRoom.length = ${monstersInCurrentRoom.length}`);
    
    
        if (allMonstersInRoomDead && monstersInCurrentRoom.length > 0) {
            console.log(`[RoomCheck] üéâ –ö–æ–º–Ω–∞—Ç–∞ ${currentActiveRoomId} –ó–ê–ß–ò–©–ï–ù–ê!`);
            
            // --- –®–∞–≥ B: –ù–∞–π—Ç–∏ –¥–≤–µ—Ä—å(–∏), –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–æ–π ---
            const doorsToOpenData = levelData.walls.filter(wallDataInLevel =>
                wallDataInLevel.isDoor === true && wallDataInLevel.opensWhenRoomCleared === currentActiveRoomId
            );
        
            if (doorsToOpenData.length > 0) {
                doorsToOpenData.forEach(doorData => {
                    console.log(`[DoorLogic] –ù–∞–π–¥–µ–Ω–∞ –¥–≤–µ—Ä—å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è: ID='${doorData.id}', –≤–µ–¥–µ—Ç –≤ '${doorData.targetRoomIdForDoor || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}'`);
                    
                    // –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π 3D –æ–±—ä–µ–∫—Ç (–º–µ—à) —ç—Ç–æ–π –¥–≤–µ—Ä–∏ –≤ wallsRef.current
                    const doorWallObjectInRef = wallsRef.current.find(wallRef => wallRef.id === doorData.id);
        
                    if (doorWallObjectInRef && doorWallObjectInRef.mesh) {
                        const doorMesh = doorWallObjectInRef.mesh;
                        const doorId = doorData.id; // –°–æ—Ö—Ä–∞–Ω–∏–º ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª–æ–≥–∞—Ö –∏ filter
                    
                        console.log(`[DoorLogic] –ù–∞–π–¥–µ–Ω 3D –æ–±—ä–µ–∫—Ç (–º–µ—à) –¥–ª—è –¥–≤–µ—Ä–∏ ${doorId}. –û—Ç–∫—Ä—ã–≤–∞–µ–º (—É–¥–∞–ª—è–µ–º).`);
                    
                        // 1. –£–¥–∞–ª—è–µ–º 3D –æ–±—ä–µ–∫—Ç –¥–≤–µ—Ä–∏ —Å–æ —Å—Ü–µ–Ω—ã
                        if (sceneRef.current && doorMesh.parent === sceneRef.current) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω –Ω–∞ —Å—Ü–µ–Ω–µ
                            sceneRef.current.remove(doorMesh);
                        } else if (sceneRef.current && doorMesh.parent !== sceneRef.current && doorMesh.parent instanceof THREE.Object3D) {
                            // –ï—Å–ª–∏ –º–µ—à –≤–ª–æ–∂–µ–Ω –≤ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ pivot —Å–∞–º–æ–≥–æ wallRef, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ)
                            doorMesh.parent.remove(doorMesh);
                        }
                        wallsRef.current = wallsRef.current.filter(wallInRef => wallInRef.id !== doorId);
    
                        console.log(`[DoorLogic] –î–≤–µ—Ä—å ${doorId} —É–¥–∞–ª–µ–Ω–∞ —Å–æ —Å—Ü–µ–Ω—ã –∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å—Ç–µ–Ω –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π.`);
                    
                    } else {
                        console.warn(`[DoorLogic] –ù–µ –Ω–∞–π–¥–µ–Ω 3D –æ–±—ä–µ–∫—Ç (–º–µ—à) –¥–ª—è –¥–≤–µ—Ä–∏ —Å ID '${doorData.id}' –≤ wallsRef.current. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.`);
                    }
                });
            } else {
                console.log(`[DoorLogic] –î–ª—è –∑–∞—á–∏—â–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã ${currentActiveRoomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–≤–µ—Ä–µ–π –≤ levelData.walls, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–∫—Ä—ã—Ç—å—Å—è.`);
            }
            // --- –ö–æ–Ω–µ—Ü –®–∞–≥–∞ B ---
        
            // –ü–æ–º–µ—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∫–∞–∫ –∑–∞—á–∏—â–µ–Ω–Ω—É—é (—ç—Ç–æ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å)
            setClearedRoomIds(prevCleared => new Set(prevCleared).add(currentActiveRoomId));
        }
    
    }, [enemiesState, currentActiveRoomId, clearedRoomIds, levelData]); // –°–ª–µ–¥–∏–º –∑–∞ —ç—Ç–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏

const createPoisonCloud = useCallback((position) => {
    const currentScene = sceneRef.current;
    if (!currentScene) return;

    const cloudRadius = 70; // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–Ω–∞
    const cloudDuration = 8.0;
    const cloudDps = 5;
    // const cloudColor = 0x32CD32; // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç

    console.log(`‚òÅÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ø–î–û–í–ò–¢–û–ì–û –û–ë–õ–ê–ö–ê (–¢–ï–°–¢ –ö–£–ë) –≤ (${position.x.toFixed(0)}, ${position.y.toFixed(0)})`);

    // --- –¢–ï–°–¢–û–í–´–ô –í–∏–∑—É–∞–ª (–Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π –∫—É–±) ---
    const testGeometry = new THREE.BoxGeometry(cloudRadius * 0.8, cloudRadius * 0.8, 10); // –ö—É–± —Ä–∞–∑–º–µ—Ä–æ–º —Å —Ä–∞–¥–∏—É—Å
    const testMaterial = new THREE.MeshStandardMaterial({ // Standard –º–∞—Ç–µ—Ä–∏–∞–ª —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–≤–µ—Ç
        color: 0xff00ff,    // –Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
        emissive: 0x330033, // –ù–µ–º–Ω–æ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–≤–µ—á–µ–Ω–∏—è
        roughness: 0.5,
        metalness: 0.1
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞
        // transparent: false,
        // opacity: 1.0,
    });
    const testMesh = new THREE.Mesh(testGeometry, testMaterial);
    testMesh.position.copy(position);
    testMesh.position.z = 5; // <<< –°—Ç–∞–≤–∏–º –ù–ê–î –∑–µ–º–ª–µ–π (Z=0)
    // mesh.rotation.x = -Math.PI / 2; // –ö—É–±—É –Ω–µ –Ω—É–∂–µ–Ω –ø–æ–≤–æ—Ä–æ—Ç, —á—Ç–æ–±—ã –ª–µ–∂–∞—Ç—å –Ω–∞ –∑–µ–º–ª–µ
    testMesh.renderOrder = 30; // –í—ã—à–µ –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    currentScene.add(testMesh);
    // --- –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–∑—É–∞–ª–∞ ---

    // --- –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å —Ç–µ—Å—Ç–æ–≤—ã–º –º–µ—à–µ–º!) ---
    const cloudData = {
        id: Math.random(),
        mesh: testMesh, // <<< –í–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¢–ï–°–¢–û–í–´–ô –º–µ—à
        position: position.clone(),
        radiusSq: cloudRadius * cloudRadius,
        dps: cloudDps,
        endTime: Date.now() + cloudDuration * 1000,
    };
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å—Ç–µ–π—Ç–∞
    setActiveClouds(prevClouds => {
         const newClouds = [...prevClouds, cloudData];
         console.log(`[setActiveClouds] –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–ª–∞–∫–æ ${cloudData.id}. –í—Å–µ–≥–æ: ${newClouds.length}`);
         return newClouds;
     });

}, [sceneRef, setActiveClouds]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

     

// –í Level.jsx

    // === 8. –£–î–ê–õ–ï–ù–ò–ï –ú–ï–†–¢–í–´–• –í–†–ê–ì–û–í –°–û –°–¶–ï–ù–´ ===
    useEffect(() => {
        const currentScene = sceneRef.current;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if (!currentScene || !loadedEnemyRefsArray || !enemiesState) {
            return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤–æ
        }

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¢–ï–ö–£–©–ò–ú –†–ï–§–ê–ú (3D –æ–±—ä–µ–∫—Ç–∞–º), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ —Å—Ü–µ–Ω–µ
        loadedEnemyRefsArray.forEach(enemyRef => {
            if (!enemyRef || !enemyRef.pivot) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ—Ñ—ã


            // –ù–∞—Ö–æ–¥–∏–º –°–û–°–¢–û–Ø–ù–ò–ï –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–∞–≥–∞
            const enemyState = enemiesState.find(es => es.id === enemyRef.id);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–µ—Ä—Ç–≤ –ª–∏ –≤—Ä–∞–≥ —Å–æ–≥–ª–∞—Å–Ω–æ –°–û–°–¢–û–Ø–ù–ò–Æ
            const isDeadInState = enemyState && enemyState.currentHp <= 0;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞ –µ—â–µ –Ω–∞ —Å—Ü–µ–Ω–µ
            const isOnScene = currentScene.children.includes(enemyRef.pivot);

            if (isDeadInState) {
                // --- –í—Ä–∞–≥ –ú–ï–†–¢–í –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é ---
                 if (!enemyRef.isDead) {
                     enemyRef.isDead = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Ä–µ—Ñ–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AI
                     // console.log(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ isDead=true –¥–ª—è ${enemyRef.id} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.`);
                 }

                 // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –µ—â–µ –Ω–∞ —Å—Ü–µ–Ω–µ - –£–î–ê–õ–Ø–ï–ú
                 if (isOnScene) {
                     // <<<--- –í–û–¢ –≠–¢–£ –ü–†–û–í–ï–†–ö–£ –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨ / –í–ï–†–ù–£–¢–¨ --->>>
                     // console.log(`[Cleanup Check] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è ${enemyRef.id}: –¢–∏–ø=${enemyRef.type}, –§–ª–∞–≥ needsToExplode=${enemyRef.needsToExplode}`); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                     if (enemyRef.type === 'rotting_soldier' && enemyRef.needsToExplode) {
                         createPoisonCloud(enemyRef.pivot.position.clone()); // –í—ã–∑—ã–≤–∞–µ–º –æ–±–ª–∞–∫–æ
                         enemyRef.needsToExplode = false; // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                         console.log(`–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç —Å–º–µ—Ä—Ç–∏ (–æ–±–ª–∞–∫–æ) –¥–ª—è —Å–æ–ª–¥–∞—Ç–∞ ${enemyRef.id}`);
                     }
                     // <<<--- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò --- >>>

                     console.log(`--- –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ–≥–æ –≤—Ä–∞–≥–∞ ${enemyRef.id} (State HP: ${enemyState?.currentHp}) —Å–æ —Å—Ü–µ–Ω—ã ---`);
                     currentScene.remove(enemyRef.pivot); // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç

                     // ... –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ ...
                 }
            }
             // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –°–∫—Ä—ã–≤–∞–µ–º —Ö–µ–ª—Å–±–∞—Ä –º–µ—Ä—Ç–≤–æ–≥–æ –≤—Ä–∞–≥–∞
             if (enemyRef.hpBar?.container && isDeadInState) {
                   enemyRef.hpBar.container.visible = false;
             }

        }); // –ö–æ–Ω–µ—Ü forEach

    // –£–±–µ–¥–∏—Å—å, —á—Ç–æ createPoisonCloud –µ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö!
    }, [enemiesState, loadedEnemyRefsArray, sceneRef, createPoisonCloud, hpResources]);

    

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –î–∂–æ–π—Å—Ç–∏–∫–∞ ---
    useEffect(() => {
        let joystickInstance = null;
        if (!isLoading && sceneRef.current) {
            const joystickZone = document.getElementById("joystick-container");
            if (joystickZone && !joystickRef.current) {
                try {
                    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞...");
                    const options = {
                        zone: joystickZone,
                        mode: "static",
                        position: { left: "50%", top: "50%" },
                        size: 100,
                        color: "rgba(255, 255, 255, 0.5)",
                        threshold: 0.1
                    };
                    joystickInstance = nipplejs.create(options);
                    joystickRef.current = joystickInstance;

                    joystickInstance.on("move", (evt, data) => {
                        if (data.vector) {
                            velocity.current = { x: data.vector.x, y: data.vector.y, force: data.force };
                        }
                    });
                    joystickInstance.on("end", () => {
                        velocity.current = { x: 0, y: 0, force: 0 };
                    });
                    console.log("–î–∂–æ–π—Å—Ç–∏–∫ —Å–æ–∑–¥–∞–Ω.");
                } catch (error) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞:", error);
                }
            } else if (!joystickZone) {
                 console.warn("–ù–µ –Ω–∞–π–¥–µ–Ω #joystick-container –¥–ª—è –¥–∂–æ–π—Å—Ç–∏–∫–∞.");
            }
        } else if (isLoading && joystickRef.current) {
             console.log("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –∏–∑-–∑–∞ isLoading=true");
              try { joystickRef.current.destroy(); } catch(e) { console.warn("Joystick destroy error:", e); }
              joystickRef.current = null;
        }

        return () => {
            if (joystickRef.current) {
                 console.log("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ useEffect");
                 try { joystickRef.current.destroy(); } catch(e) { console.warn("Joystick destroy error:", e); }
                 joystickRef.current = null;
            }
        };
    }, [isLoading]);

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥—É ---
// –í Level.jsx

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –£–†–û–ù–ê –í–†–ê–ì–£ (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ë–õ–û–ö–û–ú –∏ –í–ó–†–´–í–û–ú) ===
// –í Level.jsx

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –£–†–û–ù–ê –í–†–ê–ì–£ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ===
    const handleEnemyHit = useCallback((enemyId, damageAmount) => {
        // <<< –ò–°–ü–û–õ–¨–ó–£–ï–ú loadedEnemyRefsArray –ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø >>>
        const enemyRef = loadedEnemyRefsArray.find(ref => ref && ref.id === enemyId);

        // –ï—Å–ª–∏ –≤—Ä–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –º–µ—Ä—Ç–≤—ã–π, –≤—ã—Ö–æ–¥–∏–º
        if (!enemyRef || enemyRef.isDead) {
             // console.log(`[handleEnemyHit] Hit ignored for dead/missing enemy ${enemyId}`);
             return;
        }

        // --- –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ê –†–´–¶–ê–†–Ø ---
        if (enemyRef.type === 'revenant_knight') {
            if (typeof enemyRef.blockCharges === 'undefined') {
                 enemyRef.blockCharges = enemyRef.stats.initialBlockCharges || 0;
            }
            if (enemyRef.blockCharges > 0) {
                enemyRef.blockCharges -= 1;
                console.log(`üõ°Ô∏è Knight ${enemyId} BLOCKED! Charges left: ${enemyRef.blockCharges}`);
                // TODO: –≠—Ñ—Ñ–µ–∫—Ç –±–ª–æ–∫–∞
                return; // –£—Ä–æ–Ω –Ω–µ –Ω–∞–Ω–æ—Å–∏–º
            } else if (enemyRef.blockCharges === 0 && !enemyRef.blockBrokenNotified) {
                 console.log(`Knight ${enemyId} block broken!`);
                 enemyRef.blockBrokenNotified = true;
            }
        }
        // --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –ë–õ–û–ö–ê ---

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        let enemyDefeated = false;
        let needsExplosion = false;

        setEnemiesState(prevEnemies => {
            const enemyIndex = prevEnemies.findIndex(e => e.id === enemyId);
            if (enemyIndex !== -1 && prevEnemies[enemyIndex].currentHp > 0) {
                 const newState = [...prevEnemies];
                 const currentHp = newState[enemyIndex].currentHp;
                 const newHp = Math.max(0, currentHp - damageAmount);
                 // console.log(`   >> HP change for ${enemyId} (${enemyRef.type}): ${currentHp} -> ${newHp}`);

                 if (newHp === 0) {
                      enemyDefeated = true;
                      console.log(`   >> Enemy ${enemyId} defeated (HP=0)!`);
                      if (enemyRef.type === 'rotting_soldier') {
                          needsExplosion = true;
                      }
                 }
                 newState[enemyIndex] = { ...newState[enemyIndex], currentHp: newHp };
                 return newState;
            }
            return prevEnemies;
        });

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–æ–≤ –≤ –†–ï–§–ï –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
         if (enemyDefeated && !enemyRef.isDead) {
             enemyRef.isDead = true;
             if (needsExplosion) {
                 enemyRef.needsToExplode = true;
                 console.log(`[handleEnemyHit] –£–°–¢–ê–ù–û–í–õ–ï–ù –§–õ–ê–ì ${enemyRef.id}.needsToExplode = ${enemyRef.needsToExplode}`);
                }             
             console.log(`--- Flag isDead SET for ${enemyId} AFTER state update ---`);
         }
    // <<< –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–í–ò–°–ò–ú–û–°–¢–ò: –∏—Å–ø–æ–ª—å–∑—É–µ–º loadedEnemyRefsArray –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è >>>
    }, [loadedEnemyRefsArray, enemiesState, playerTakeDamage]); // –î–æ–±–∞–≤–∏–ª–∏ loadedEnemyRefsArray

    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ useEffect ...

    // --- –õ–æ–≥–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä—ã ---
    const winLevel = useCallback(() => { if (levelStatus === 'playing') { console.log(">>> –£—Ä–æ–≤–µ–Ω—å –í–´–ò–ì–†–ê–ù <<<"); setLevelStatus('won'); } }, [levelStatus]);
    const loseLevel = useCallback(() => { if (levelStatus === 'playing') { console.log(">>> –£—Ä–æ–≤–µ–Ω—å –ü–†–û–ò–ì–†–ê–ù <<<"); setLevelStatus('lost'); } }, [levelStatus]);

    // –°–ª–µ–¥–∏–º –∑–∞ HP –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞
    useEffect(() => {
        if (typeof playerHp === 'number' && playerHp <= 0 && levelStatus === 'playing') {
            loseLevel();
        }
    }, [playerHp, levelStatus, loseLevel]);


    // –î–ª—è –¢–æ—Ç–µ–º—â–∏–∫–∞
    const placeTotem = useCallback((casterId, position, totemType, duration, range, effect) => {
        console.warn(`[${casterId}] PLACE TOTEM STUB: type=${totemType}, duration=${duration}s at (${position.x.toFixed(0)}, ${position.y.toFixed(0)}) - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
        // TODO:
        // 1. –°–æ–∑–¥–∞—Ç—å 3D-–º–µ—à –¥–ª—è —Ç–æ—Ç–µ–º–∞ (—Ü–∏–ª–∏–Ω–¥—Ä?).
        // 2. –î–æ–±–∞–≤–∏—Ç—å –º–µ—à –Ω–∞ —Å—Ü–µ–Ω—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π position.
        // 3. –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ç–µ–º–µ (id, position, type, range, effect, endTime, mesh) –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, `activeTotems`.
        // 4. –í –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ `animate` –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ç–µ–º—ã:
        //     - –£–¥–∞–ª—è—Ç—å —Å–æ —Å—Ü–µ–Ω—ã –∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ (Date.now() > endTime).
        //     - –ü—Ä–æ–≤–µ—Ä—è—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ç–µ–º–æ–≤.
        //     - –ü—Ä–∏–º–µ–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–±–∞—Ñ—Ñ—ã/–¥–µ–±–∞—Ñ—Ñ—ã) –∫ –∏–≥—Ä–æ–∫—É (—á–µ—Ä–µ–∑ useGameStore?).
    }, []);


 // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Ç–∞–∫–∏ –®–∏–ø–∞–º–∏ –ñ–Ω–µ—Ü–∞ (–û–ë–ù–û–í–õ–ï–ù–ê —Å –∫–æ–Ω—É—Å–∞–º–∏) ---
 // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ `spikeResources` –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–¥–µ-—Ç–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ useCallback,
// –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ `geometry` –∏ `material` –¥–ª—è —à–∏–ø–æ–≤.
// –ù–∞–ø—Ä–∏–º–µ—Ä:
// const spikeResources = {
//   geometry: new THREE.ConeGeometry(–Ω–µ–∫–∏–π_—Ä–∞–¥–∏—É—Å, –Ω–µ–∫–∞—è_–≤—ã—Å–æ—Ç–∞, 8), // –ì–µ–æ–º–µ—Ç—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
//   material: new THREE.MeshStandardMaterial({ color: 0xC19A6B, roughness: 0.8, metalness: 0.2 }), // –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
// };
// –≠—Ç–∏ `–Ω–µ–∫–∏–π_—Ä–∞–¥–∏—É—Å` –∏ `–Ω–µ–∫–∞—è_–≤—ã—Å–æ—Ç–∞` –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —à–∏–ø–æ–≤.
// –ï—Å–ª–∏ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç `indicatorRadius`, —Ç–æ `spikeResources` –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º –≤–Ω–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.

// –í Level.jsx

const triggerGroundSpikes = useCallback((casterId, targetPos, delay, radius, damage) => {
    const currentScene = sceneRef.current;
    if (!currentScene || !playerObject) return;

    console.log(` Reaper ${casterId} –∫–∞—Å—Ç—É–µ—Ç —à–∏–ø—ã –≤ (${targetPos.x.toFixed(0)}, ${targetPos.y.toFixed(0)}) —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ${delay}—Å`);

    const indicatorRadius = radius || 30;
    const spikeHeight = indicatorRadius * 1.5; // –í—ã—Å–æ—Ç–∞ –∫–æ–Ω—É—Å–∞
    const spikeRadius = indicatorRadius * 0.2; // –†–∞–¥–∏—É—Å –æ—Å–Ω–æ–≤–∞–Ω–∏—è –∫–æ–Ω—É—Å–∞
    const numSpikes = 7; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∏–ø–æ–≤
    const spikeColor = 0xC19A6B; // –ü–µ—Å–æ—á–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
    const eruptionDuration = 0.5; // –ö–∞–∫ –¥–æ–ª–≥–æ —à–∏–ø—ã –≤–∏–¥–Ω—ã (—Å–µ–∫—É–Ω–¥)

    // --- 1. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ö—Ä–∞—Å–Ω–æ–µ –ö–æ–ª—å—Ü–æ) ---
    const indicatorGeometry = new THREE.RingGeometry(indicatorRadius - 2, indicatorRadius, 32);
    const indicatorMaterial = new THREE.MeshBasicMaterial({ color: 0xff4444, side: THREE.DoubleSide, transparent: true, opacity: 0.6, depthWrite: false });
    const indicatorMesh = new THREE.Mesh(indicatorGeometry, indicatorMaterial);
    indicatorMesh.position.copy(targetPos);
    indicatorMesh.position.z = -8.8; // –ù–∞ –∑–µ–º–ª–µ, —á—É—Ç—å –≤—ã—à–µ —Ñ–æ–Ω–∞
    indicatorMesh.rotation.x = -Math.PI / 2;
    indicatorMesh.renderOrder = 6;
    currentScene.add(indicatorMesh);
    // ---

    // --- 2. –¢–∞–π–º–µ—Ä –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —à–∏–ø–æ–≤ ---
    const eruptionTimerId = setTimeout(() => {
        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        currentScene?.remove(indicatorMesh);
        indicatorGeometry.dispose();
        indicatorMaterial.dispose();

        const currentPlayerPos = playerObject?.position;
        console.log(` Reaper ${casterId} —à–∏–ø—ã –ø–æ—è–≤–∏–ª–∏—Å—å! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–∫–∞ @ (${currentPlayerPos?.x.toFixed(0)}, ${currentPlayerPos?.y.toFixed(0)})`);

        // --- 3. –°–æ–∑–¥–∞–µ–º –®–ò–ü–´ (–ö–û–ù–£–°–´) ---
         // –ò—Å–ø–æ–ª—å–∑—É–µ–º –û–ë–©–ò–ï —Ä–µ—Å—É—Ä—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ useMemo (–∫–∞–∫ –¥–ª—è —Ö–µ–ª—Å–±–∞—Ä–æ–≤/—â–∏—Ç–∞)
         // –ò–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ö–ê–ñ–î–´–ô –†–ê–ó (–∫–∞–∫ –∑–¥–µ—Å—å) - —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏—Ö –æ—á–∏—â–∞—Ç—å –≤ cleanupTimer
         const spikeGeometry = new THREE.ConeGeometry(spikeRadius, spikeHeight, 8);
         const spikeMaterial = new THREE.MeshStandardMaterial({ // <<< Standard Material - –ù–£–ñ–ï–ù –°–í–ï–¢!
              color: spikeColor,
              roughness: 0.8,
              metalness: 0.2
         });
         const spikeMeshes = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—à–µ–π

        console.log(`   -> –°–æ–∑–¥–∞–Ω–∏–µ ${numSpikes} —à–∏–ø–æ–≤...`);
        for (let i = 0; i < numSpikes; i++) {
            const spikeMesh = new THREE.Mesh(spikeGeometry, spikeMaterial);
            const angle = (i / numSpikes) * Math.PI * 2 * (1 + (Math.random() - 0.5) * 0.3);
            const dist = indicatorRadius * (0.2 + Math.random() * 0.7);
            spikeMesh.position.copy(targetPos);
            spikeMesh.position.x += Math.cos(angle) * dist;
            spikeMesh.position.y += Math.sin(angle) * dist;
            spikeMesh.position.z = spikeHeight / 2; // <<< –û—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–µ–º–ª–µ (Z=0)
            spikeMesh.rotation.x = (Math.random() - 0.5) * 0.4;
            spikeMesh.rotation.z = (Math.random() - 0.5) * 0.4;
            spikeMesh.renderOrder = 7;
            currentScene.add(spikeMesh); // <<< –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ê –°–¶–ï–ù–£
            spikeMeshes.push(spikeMesh);
        }
        console.log(`   -> ${spikeMeshes.length} —à–∏–ø–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ü–µ–Ω—É.`);
        // ---

        // --- 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É ---
        if (currentPlayerPos && typeof playerTakeDamage === 'function' && playerHp > 0) {
             const distSq = currentPlayerPos.distanceToSquared(targetPos);
             if (distSq <= indicatorRadius * indicatorRadius) {
                 const finalDamage = damage || 15;
                 console.log(` –ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω –æ—Ç —à–∏–ø–æ–≤! –£—Ä–æ–Ω: ${finalDamage}`);
                 playerTakeDamage(finalDamage);
             }
        }

        // --- 5. –¢–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à–∏–ø–æ–≤ ---
        const cleanupTimerId = setTimeout(() => {
             console.log(` Reaper ${casterId} —É–¥–∞–ª—è–µ—Ç ${spikeMeshes.length} —à–∏–ø–æ–≤.`);
             spikeMeshes.forEach(spike => {
                  currentScene?.remove(spike);
             });
             // –û—á–∏—â–∞–µ–º –ì–ï–û–ú–ï–¢–†–ò–Æ –∏ –ú–ê–¢–ï–†–ò–ê–õ, —Ç–∞–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∏—Ö –≤ —ç—Ç–æ–º –≤—ã–∑–æ–≤–µ
              spikeGeometry.dispose();
              spikeMaterial.dispose();
             effectTimersRef.current = effectTimersRef.current.filter(id => id !== cleanupTimerId);
        }, eruptionDuration * 1000);

        effectTimersRef.current.push(cleanupTimerId);
        effectTimersRef.current = effectTimersRef.current.filter(id => id !== eruptionTimerId);

    }, delay * 1000);

    effectTimersRef.current.push(eruptionTimerId);

}, [sceneRef, playerObject, playerTakeDamage, playerHp]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    // –î–ª—è –ö—É–ª—å—Ç–∏—Å—Ç–∞
    const createPoisonPuddle = useCallback((casterId, targetPos, duration, radius, dps) => {
        console.warn(`[${casterId}] CREATE PUDDLE STUB at (${targetPos.x.toFixed(0)}, ${targetPos.y.toFixed(0)}), ${dps} dps for ${duration}s - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
        // TODO:
        // 1. –°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ª—É–∂–∏ (–¥–µ–∫–∞–ª—å, –ø–ª–æ—Å–∫–æ—Å—Ç—å —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π?).
        // 2. –î–æ–±–∞–≤–∏—Ç—å –º–µ—à –Ω–∞ —Å—Ü–µ–Ω—É –≤ targetPos.
        // 3. –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É–∂–µ (id, position, radius, dps, endTime, mesh) –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è `activePuddles`.
        // 4. –í –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ `animate` –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç:
        //     - –£–¥–∞–ª—è—Ç—å –ª—É–∂–∏ —Å–æ —Å—Ü–µ–Ω—ã –∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ.
        //     - –ü—Ä–æ–≤–µ—Ä—è—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª—É–∂.
        //     - –ï—Å–ª–∏ –¥–∞, –Ω–∞–Ω–æ—Å–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: playerTakeDamage(dps * dt).
    }, [playerTakeDamage]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç playerTakeDamage

    // –î–ª—è –ü—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—è
    const applyPlayerDebuff = useCallback((casterId, type, duration, strength) => {
        console.warn(`[${casterId}] APPLY DEBUFF STUB: ${type}, duration: ${duration}s, strength: ${strength} - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
        // TODO:
        // 1. –í—ã–∑–≤–∞—Ç—å action –∏–∑ useGameStore –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–±–∞—Ñ—Ñ–∞:
        //     store.applyDebuff(type, duration, strength); // <-- –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å applyDebuff –∏–∑ —Å—Ç–æ—Ä–∞
        // 2. –í useGameStore –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞:
        //     - –î–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–±–∞—Ñ—Ñ–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–±–∞—Ñ—Ñ–æ–≤ –∏–≥—Ä–æ–∫–∞ (—Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è).
        //     - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è computedStats, —á—Ç–æ–±—ã –æ–Ω–∏ —É—á–∏—Ç—ã–≤–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–±–∞—Ñ—Ñ—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–º–µ–Ω—å—à–∞–ª–∏ —É—Ä–æ–Ω –∏–≥—Ä–æ–∫–∞).
        //     - –£–¥–∞–ª–µ–Ω–∏—è –¥–µ–±–∞—Ñ—Ñ–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ duration.
    }, [/* applyDebuff */]); // <- –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    // –î–ª—è –û–≥—Ä–∞-–º–∞–≥–∞
    const createProjectileToPoint = useCallback((enemyId, startPos, targetPos, damage, speed) => {
        console.warn(`[${enemyId}] CREATE PROJECTILE TO POINT STUB from (${startPos.x.toFixed(0)}, ${startPos.y.toFixed(0)}) to (${targetPos.x.toFixed(0)}, ${targetPos.y.toFixed(0)}) - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
        // TODO:
        // 1. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–µ–∫—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è velocity –æ—Ç startPos –∫ targetPos.
        // 2. –°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞—Ä—è–¥–∞ (id, ownerId, position=startPos, velocity, damage, lifetime).
        // 3. –î–æ–±–∞–≤–∏—Ç—å —Å–Ω–∞—Ä—è–¥ –≤ –º–∞—Å—Å–∏–≤ enemyProjectilesRef.current.
        // 4. –°–æ–∑–¥–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—à —Å–Ω–∞—Ä—è–¥–∞ –Ω–∞ —Å—Ü–µ–Ω—É (addEnemyProjectileMesh).
        // 5. –õ–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –∫–æ–ª–ª–∏–∑–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ animate —É–∂–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è enemyProjectilesRef.
    }, []); // –ü–æ–∫–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è sceneRef

    // === –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô-–ó–ê–ì–õ–£–®–ï–ö ===


    // === –û–°–ù–û–í–ù–û–ô –ò–ì–†–û–í–û–ô –¶–ò–ö–õ ===
    useEffect(() => {
        // –£—Å–ª–æ–≤–∏–µ –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞
        if (isLoading || levelStatus !== 'playing' || !playerObject || !loadedEnemyRefsArray || !sceneRef.current || !rendererRef.current || !cameraRef.current || !levelConfig || !beamTexturesLoaded) {
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current);
                animationFrameId.current = null;
            }
            return;
        }
        const clock = new THREE.Clock();
        let lastTimestamp = 0;

        // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ü–∏–∫–ª–∞ ---

        const findNearestEnemy = (origin, maxRangeSq) => {
            let nearestEnemy = null;
            let minDistanceSq = maxRangeSq;
            loadedEnemyRefsArray?.forEach(enemy => {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º enemy.isDead –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –≤ enemiesState –∫–∞–∂–¥—ã–π —Ä–∞–∑
                if (!enemy || enemy.isDead || !enemy.pivot?.position) return;
                const distanceSq = origin.distanceToSquared(enemy.pivot.position);
                if (distanceSq < minDistanceSq) {
                    minDistanceSq = distanceSq;
                    nearestEnemy = enemy;
                }
            });
            return nearestEnemy;
        };

        const addProjectileMesh = (projectileData) => {
            if (!sceneRef.current) return;
            const geometry = new THREE.SphereGeometry(4, 6, 6);
            const material = new THREE.MeshBasicMaterial({ color: projectileData.isCrit ? 0xffaa00 : 0xffffff });
            const mesh = new THREE.Mesh(geometry, material);
            mesh.position.copy(projectileData.position);
            projectileData.mesh = mesh;
            sceneRef.current.add(mesh);
        };

        const createProjectile = (targetEnemyRef) => {
            console.log("Player Attack Stat:", playerStats?.attack);
            if (!playerObject || !targetEnemyRef?.pivot?.position || !playerStats) return;

            const projSpeed = 500;
            const projLifetime = 1.5;
            const baseDamage = playerStats.attack || 1;
            const startPos = playerObject.position.clone();
            const targetPos = targetEnemyRef.pivot.position.clone();
            const direction = targetPos.sub(startPos).normalize();
            const critChance = playerStats.critChance || 0;
            const isCrit = Math.random() * 100 < critChance;
            const critMultiplier = playerStats.critMultiplier || 2;
            let finalDamage = isCrit ? Math.round(baseDamage * critMultiplier) : baseDamage;

            const doubleStrikeChance = playerStats.doubleStrikeChance || 0;
            const isDoubleStrike = Math.random() * 100 < doubleStrikeChance;

            const makeProjectileData = (dmg, crit, offset = 0) => {
                const pos = playerObject.position.clone().add(direction.clone().multiplyScalar(25));
                if (offset !== 0) {
                    pos.add(new THREE.Vector3(direction.y, -direction.x, 0).multiplyScalar(offset));
                }
                return {
                    id: Math.random(),
                    position: pos,
                    velocity: direction.clone().multiplyScalar(projSpeed),
                    damage: dmg,
                    isCrit: crit,
                    lifetime: projLifetime,
                    mesh: null
                };
            };

            const p1 = makeProjectileData(finalDamage, isCrit);
            projectilesRef.current.push(p1);
            addProjectileMesh(p1);

            if (isDoubleStrike) {
                const isCrit2 = Math.random() * 100 < critChance;
                const dmg2 = isCrit2 ? Math.round(baseDamage * critMultiplier) : baseDamage;
                const p2 = makeProjectileData(dmg2, isCrit2, 8);
                projectilesRef.current.push(p2);
                addProjectileMesh(p2);
            }
        };

        const addEnemyProjectileMesh = (projData) => {
            if (!sceneRef.current) return;
            const geometry = new THREE.CylinderGeometry(0.5, 0.5, 12, 5);
            const material = new THREE.MeshBasicMaterial({ color: 0x8B4513 });
            const mesh = new THREE.Mesh(geometry, material);
            mesh.position.copy(projData.position);
            mesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), projData.velocity.clone().normalize());
            projData.mesh = mesh;
            sceneRef.current.add(mesh);
        };

        const createEnemyProjectile = (enemy, playerCurrentPos) => {
             if (!enemy || !enemy.pivot?.position || !enemy.stats || !playerCurrentPos || enemy.isDead) return;

             const projSpeed = 300 + Math.random() * 100;
             const projLifetime = 2.0;
             const damage = enemy.stats.damage || 3;

             const startPos = enemy.pivot.position.clone();
             const targetPos = playerCurrentPos.clone();
             const direction = targetPos.sub(startPos).normalize();
             startPos.add(direction.clone().multiplyScalar(25)); // –°–º–µ—â–∞–µ–º —Å—Ç–∞—Ä—Ç –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≤—Ä–∞–≥–∞

             const projectileData = {
                 id: Math.random(),
                 ownerId: enemy.id,
                 position: startPos,
                 velocity: direction.clone().multiplyScalar(projSpeed),
                 damage: damage,
                 lifetime: projLifetime,
                 mesh: null
             };
             enemyProjectilesRef.current.push(projectileData);
             addEnemyProjectileMesh(projectileData);
        };

        // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª—É—á–µ–π ---
        const createBeamMeshFixed = (enemy, targetPos) => {
            if (!sceneRef.current || !enemy.pivot?.position || !beamTexturesRef.current || !enemy.stats || enemy.isDead) {
                console.warn("createBeamMeshFixed: –ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—Ä–∞–≥ –º–µ—Ä—Ç–≤.");
                return null;
            }

            const beamType = enemy.stats.beamType === 'fire' ? 'fire' : 'ice';
            const texture = beamTexturesRef.current[beamType];

            if (!texture) {
                console.error(`–¢–µ–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ª—É—á–∞ —Ç–∏–ø–∞ "${beamType}" –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!`);
                return null;
            }

            const startPoint = enemy.pivot.position.clone();
            const beamOriginOffsetY = 25;
            startPoint.y += beamOriginOffsetY;

            const endPoint = targetPos.clone();
            const direction = endPoint.clone().sub(startPoint);
            const distance = direction.length();

            if (distance <= 0.1) return null;

            const beamGeo = new THREE.PlaneGeometry(BEAM_WIDTH, 1);
            const beamMat = new THREE.MeshBasicMaterial({
                map: texture,
                transparent: true,
                depthTest: false,
                depthWrite: false,
                side: THREE.DoubleSide,
            });

            const beamMesh = new THREE.Mesh(beamGeo, beamMat);
            beamMesh.name = `beam_${enemy.id}`;
            beamMesh.renderOrder = 900;
            beamMesh.scale.y = distance;
            beamMesh.position.copy(startPoint).lerp(endPoint, 0.5);
            beamMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), direction.normalize());

            sceneRef.current.add(beamMesh);
            return beamMesh;
        }

        const updateBeamMesh = (beamMesh, startPosRaw, targetPos) => {
             if (!beamMesh || !startPosRaw || !targetPos) return;

             const startPoint = startPosRaw.clone();
             const beamOriginOffsetY = 25;
             startPoint.y += beamOriginOffsetY;

             const endPoint = targetPos.clone();
             const direction = endPoint.clone().sub(startPoint);
             const distance = direction.length();

             if (distance <= 0.1) {
                 beamMesh.visible = false;
                 return;
             }

             beamMesh.visible = true;
             beamMesh.scale.y = distance;
             beamMesh.position.copy(startPoint).lerp(endPoint, 0.5);
             beamMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), direction.normalize());
        }

        const removeBeamMesh = (enemy) => {
             if (enemy.beamEffectMesh && sceneRef.current) {
                 sceneRef.current.remove(enemy.beamEffectMesh);
                 enemy.beamEffectMesh.geometry?.dispose();
                 enemy.beamEffectMesh.material?.map?.dispose();
                 enemy.beamEffectMesh.material?.dispose();
                 enemy.beamEffectMesh = null;
             }
        }
        // --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ª—É—á–µ–π ---


        // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã ---
        const checkWinCondition = () => {
            if (!levelData?.winCondition || isLoading || levelStatus !== 'playing') return;

             if (enemiesState.length === 0 && initialEnemyStates?.length > 0 && areEnemiesLoaded) {
                  if (levelData.winCondition.type === 'clear_enemies') {
                      console.log("Win Condition Check: clear_enemies MET (enemiesState became empty)!");
                      winLevel();
                      return;
                  }
             }

            const { type, duration } = levelData.winCondition;

            switch (type) {
                 case 'clear_enemies': {
                     const liveEnemies = enemiesState?.filter(e => e.currentHp > 0) || [];
                     if (liveEnemies.length === 0 && enemiesState.length > 0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–∞–≥–∏ –≤–æ–æ–±—â–µ –±—ã–ª–∏
                         console.log("Win Condition Check: clear_enemies MET!");
                         winLevel();
                     }
                     break;
                 }
                 case 'defeat_all_bosses': {
                      const liveBosses = enemiesState?.filter(e => e.isBoss && e.currentHp > 0) || [];
                      const wereBosses = enemiesState?.some(e => e.isBoss);
                      if (liveBosses.length === 0 && wereBosses) {
                          console.log("Win Condition Check: defeat_all_bosses MET!");
                          winLevel();
                      }
                      break;
                 }
                 case 'survive_duration': {
                      if (levelStartTimeRef.current && duration) {
                          const elapsed = (Date.now() - levelStartTimeRef.current) / 1000;
                          const timeLeft = duration - elapsed;
                          setRemainingTime(timeLeft > 0 ? timeLeft : 0);
                          if (timeLeft <= 0) {
                              console.log("Win Condition Check: survive_duration MET!");
                              winLevel();
                          }
                      }
                      break;
                 }
                 default:
                     break;
            }
        }; // --- –ö–æ–Ω–µ—Ü checkWinCondition ---

        // --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–¥—Ä–∞ ---
        // --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–¥—Ä–∞ ---
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ THREE, HEALTH_BAR_WIDTH, levelConfig, playerStats, checkCollision, clamp, 
// createProjectile, handleEnemyHit, playerTakeDamage, removeBeamMesh, createPoisonCloud,
// checkWinCondition, loadedEnemyRefsArray (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤—Ä–∞–≥–æ–≤ —Å –ø–æ–ª—è–º–∏ isActive, isDead, pivot, stats, hpBar, mixer, type, id –∏ —Ç.–¥.),
// enemiesStateRef, playerObject, sceneRef, cameraRef, rendererRef, wallsRef, projectilesRef,
// enemyProjectilesRef, activeCloudsRef, clock, velocity, playerAttackCooldown,
// lastTimestamp, animationFrameId, levelStatus, setLevelStatus, playerHp,
// createBeamMeshFixed, updateBeamMesh, triggerGroundSpikes, (–∏ –≤–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –∏–∑ –ò–ò –≤—Ä–∞–≥–æ–≤)
// –£–ñ–ï –û–ü–†–ï–î–ï–õ–ï–ù–´ –ò –î–û–°–¢–£–ü–ù–´ –í –≠–¢–û–ô –û–ë–õ–ê–°–¢–ò –í–ò–î–ò–ú–û–°–¢–ò.

const animate = (timestamp) => {
    if (levelStatus !== 'playing') {
        console.log(`Game loop stopping. Status: ${levelStatus}`);
        if (animationFrameId.current) cancelAnimationFrame(animationFrameId.current);
        animationFrameId.current = null;
        clock.stop();
        return;
    }
    animationFrameId.current = requestAnimationFrame(animate);

    const dt = timestamp === 0 ? 0.016 : Math.min((timestamp - lastTimestamp) / 1000, 0.05);
    lastTimestamp = timestamp;
    
    const currentEnemiesState = enemiesStateRef.current;
    const playerPos = playerObject?.position;
    const currentScene = sceneRef.current;
    const currentCamera = cameraRef.current;
    const currentRenderer = rendererRef.current;
    
    if (!playerObject || !playerPos || !currentScene || !currentCamera || !currentRenderer || !levelConfig || !playerStats) {
        console.warn("–ü—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã");
        return;
    }
    
    // ==================================
    // === 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ò–≥—Ä–æ–∫–∞ =======
    // ==================================
    const effectiveSpeed = (playerStats.speed || 3) * (velocity.current.force > 0.1 ? 1 : 0);
    const speedMultiplier = 60;

    if (effectiveSpeed > 0) {
        const dx = (velocity.current.x || 0) * effectiveSpeed * dt * speedMultiplier;
        const dy = (velocity.current.y || 0) * effectiveSpeed * dt * speedMultiplier;

        let nextX = playerPos.x + dx;
        let nextY = playerPos.y + dy;
        const PLAYER_SIZE = { width: 30, height: 30 };

        const pRect = { x: playerPos.x - PLAYER_SIZE.width / 2, y: playerPos.y - PLAYER_SIZE.height / 2, width: PLAYER_SIZE.width, height: PLAYER_SIZE.height };
        let colX = false;
        let colY = false;
        const pRectX = { ...pRect, x: nextX - PLAYER_SIZE.width / 2 };
        for (const wall of wallsRef.current) { if (checkCollision(pRectX, wall)) { colX = true; break; } }
        const pRectY = { ...pRect, y: nextY - PLAYER_SIZE.height / 2 };
        for (const wall of wallsRef.current) { if (checkCollision(pRectY, wall)) { colY = true; break; } }

        if (!colX) playerPos.x = nextX;
        if (!colY) playerPos.y = nextY;

        const pSizeHW = PLAYER_SIZE.width / 2;
        const pSizeHH = PLAYER_SIZE.height / 2;
        const minX = -levelConfig.gameWorldWidth / 2 + pSizeHW;
        const maxX = levelConfig.gameWorldWidth / 2 - pSizeHW;
        const minYw = -levelConfig.WORLD_Y_OFFSET + pSizeHH;
        const maxYw = levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - pSizeHH;
        playerPos.x = clamp(playerPos.x, minX, maxX);
        playerPos.y = clamp(playerPos.y, minYw, maxYw);

        if (Math.abs(dx) > 0.01 || Math.abs(dy) > 0.01) {
            const angle = Math.atan2(dy, dx);
            let targetRotZ = angle - Math.PI / 2;
            const currentRotZ = playerObject.rotation.z;
            const twoPi = Math.PI * 2;
            let diff = targetRotZ - currentRotZ;
            while (diff < -Math.PI) diff += twoPi;
            while (diff > Math.PI) diff -= twoPi;
            const lerpFactor = 0.15;
            playerObject.rotation.z += diff * lerpFactor;
        }
    }
    playerObject.userData?.mixer?.update(dt); 

    // –í–Ω—É—Ç—Ä–∏ animate
let playerCurrentRoom = null;
if (playerObject?.position && levelData?.rooms) {
    const pX = playerObject.position.x;
    const pY = playerObject.position.y;

    for (const room of levelData.rooms) { // –ò–ª–∏ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ keys(worldRoomBoundariesRef.current)
        const bounds = worldRoomBoundariesRef.current[room.id];
        if (bounds &&
            pX >= bounds.xMinWorld && pX <= bounds.xMaxWorld &&
            pY >= bounds.yMinWorld && pY <= bounds.yMaxWorld) {
            playerCurrentRoom = room.id;
            break;
        }
    }
}

if (playerCurrentRoom && playerCurrentRoom !== currentActiveRoomId) {
    console.log(`Player entered new room: ${playerCurrentRoom}. Previously active: ${currentActiveRoomId}`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:
    // 1. –°–∫—Ä—ã—Ç—å —Ç—É–º–∞–Ω –¥–ª—è playerCurrentRoom
    if (fogOverlaysRef.current[playerCurrentRoom]) {
        fogOverlaysRef.current[playerCurrentRoom].visible = false;
    }
    // 2. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω—Å—Ç—Ä–æ–≤ –≤ playerCurrentRoom
    if (loadedEnemyRefsArray) { // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –º–∞—Å—Å–∏–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        loadedEnemyRefsArray.forEach(enemy => {
            if (enemy.roomId === playerCurrentRoom && !enemy.isActive) {
                enemy.isActive = true;
                if (enemy.pivot) {
                    enemy.pivot.visible = true; // –î–µ–ª–∞–µ–º –≤–∏–¥–∏–º—ã–º
                }
                console.log(`Enemy ${enemy.id} in room ${playerCurrentRoom} activated.`);
                if (enemy.aiState === 'SLEEPING' || !enemy.aiState) { // "–†–∞–∑–±—É–¥–∏—Ç—å" AI
                    enemy.aiState = 'IDLE';
                }
            }
        });
    }
    
    setCurrentActiveRoomId(playerCurrentRoom);
}

    // ==================================
    // === 2. –ê—Ç–∞–∫–∞ –ò–≥—Ä–æ–∫–∞ =============
    // ==================================
    playerAttackCooldown.current -= dt;
    if (playerAttackCooldown.current <= 0) {
        const interval = 1 / (playerStats.attackSpeed || 1.0);
        playerAttackCooldown.current = interval;
        const range = playerStats.attackRange || 150;
        const rangeSq = range * range;
        const target = findNearestEnemy(playerPos, rangeSq); 
        if (target) {
            createProjectile(target); 
        }
    }

    // ==================================
    // === 3. –°–Ω–∞—Ä—è–¥—ã –ò–≥—Ä–æ–∫–∞ ==========
    // ==================================
    const activeProjectiles = [];
    const enemyHitboxes = loadedEnemyRefsArray?.map(enemy => {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ enemy.isActive —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–µ—Å–ª–∏ –Ω–µ—Ç, —Å—á–∏—Ç–∞—Ç—å true –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å)
        // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ !enemy.isActive
        if (enemy?.pivot?.position && !enemy.isDead && (typeof enemy.isActive === 'undefined' || enemy.isActive)) {
            const size = 40; 
            return {
                id: enemy.id,
                type: enemy.type,
                ref: enemy, 
                x: enemy.pivot.position.x - size / 2,
                y: enemy.pivot.position.y - size / 2,
                width: size,
                height: size
            };
        } return null;
    }).filter(Boolean) || [];

    projectilesRef.current.forEach(proj => {
        proj.position.add(proj.velocity.clone().multiplyScalar(dt)); 
        proj.lifetime -= dt; 
        if (proj.mesh) proj.mesh.position.copy(proj.position); 

        let hit = false;
        if (proj.lifetime > 0 && enemyHitboxes.length > 0) {
            const projSize = 8;
            const pHitbox = { x: proj.position.x - projSize / 2, y: proj.position.y - projSize / 2, width: projSize, height: projSize };
            for (const eBox of enemyHitboxes) {
                if (checkCollision(pHitbox, eBox)) {
                    console.log(`>>> –°–ù–ê–†–Ø–î ${proj.id} –ü–û–ü–ê–õ –≤–æ –≤—Ä–∞–≥–∞ ${eBox.id}! –£—Ä–æ–Ω: ${proj.damage}`);
                    handleEnemyHit(eBox.id, proj.damage); 
                    hit = true;
                    break;
                }
            }
        }

        if (proj.lifetime > 0 && !hit) {
            activeProjectiles.push(proj);
        } else { 
            if (proj.mesh) {
                currentScene?.remove(proj.mesh);
                proj.mesh.geometry?.dispose();
                proj.mesh.material?.dispose();
            }
        }
    });
    projectilesRef.current = activeProjectiles; 

    // ==================================
    // === 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í—Ä–∞–≥–æ–≤ ========
    // ==================================
    loadedEnemyRefsArray?.forEach(enemy => {
        // +++ –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ò–ó –ö–û–î1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–º–µ—Ä—Ç–≤" +++
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 'enemy.isActive' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ï—Å–ª–∏ –Ω–µ—Ç, —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å.
        if (!enemy.isActive || enemy.isDead) {
            if (enemy.hpBar?.container) {
                enemy.hpBar.container.visible = false;
            }
            if (enemy.isDead && enemy.beamEffectMesh) { // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –º–µ—Ä—Ç–≤—ã—Ö
                 removeBeamMesh(enemy);
            }
            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –º–µ—Ä—Ç–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
        }
        // +++ –ö–û–ù–ï–¶ –í–ê–ñ–ù–û–ì–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ò–ó –ö–û–î1 +++

        // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç enemy.isActive === true –∏ enemy.isDead === false.
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ pivot –≤—Ä–∞–≥–∞ –≤–∏–¥–∏–º (–∏–∑ –∫–æ–¥1)
        if (enemy.pivot && !enemy.pivot.visible) {
             enemy.pivot.visible = true; 
        }

        const enemyState = currentEnemiesState.find(es => es.id === enemy.id);

        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–¥1 –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏ –∏–∑ –∫–æ–¥2)
        // isDead —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ.
        if (!enemy.pivot || !enemy.stats || !enemyState) {
            if (enemy.hpBar?.container) enemy.hpBar.container.visible = false;
            if (enemy.beamEffectMesh) removeBeamMesh(enemy); 
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –ø–æ HP –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–º–µ—Ä)
        if (enemyState.currentHp <= 0) {
            enemy.isDead = true; 
            console.log(`--- –í—Ä–∞–≥ ${enemy.id} (${enemy.type}) –ü–û–ú–ï–ß–ï–ù –ú–ï–†–¢–í–´–ú –≤ animate (HP=${enemyState.currentHp}) ---`);
            
            // --- –õ–û–ì–ò–ö–ê –ü–†–ò –°–ú–ï–†–¢–ò (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è) ---
            if (enemy.type === 'rotting_soldier' && !enemy.exploded) {
                console.log(`Rotting Soldier ${enemy.id} EXPLODES!`);
                const ePosOnDeath = enemy.pivot.position.clone();
                if (enemy.stats.explosionDamage && typeof playerTakeDamage === 'function') {
                    const explosionRadius = enemy.stats.explosionRadius || 50;
                    if (ePosOnDeath.distanceTo(playerPos) <= explosionRadius) {
                        console.log(`... Player takes ${enemy.stats.explosionDamage} explosion damage`);
                        playerTakeDamage(enemy.stats.explosionDamage);
                    }
                }
                createPoisonCloud(ePosOnDeath); 
                enemy.exploded = true;
                if (enemy.pivot) enemy.pivot.visible = false; 
            } else if (enemy.type === 'cursed_carrier') {
                // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–∑—ã–≤–∞ —Å—É—â–µ—Å—Ç–≤ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏ (–µ—Å–ª–∏ –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å –∫ —Å—É–º–º–æ–Ω–µ—Ä–∞–º)
                console.log(`Cursed Carrier ${enemy.id} —É–º–µ—Ä. TODO: –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–∑—ã–≤–∞ —Å—É—â–µ—Å—Ç–≤.`);
            }

            if (enemy.hpBar?.container) enemy.hpBar.container.visible = false; 
            if (enemy.beamEffectMesh) removeBeamMesh(enemy); 
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–∞–≥ —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–º–µ—Ä.
            // useEffect –¥–æ–ª–∂–µ–Ω –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤—Ä–∞–≥–æ–≤.
            return; 
        }

        // --- –ï—Å–ª–∏ –≤—Ä–∞–≥ –∂–∏–≤ –∏ –∞–∫—Ç–∏–≤–µ–Ω ---
        const ePivot = enemy.pivot;
        const ePos = ePivot.position;
        const eStats = enemy.stats;
        // const mixer = enemy.mixer; // enemy.mixer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∏–∂–µ

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π (–∏–∑ –∫–æ–¥1)
        enemy.mixer?.update(dt);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –•–µ–ª—Å–±–∞—Ä–∞ (–∏–∑ –∫–æ–¥1)
        if (enemy.hpBar?.container && enemy.hpBar?.fill && enemyState && enemyState.maxHp > 0) {
            enemy.hpBar.container.visible = true; 
            const hpPercent = Math.max(0, enemyState.currentHp / enemyState.maxHp);
            const fillMesh = enemy.hpBar.fill;
            const newScaleX = Math.max(0.001, hpPercent);
            fillMesh.scale.x = newScaleX;
            // HEALTH_BAR_WIDTH –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
            fillMesh.position.x = (HEALTH_BAR_WIDTH * (newScaleX - 1)) / 2; 
            if (cameraRef.current) { 
                enemy.hpBar.container.quaternion.copy(cameraRef.current.quaternion);
            }
        } else if (enemy.hpBar?.container) { 
            enemy.hpBar.container.visible = false;
        }
        
        // --- –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ò–ò, –¥–≤–∏–∂–µ–Ω–∏—è, –∞—Ç–∞–∫, –∫—É–ª–¥–∞—É–Ω–æ–≤ –∏–∑ –∫–æ–¥2 ---
        const dist = ePos.distanceTo(playerPos); // –†–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –¥–æ –∏–≥—Ä–æ–∫–∞
    
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–æ–≤
        if (enemy.attackCooldown > 0) enemy.attackCooldown -= dt;
        if (enemy.abilityCooldown > 0) enemy.abilityCooldown -= dt;
        if (typeof enemy.beamEffectTimer === 'number' && enemy.beamEffectTimer > 0) {
            enemy.beamEffectTimer -= dt;
            if (enemy.beamEffectTimer <= 0) {
                removeBeamMesh(enemy); 
            }
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ò–ò
        const rotateEnemyTowards = (targetPosition, rotationSpeed = 0.08) => {
            const direction = new THREE.Vector3().subVectors(targetPosition, ePos);
            if (direction.lengthSq() < 0.01) return; 
            const angle = Math.atan2(direction.y, direction.x);
            let targetZ = angle - Math.PI / 2; 
            const currentZ = ePivot.rotation.z;
            const twoPi = Math.PI * 2;
            let diff = targetZ - currentZ;
            while (diff <= -Math.PI) diff += twoPi;
            while (diff > Math.PI) diff -= twoPi;
            const threshold = 0.05; 
            if (Math.abs(diff) > threshold) {
                ePivot.rotation.z += diff * rotationSpeed; 
            } else {
                ePivot.rotation.z = targetZ; 
            }
            ePivot.rotation.order = 'XYZ';
            ePivot.rotation.x = 0;
            ePivot.rotation.y = 0;
        };

        const ENEMY_COLLISION_SIZE = { width: 30, height: 30 }; 

        const moveEnemyWithCollision = (directionVector, speedValue) => {
            if (typeof dt === 'undefined') console.error("DT IS UNDEFINED IN moveEnemyWithCollision!");
            if (speedValue <= 0) return { collidedX: false, collidedY: false };
            const moveDir = directionVector.clone().normalize();
            const moveAmount = speedValue * dt * 60; 

            const nextX = ePos.x + moveDir.x * moveAmount;
            const nextY = ePos.y + moveDir.y * moveAmount; 

            const enemyHitbox = {
                x: ePos.x - ENEMY_COLLISION_SIZE.width / 2,
                y: ePos.y - ENEMY_COLLISION_SIZE.height / 2,
                width: ENEMY_COLLISION_SIZE.width,
                height: ENEMY_COLLISION_SIZE.height
            };

            const nextHitboxX = { ...enemyHitbox, x: nextX - ENEMY_COLLISION_SIZE.width / 2 };
            let canMoveX = true;
            for (const wall of wallsRef.current) {
                if (checkCollision(nextHitboxX, wall)) {
                    canMoveX = false; break;
                }
            }

            const nextHitboxY = { ...enemyHitbox, y: nextY - ENEMY_COLLISION_SIZE.height / 2 };
            let canMoveY = true;
            for (const wall of wallsRef.current) {
                if (checkCollision(nextHitboxY, wall)) {
                    canMoveY = false; break;
                }
            }

            if (canMoveX) { ePos.x = nextX; }
            if (canMoveY) { ePos.y = nextY; }

            const eSizeHW = ENEMY_COLLISION_SIZE.width / 2;
            const eSizeHH = ENEMY_COLLISION_SIZE.height / 2;
            const minXb = -levelConfig.gameWorldWidth / 2 + eSizeHW;
            const maxXb = levelConfig.gameWorldWidth / 2 - eSizeHW;
            const minYwb = -levelConfig.WORLD_Y_OFFSET + eSizeHH;
            const maxYwb = levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - eSizeHH;
            ePos.x = clamp(ePos.x, minXb, maxXb);
            ePos.y = clamp(ePos.y, minYwb, maxYwb);

            return { collidedX: !canMoveX, collidedY: !canMoveY };
        };

        // –õ–û–ì–ò–ö–ê –ò–ò (–ø–æ —Ç–∏–ø–∞–º –≤—Ä–∞–≥–æ–≤) 
        let isAttacking = false; 
        switch (enemy.type) {
            // --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô CASE –î–õ–Ø –ú–ò–õ–ò-–ü–û–î–û–ë–ù–´–• ---
            case 'melee':
            case 'boss':
            case 'skeleton_swordsman':
            case 'cursed_gladiator':
            case 'revenant_knight':
            case 'rotting_soldier': // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ, –µ—Å–ª–∏ —É–º–µ—Ä. –ï—Å–ª–∏ –∂–∏–≤, —Ç–æ –ò–ò –∑–¥–µ—Å—å.
            case 'cursed_carrier':  // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ.
            {
                const eStats = enemy.stats;
                const atkRange = eStats.attackRange || 25;
                const aggroRange = atkRange * (eStats.aggroMultiplier || 5);
                const playerInAttackRange = dist <= atkRange;
                const playerInAggroRange = dist <= aggroRange;

                if (!enemy.aiState && !enemy.id.startsWith('summon_')) { 
                    enemy.aiState = 'IDLE';
                }
                if (!enemy.spawnPosition) enemy.spawnPosition = ePos.clone();
                const spawnPos = enemy.spawnPosition;
                const distToSpawn = spawnPos ? ePos.distanceTo(spawnPos) : 0;

                let nextState = enemy.aiState;
                const returnDelay = 3500; 

                switch (enemy.aiState) {
                    case 'IDLE':
                        if (playerInAggroRange) {
                            nextState = 'CHASING';
                            enemy.chaseEndTime = null; 
                        }
                        break;
                    case 'CHASING':
                        if (playerInAttackRange) {
                            nextState = 'ATTACKING';
                            enemy.chaseEndTime = null;
                        } else if (!playerInAggroRange) { 
                            if (!enemy.chaseEndTime) { 
                                enemy.chaseEndTime = Date.now() + returnDelay;
                                console.log(`Enemy ${enemy.id} –ø–æ—Ç–µ—Ä—è–ª –∏–≥—Ä–æ–∫–∞, —Ç–∞–π–º–µ—Ä –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω.`);
                            }
                            if (Date.now() >= enemy.chaseEndTime) { 
                                nextState = 'RETURNING';
                                console.log(`Enemy ${enemy.id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –±–∞–∑—É.`);
                                enemy.chaseEndTime = null;
                            }
                        } else { 
                            enemy.chaseEndTime = null; 
                        }
                        break;
                    case 'ATTACKING':
                        if (!playerInAttackRange) {
                            nextState = 'CHASING'; 
                        }
                        break;
                    case 'RETURNING':
                        if (playerInAggroRange) {
                            nextState = 'CHASING'; 
                            enemy.chaseEndTime = null;
                        } else if (distToSpawn < 10) { 
                            nextState = 'IDLE';
                            ePos.copy(spawnPos); 
                            ePivot.rotation.z = enemy.spawnRotationZ || 0; 
                            console.log(`Enemy ${enemy.id} –≤–µ—Ä–Ω—É–ª—Å—è.`);
                        }
                        break;
                }
                enemy.aiState = nextState;

                let shouldMove = false;
                let moveTargetPos = null;
                let shouldRotate = false;
                let rotateTargetPos = null;
                let isAttackingNow = false;
                let currentMoveSpeed = eStats.speed || 1.5; 
                let canAttack = true; 

                if (enemy.type === 'revenant_knight') {
                    if (typeof enemy.blockCharges === 'undefined') enemy.blockCharges = eStats.initialBlockCharges || 0;
                    if (enemy.blockCharges > 0) {
                        canAttack = false; 
                    }
                    if (enemy.shieldMesh) enemy.shieldMesh.visible = enemy.blockCharges > 0;
                }

                switch (enemy.aiState) {
                    case 'IDLE':
                        shouldMove = false; shouldRotate = false; break;
                    case 'CHASING':
                        shouldMove = true; moveTargetPos = playerPos.clone();
                        shouldRotate = true; rotateTargetPos = playerPos.clone();
                        currentMoveSpeed = eStats.speed || 1.5;
                        break;
                    case 'ATTACKING':
                        shouldMove = false; 
                        shouldRotate = true; rotateTargetPos = playerPos.clone();
                        if (enemy.attackCooldown <= 0 && canAttack) {
                            isAttackingNow = true; 
                        }
                        break;
                    case 'RETURNING':
                        shouldMove = true; moveTargetPos = spawnPos.clone();
                        shouldRotate = true; rotateTargetPos = spawnPos.clone();
                        currentMoveSpeed = (eStats.speed || 1.5) * 0.8; 
                        break;
                }

                if (isAttackingNow) {
                    let currentDamage = eStats.damage || 5;
                    console.log(`${enemy.id} (${enemy.type}) attacks player! Damage: ${currentDamage}`);
                    if (typeof playerTakeDamage === 'function') playerTakeDamage(currentDamage);
                    enemy.attackCooldown = 1 / (eStats.attackSpeed || 1.0); 
                }

                if (shouldMove && moveTargetPos) {
                    const direction = new THREE.Vector3().subVectors(moveTargetPos, ePos);
                    moveEnemyWithCollision(direction, currentMoveSpeed);
                }

                if (shouldRotate && rotateTargetPos) {
                    rotateEnemyTowards(rotateTargetPos);
                }
                break; 
            }

            // === –î–ê–õ–¨–ù–ò–ô –ë–û–ô (–°–Ω–∞—Ä—è–¥—ã - –õ—É—á–Ω–∏–∫) ===
            case 'ranged':
            case 'skeleton_archer':
            {
                const eStats = enemy.stats;
                const atkRange = eStats.attackRange || 100;
                const playerInAttackRange = dist <= atkRange;
                const currentMoveSpeed = eStats.speed || 1.0; 

                if (typeof enemy.patrolWaitTimer === 'undefined') enemy.patrolWaitTimer = 0;
                if (!enemy.patrolTargetPosition) enemy.patrolTargetPosition = null;
                if (!enemy.spawnPosition) enemy.spawnPosition = ePos.clone();

                let shouldRotate = false;
                let rotateTargetPos = null;
                let shouldMove = false;
                let moveTargetPos = null;
                let isAttackingNow = false;

                if (playerInAttackRange) {
                    shouldRotate = true; rotateTargetPos = playerPos.clone();
                    enemy.patrolTargetPosition = null; 
                    enemy.patrolWaitTimer = 0;
                    shouldMove = false; 
                    if (enemy.attackCooldown <= 0) {
                        isAttackingNow = true;
                    }
                } else {
                    if (enemy.patrolWaitTimer > 0) {
                        enemy.patrolWaitTimer -= dt;
                        shouldMove = false; shouldRotate = false;
                    } else if (enemy.patrolTargetPosition) {
                        const distToPatrolTarget = ePos.distanceTo(enemy.patrolTargetPosition);
                        if (distToPatrolTarget < 10) { 
                            enemy.patrolTargetPosition = null;
                            enemy.patrolWaitTimer = 1.5 + Math.random() * 2; 
                            shouldMove = false; shouldRotate = false;
                        } else { 
                            shouldMove = true; moveTargetPos = enemy.patrolTargetPosition.clone();
                            shouldRotate = true; rotateTargetPos = enemy.patrolTargetPosition.clone();
                        }
                    } else {
                        const PATROL_RADIUS = 150;
                        const randomAngle = Math.random() * Math.PI * 2;
                        const randomDist = Math.random() * PATROL_RADIUS;
                        const targetX = enemy.spawnPosition.x + Math.cos(randomAngle) * randomDist;
                        const targetY = enemy.spawnPosition.y + Math.sin(randomAngle) * randomDist;
                        enemy.patrolTargetPosition = new THREE.Vector3(targetX, targetY, 0);
                        console.log(`Enemy ${enemy.id} new patrol target: (${targetX.toFixed(0)}, ${targetY.toFixed(0)})`);
                        shouldMove = true; moveTargetPos = enemy.patrolTargetPosition.clone();
                        shouldRotate = true; rotateTargetPos = enemy.patrolTargetPosition.clone();
                    }
                }

                if (isAttackingNow) {
                    console.log(`${enemy.id} firing projectile!`);
                    // createEnemyProjectile(enemy, playerPos); // –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞ –≤—Ä–∞–≥–∞
                    enemy.attackCooldown = 1 / (eStats.attackSpeed || 0.8);
                }
                if (shouldMove && moveTargetPos) {
                    const direction = new THREE.Vector3().subVectors(moveTargetPos, ePos);
                    moveEnemyWithCollision(direction, currentMoveSpeed);
                }
                if (shouldRotate && rotateTargetPos) {
                    rotateEnemyTowards(rotateTargetPos);
                }
                break; 
            }

            // === –ö–ê–°–¢–ï–†–´ (–ú–∞–≥–∏, –ß–∞—Ä–æ–¥–µ–∏ –∏ —Ç.–¥.) ===
            case 'caster':
            case 'ghostly_enchanter':
            case 'ogre_mage':
            {
                const currentAtkRange = eStats.attackRange || 300;
                const isPlayerInAttackRange = dist <= currentAtkRange;

                if (isPlayerInAttackRange) {
                    rotateEnemyTowards(playerPos); 
                    if (enemy.attackCooldown <= 0) {
                        enemy.attackCooldown = 1 / (eStats.attackSpeed || 0.5);
                        if (enemy.type === 'ogre_mage') {
                            // createProjectileToPoint(enemy.id, ePos.clone(), playerPos.clone(), eStats.damage || 10, eStats.projectileSpeed || 400);
                            console.log(`Ogre Mage ${enemy.id} attacks target point!`);
                        } else if (enemy.type === 'ghostly_enchanter') {
                            // applyPlayerDebuff(enemy.id, 'weaken', eStats.debuffDuration || 5, eStats.debuffStrength || 0.2);
                            console.log(`Enchanter ${enemy.id} applies weaken!`);
                        } else { 
                            if (typeof playerTakeDamage === 'function') playerTakeDamage(eStats.beamDamage || 1); 
                            if (enemy.beamEffectMesh) removeBeamMesh(enemy); 
                            // enemy.beamEffectMesh = createBeamMeshFixed(enemy, playerPos); 
                            if (enemy.beamEffectMesh) enemy.beamEffectTimer = eStats.beamEffectDuration || 1.0; 
                        }
                    } else {
                        if (enemy.beamEffectMesh && (enemy.type === 'caster')) {
                            // updateBeamMesh(enemy.beamEffectMesh, ePos, playerPos); 
                        }
                    }
                } else { 
                    if (enemy.beamEffectMesh) removeBeamMesh(enemy); 
                }
                break;
            }

            // === –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ù–û–í–´–ï –¢–ò–ü–´ (–∏–∑ code1, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ) ===
            case 'bone_dancer': 
            // ... (–õ–æ–≥–∏–∫–∞ –¥–ª—è bone_dancer –∏–∑ –≤–∞—à–µ–≥–æ code2, –æ–Ω–∞ –¥–æ–≤–æ–ª—å–Ω–æ –æ–±—ä–µ–º–Ω–∞—è –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è) ...
            // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç rotateEnemyTowards –∏ moveEnemyWithCollision,
            // –∞ —Ç–∞–∫–∂–µ dt –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤ –∏ –∞–Ω–∏–º–∞—Ü–∏–π.
            // –í–ê–ñ–ù–û: –õ–æ–≥–∏–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è bone_dancer –≤ –∫–æ–Ω—Ü–µ –µ–≥–æ case –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞,
            // —Ç–∞–∫ –∫–∞–∫ –æ–±—â–µ–µ `enemy.mixer?.update(dt);` —É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ.
            // –õ–∏–±–æ, –µ—Å–ª–∏ —É bone_dancer –µ—Å—Ç—å —Å–≤–æ—è –ª–æ–≥–∏–∫–∞ `switchAction`, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–µ—Å—å.
            { // –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –¥–ª—è bone_dancer –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞
                const eStats = enemy.stats;
                const baseSpeed = (eStats.speed || 3.5) * 60; 
                const rotationLerp = 0.15; 
                const activationRange = eStats.activationRange || 200; 
                const chargeSpeedMultiplier = eStats.chargeMultiplier || 3.0; 
                const chargeDuration = eStats.chargeDuration || 0.25;
                const desiredOrbitDist = eStats.orbitDistance || 60;

                let shouldMove = false;
                let shouldRotate = true;
                let moveTargetPos = null; 
                let rotateTargetPos = playerPos.clone(); 
                let currentMoveSpeed = baseSpeed; 

                const vectorToPlayer = new THREE.Vector3().subVectors(playerPos, ePos);
                const currentDistToPlayer = vectorToPlayer.length(); 

                if (!enemy.aiState) enemy.aiState = 'IDLE';
                if (typeof enemy.chargeTimer === 'undefined') enemy.chargeTimer = 0;
                if (!enemy.spawnPosition) enemy.spawnPosition = ePos.clone();
                
                switch (enemy.aiState) {
                    case 'IDLE':
                        shouldMove = false; shouldRotate = false;
                        if (currentDistToPlayer <= activationRange) {
                            console.log(`Bone Dancer ${enemy.id} activated! Charging!`);
                            enemy.aiState = 'CHARGING';
                            enemy.chargeTargetPos = playerPos.clone();
                            enemy.chargeTimer = 0;
                        }
                        break;
                    case 'CHARGING':
                        shouldMove = true; shouldRotate = true;
                        moveTargetPos = enemy.chargeTargetPos || playerPos.clone();
                        rotateTargetPos = moveTargetPos; 
                        currentMoveSpeed = baseSpeed * chargeSpeedMultiplier; 
                        enemy.chargeTimer += dt;
                        if (enemy.chargeTimer >= chargeDuration) {
                            console.log(`Bone Dancer ${enemy.id} finished charge, orbiting.`);
                            enemy.aiState = 'ORBITING';
                            enemy.chargeTimer = 0;
                            enemy.orbitDirection = (Math.random() < 0.5 ? 1 : -1);
                        }
                        break;
                    case 'ORBITING':
                        shouldMove = true; shouldRotate = true;
                        rotateTargetPos = playerPos.clone(); 
                        if (currentDistToPlayer > 0.1) {
                            const normDirToPlayer = vectorToPlayer.clone().normalize();
                            let vecPlayerToEnemy = vectorToPlayer.clone().negate();
                            const normVecPlayerToEnemy = vecPlayerToEnemy.normalize();
                            const idealOrbitPoint = playerPos.clone().add(normVecPlayerToEnemy.multiplyScalar(desiredOrbitDist));
                            const normTangentDir = new THREE.Vector3(-normDirToPlayer.y, normDirToPlayer.x, 0).multiplyScalar(enemy.orbitDirection);
                            const vecToIdealOrbit = new THREE.Vector3().subVectors(idealOrbitPoint, ePos);
                            const distToIdealOrbit = vecToIdealOrbit.length();
                            const tangentVelocity = normTangentDir.clone().multiplyScalar(baseSpeed);
                            const correctionSpeed = Math.min(baseSpeed, distToIdealOrbit * 2.0); 
                            const correctionVelocity = vecToIdealOrbit.normalize().multiplyScalar(correctionSpeed);
                            const finalVelocity = tangentVelocity.add(correctionVelocity); 
                            finalVelocity.clampLength(0, baseSpeed * 1.5); 
                            moveTargetPos = ePos.clone().add(finalVelocity.clone().multiplyScalar(dt)); 
                            currentMoveSpeed = finalVelocity.length(); 
                            if (currentMoveSpeed < 1) { 
                                shouldMove = false;
                            }
                        } else { 
                            shouldMove = false; shouldRotate = false; 
                        }
                        break; 
                } 
                
                if (shouldMove && moveTargetPos) {
                    let moveDir = new THREE.Vector3().subVectors(moveTargetPos, ePos);
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º moveEnemyWithCollision, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ç–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
                    if (moveDir.lengthSq() > 0.001) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                       moveEnemyWithCollision(moveDir, currentMoveSpeed / 60 ); // moveEnemyWithCollision –æ–∂–∏–¥–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≤ —É—Å–ª–æ–≤–Ω—ã—Ö —é–Ω–∏—Ç–∞—Ö/dt*60
                    }
                }
                if (shouldRotate && rotateTargetPos) {
                    rotateEnemyTowards(rotateTargetPos, rotationLerp); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π lerp –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
                }
                // –õ–æ–≥–∏–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è bone_dancer (–µ—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞)
                // let nextActionName = 'Idle'; // ... –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ switchAction
                // switchAction(enemy, nextActionName);
            } // –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ bone_dancer
            break;

            case 'plague_totemist': {
                rotateEnemyTowards(playerPos); 
                if (enemy.abilityCooldown <= 0) {
                    console.log(`Totemist ${enemy.id} places a ${eStats.totemType || 'debuff'} totem!`);
                    // placeTotem(enemy.id, ePos.clone(), eStats.totemType || 'debuff_slow', eStats.totemDuration || 15.0, eStats.totemRange || 120, eStats.totemEffect || { slowPercent: 0.3 });
                    enemy.abilityCooldown = eStats.totemCooldown || 12.0;
                }
                break;
            }
            case 'sand_reaper': {
                const eStats = enemy.stats;
                rotateEnemyTowards(playerPos.clone());
                if (enemy.abilityCooldown <= 0) {
                    console.log(`Sand Reaper ${enemy.id} summons spikes under player!`);
                    // triggerGroundSpikes(enemy.id, playerPos.clone(), eStats.spikeDelay || 1.0, eStats.spikeRadius || 30, eStats.spikeDamage || 15);
                    enemy.abilityCooldown = eStats.abilityCooldown || 5.0; 
                }
                break; 
            } 
            case 'poison_cultist': {
                rotateEnemyTowards(playerPos); 
                const currentAtkRange = eStats.attackRange || 200;
                if (dist <= currentAtkRange && enemy.abilityCooldown <= 0) {
                    console.log(`Cultist ${enemy.id} throws poison puddle!`);
                    // createPoisonPuddle(enemy.id, playerPos.clone(), eStats.puddleDuration || 10.0, eStats.puddleRadius || 50, eStats.puddleDps || 3); 
                    enemy.abilityCooldown = eStats.abilityCooldown || 8.0;
                }
                break;
            }
            default:
                console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø –≤—Ä–∞–≥–∞ –≤ switch: ${enemy.type}`);
                break;
        } // --- –ö–æ–Ω–µ—Ü switch(enemy.type) ---
    }); // --- –ö–æ–Ω–µ—Ü loadedEnemyRefsArray.forEach ---

    // ==================================
    // === 5. –°–Ω–∞—Ä—è–¥—ã –í—Ä–∞–≥–æ–≤ ==========
    // ==================================
    const activeEnemyProjectiles = [];
    const PLAYER_HITBOX_SIZE = { width: 25, height: 25 }; 
    const playerHitboxForEnemyProj = playerObject ? {
        x: playerPos.x - PLAYER_HITBOX_SIZE.width / 2,
        y: playerPos.y - PLAYER_HITBOX_SIZE.height / 2,
        width: PLAYER_HITBOX_SIZE.width,
        height: PLAYER_HITBOX_SIZE.height
    } : null;

    if (playerHitboxForEnemyProj && playerHp > 0) { // playerHp - –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–ª–∏ –∏–∑ playerStats
        enemyProjectilesRef.current.forEach(proj => {
            proj.position.add(proj.velocity.clone().multiplyScalar(dt)); 
            proj.lifetime -= dt; 
            if (proj.mesh) {
                proj.mesh.position.copy(proj.position); 
                proj.mesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), proj.velocity.clone().normalize());
            }

            let hitPlayer = false;
            if (proj.lifetime > 0) {
                const projSize = 10; 
                const projHitbox = { x: proj.position.x - projSize / 2, y: proj.position.y - projSize / 2, width: projSize, height: projSize };
                if (checkCollision(projHitbox, playerHitboxForEnemyProj)) {
                    if (typeof playerTakeDamage === 'function') {
                        playerTakeDamage(proj.damage); 
                    } else { console.error("playerTakeDamage is not a function!"); }
                    hitPlayer = true;
                }
            }

            if (proj.lifetime > 0 && !hitPlayer) {
                activeEnemyProjectiles.push(proj);
            } else { 
                if (proj.mesh) {
                    currentScene?.remove(proj.mesh);
                    proj.mesh.geometry?.dispose();
                    proj.mesh.material?.dispose();
                }
            }
        });
        enemyProjectilesRef.current = activeEnemyProjectiles; 
    } else { 
        enemyProjectilesRef.current.forEach(proj => {
            if (proj.mesh) {
                currentScene?.remove(proj.mesh);
                proj.mesh.geometry?.dispose();
                proj.mesh.material?.dispose();
            }
        });
        enemyProjectilesRef.current = [];
    }

    // =====================================================
    // === 5.1 –û–ë–†–ê–ë–û–¢–ö–ê –ê–ö–¢–ò–í–ù–´–• –Ø–î–û–í–ò–¢–´–• –û–ë–õ–ê–ö–û–í (–ò–ó –ö–û–î1) ===
    // =====================================================
    const now = Date.now();
    const remainingClouds = [];
    activeCloudsRef.current.forEach(cloud => {
        if (now < cloud.endTime) { 
            remainingClouds.push(cloud);
            if (playerPos && typeof playerTakeDamage === 'function' && playerHp > 0) {
                const distSq = playerPos.distanceToSquared(cloud.position);
                if (distSq <= cloud.radiusSq) { 
                    const damage = cloud.dps * dt; 
                    playerTakeDamage(damage);
                }
            }
        } else { 
            currentScene?.remove(cloud.mesh); 
            cloud.mesh.geometry?.dispose();  
            cloud.mesh.material?.dispose();  
            console.log("‚òÅÔ∏è Poison cloud expired and removed.");
        }
    });
    if (remainingClouds.length !== activeCloudsRef.current.length) {
        activeCloudsRef.current = remainingClouds;
    }

    // ==================================
    // === 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–æ–±–µ–¥—ã/–ü—Ä–æ–∏–≥—Ä—ã—à–∞ =
    // ==================================
    checkWinCondition(); 

    // ==================================
    // === 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ö–∞–º–µ—Ä—ã ========
    // ==================================
    if (playerObject && currentCamera && levelConfig) {
        const camWidth = currentCamera.right - currentCamera.left;
        const camHeight = currentCamera.top - currentCamera.bottom;
        const targetXCam = clamp(
            playerPos.x,
            -levelConfig.gameWorldWidth / 2 + camWidth / 2,
            levelConfig.gameWorldWidth / 2 - camWidth / 2
        );
        const targetYCam = clamp(
            playerPos.y,
            -levelConfig.WORLD_Y_OFFSET + camHeight / 2,
            levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - camHeight / 2
        );
        currentCamera.position.lerp(new THREE.Vector3(targetXCam, targetYCam, currentCamera.position.z), 0.1);
    }

    // ==================================
    // === 8. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ =================
    // ==================================
    if (currentRenderer && currentScene && currentCamera) {
        try {
            currentRenderer.render(currentScene, currentCamera); 
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:", error);
            setLevelStatus('error'); 
            if(animationFrameId.current) cancelAnimationFrame(animationFrameId.current); 
            animationFrameId.current = null;
            clock.stop();
        }
    }
}; // --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ animate ---

        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
        if (!animationFrameId.current) {
            clock.start();
            lastTimestamp = performance.now();
            animationFrameId.current = requestAnimationFrame(animate);
        }

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è useEffect –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        return () => {
            console.log(`--- –û–ß–ò–°–¢–ö–ê –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ Effect! –°—Ç–∞—Ç—É—Å: ${levelStatus}. –¢–∞–π–º–µ—Ä–æ–≤ –≤ —Ä–µ—Ñ–µ: ${effectTimersRef.current.length} ---`); // <<< –î–û–ë–ê–í–¨ –õ–û–ì
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current);
                animationFrameId.current = null;
            }
            clock.stop();
            // –û—á–∏—Å—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
             projectilesRef.current.forEach(p => p.mesh && sceneRef.current?.remove(p.mesh));
             projectilesRef.current = [];
             enemyProjectilesRef.current.forEach(p => p.mesh && sceneRef.current?.remove(p.mesh));
             enemyProjectilesRef.current = [];
             loadedEnemyRefsArray?.forEach(e => { if (e?.beamEffectMesh) removeBeamMesh(e); }); // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ e
             effectTimersRef.current.forEach(timerId => clearTimeout(timerId));
             effectTimersRef.current = [];
        };
    }, [isLoading, levelStatus, playerObject, levelData]);

    if (!fogMaterialRef.current && sceneRef.current) { // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ sceneRef, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ Three.js –≥–æ—Ç–æ–≤–æ
        console.log("[Level.jsx] Creating fog material");
        fogMaterialRef.current = new THREE.MeshBasicMaterial({
            color: 0x000000, // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç
            transparent: true,
            opacity: 0.8,    // –°—Ç–µ–ø–µ–Ω—å –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ (0.0 –¥–æ 1.0)
            depthWrite: false // –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        });
    }

    // === 11. –†–ï–ù–î–ï–† JSX ===
    return (
        <div className="game-wrapper">
            {/* –û–≤–µ—Ä–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {isLoading && <LoadingScreen />}

            {/* –ò–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */}
            <div className="game-container" style={{ visibility: isLoading ? 'hidden' : 'visible' }}>
                {/* HP –∏–≥—Ä–æ–∫–∞ */}
                {!isLoading && playerObject && typeof playerHp === 'number' && typeof displayMaxHp === 'number' && (
                    <div style={{ position: 'absolute', top: '10px', left: '10px', zIndex: 100 }}> {/* –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
                         <HealthBar currentHp={playerHp} maxHp={displayMaxHp} />
                    </div>
                )}
                {/* –¢–∞–π–º–µ—Ä –≤—ã–∂–∏–≤–∞–Ω–∏—è */}
                {!isLoading && levelData?.winCondition?.type === 'survive_duration' && remainingTime !== null && levelStatus === 'playing' && (
                     <div className="survival-timer"> –í—ã–∂–∏—Ç—å: {Math.ceil(remainingTime)} —Å–µ–∫ </div>
                 )}
                {/* –ú–µ—Å—Ç–æ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ Three.js */}
                <div ref={mountRef} className="game-canvas"></div>
            </div>

            {/* –î–∂–æ–π—Å—Ç–∏–∫ */}
            <div id="joystick-container" className="joystick-container" style={{ visibility: isLoading ? 'hidden' : 'visible' }}></div>

            {/* –ü–æ–ø–∞–ø –ü–æ—Ä–∞–∂–µ–Ω–∏—è */}
            {levelStatus === 'lost' && (
                <GameOverPopup
                    onGoToMenu={() => {
                        if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'lost');
                        else console.warn("onLevelComplete –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
                    }}
                />
            )}

            {/* –ü–æ–ø–∞–ø –ü–æ–±–µ–¥—ã */}
            {levelStatus === 'won' && (
                 <div className="level-complete-overlay">
                     <h2>–ü–æ–±–µ–¥–∞!</h2>
                     <p>–£—Ä–æ–≤–µ–Ω—å {levelData.id} ({difficulty}) –ø—Ä–æ–π–¥–µ–Ω!</p>
                     <button onClick={() => {
                         if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'won');
                         else console.warn("onLevelComplete –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
                     }}>
                         –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                     </button>
                 </div>
             )}

             {/* –ü–æ–ø–∞–ø –û—à–∏–±–∫–∏ */}
             {levelStatus === 'error' && (
                  <div className="level-error-overlay">
                      <h2>–û—à–∏–±–∫–∞</h2>
                      <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ —É—Ä–æ–≤–Ω—è.</p>
                      <button onClick={() => {
                          if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'error');
                          else console.warn("onLevelComplete –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
                      }}>
                          –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                      </button>
                  </div>
              )}
        </div> // –ó–∞–∫—Ä—ã—Ç–∏–µ game-wrapper
    ); // –ó–∞–∫—Ä—ã—Ç–∏–µ return
}; // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Level

export default Level;