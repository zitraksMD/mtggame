// src/components/Level.jsx
import * as THREE from "three";
import React, { useEffect, useRef, useState, useCallback, useMemo } from "react";
import nipplejs from "nipplejs";
import './Styles.scss'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –∏–∑ code1
import useGameStore from '../store/useGameStore';
import usePlayerLoader from './usePlayerLoader';
import useEnemyLoader from './useEnemyLoader'; // –ò–º–ø–æ—Ä—Ç –∏–∑ code1
import GameOverPopup from './GameOverPopup';
import LoadingScreen from "./LoadingScreen"; // –ò–º–ø–æ—Ä—Ç –∏–∑ code1 (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏)
import { clamp, checkCollision, convertTiledX, convertTiledY, DEFAULT_WORLD_WIDTH, DEFAULT_WORLD_HEIGHT } from './utils';

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const HEALTH_BAR_WIDTH = 30; // –ò–∑ code1
const HEALTH_BAR_HEIGHT = 4; // –ò–∑ code1
const HEALTH_BAR_OFFSET_Y = 25; // –ò–∑ code1 (–∏–ª–∏ –ø–æ–¥–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ª—É—á–µ–π –æ—Å—Ç–∞—é—Ç—Å—è –∏–∑ code2
const BEAM_WIDTH = 15;
const BEAM_TEXTURE_FIRE = '/assets/fire-beam.png'; // <<<--- –£–ö–ê–ñ–ò –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨
const BEAM_TEXTURE_ICE = '/assets/ice-beam.png';   // <<<--- –£–ö–ê–ñ–ò –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç HealthBar (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –∏–∑ code2, –Ω–æ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª) ---
const HealthBar = ({ currentHp, maxHp }) => {
    const healthPercent = maxHp > 0 ? Math.max(0, (currentHp / maxHp) * 100) : 0;
    return (
        <div className="health-bar-container">
            <div className="health-bar" style={{ width: `${healthPercent}%` }}></div>
        </div>
    );
};
// ---------------------------------------------

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –º–∏—Ä–∞ (–∏–∑ code1) ---
const getWorldDimensions = (levelData) => {
    const gameWorldWidth = levelData?.width || DEFAULT_WORLD_WIDTH;
    const gameWorldHeight = levelData?.height || DEFAULT_WORLD_HEIGHT;
    const WORLD_Y_OFFSET = gameWorldHeight / 2;
    return { gameWorldWidth, gameWorldHeight, WORLD_Y_OFFSET };
};
// ---------------------------------------------

// === –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –£—Ä–æ–≤–Ω—è ===
const Level = ({ levelData, onLevelComplete, onReady, difficulty = 'normal' }) => {

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ levelData –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ (–∏–∑ code1) ---
    if (!levelData || typeof levelData.id === 'undefined') {
        console.error("[Level.jsx] –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ levelData!", levelData);
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –ª–æ–∞–¥–µ—Ä
        return <div className="level-screen error">–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è!</div>;
        // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ code2:
        // return <div className="error-message">–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è!</div>;
    }

    // === –†–µ—Ñ—ã (–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ code1 –∏ code2) ===
    const mountRef = useRef(null);
    const cameraRef = useRef(null);
    const sceneRef = useRef(null);
    const rendererRef = useRef(null);
    const joystickRef = useRef(null);
    const animationFrameId = useRef(null);
    const wallsRef = useRef([]);
    const projectilesRef = useRef([]); // –°–Ω–∞—Ä—è–¥—ã –∏–≥—Ä–æ–∫–∞
    const velocity = useRef({ x: 0, y: 0, force: 0 });
    const playerAttackCooldown = useRef(0);
    const levelStartTimeRef = useRef(null);
    const readyCalledRef = useRef(false);
    const enemyProjectilesRef = useRef([]); // –°–Ω–∞—Ä—è–¥—ã –≤—Ä–∞–≥–æ–≤ (–∏–∑ code2)
    const beamTexturesRef = useRef({});
    const backgroundMeshRef = useRef(null); // –†–µ—Ñ –¥–ª—è —Ñ–æ–Ω–∞ (–∏–∑ code1)

    // === –°–æ—Å—Ç–æ—è–Ω–∏—è (–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ code1 –∏ code2) ===
    const [isLoading, setIsLoading] = useState(true); // –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–∏
    const [levelStatus, setLevelStatus] = useState('playing');
    const [enemiesState, setEnemiesState] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ HP –≤—Ä–∞–≥–æ–≤
    const [remainingTime, setRemainingTime] = useState(null);
    const [beamTexturesLoaded, setBeamTexturesLoaded] = useState(false); // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä –ª—É—á–µ–π

    // === –ì–ª–æ–±–∞–ª—å–Ω—ã–π –°—Ç–æ—Ä (–∏–∑ code2, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π –∏–∑ code1) ===
    const {
        playerHp,
        displayMaxHp, // computedStats().hp
        playerStats,  // computedStats()
        playerTakeDamage,
        initializeLevelHp
    } = useGameStore(state => ({
        playerHp: state.playerHp,
        displayMaxHp: state.computedStats().hp, // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ computedStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç hp
        playerStats: state.computedStats(),     // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ computedStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—ã–µ —Å—Ç–∞—Ç—ã (skin, attack, speed, attackSpeed, attackRange, critChance, critMultiplier, doubleStrikeChance)
        playerTakeDamage: state.playerTakeDamage,
        initializeLevelHp: state.initializeLevelHp,
    }));

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HP –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è (–∏–∑ code1) ---
    useEffect(() => {
        console.log(`[Level ${levelData.id}] Mount/Data Change: –í—ã–∑–æ–≤ initializeLevelHp()`);
        if (typeof initializeLevelHp === 'function') {
             initializeLevelHp();
        } else {
            console.error("–û–®–ò–ë–ö–ê: initializeLevelHp –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è!");
        }
        setLevelStatus('playing'); // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
        readyCalledRef.current = false; // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    }, [initializeLevelHp, levelData.id]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç ID —É—Ä–æ–≤–Ω—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏

    // --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –£—Ä–æ–≤–Ω—è (useMemo –∏–∑ code1) ---
    const levelConfig = useMemo(() => {
        console.log("[Level.jsx] Calculating levelConfig");
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ levelData —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return getWorldDimensions(levelData);
    }, [levelData?.width, levelData?.height]); // –ó–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –ª—É—á–µ–π (–∏–∑ code2) ---
    useEffect(() => {
        const textureLoader = new THREE.TextureLoader();
        let fireLoaded = false;
        let iceLoaded = false;
        let mounted = true;

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –ª—É—á–µ–π...");

        const checkTexLoadComplete = () => {
            if (fireLoaded && iceLoaded && mounted) {
                console.log("‚úÖ –¢–µ–∫—Å—Ç—É—Ä—ã –ª—É—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
                setBeamTexturesLoaded(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –≤—Å–µ –≥–æ—Ç–æ–≤–æ
            }
        };

        textureLoader.load(
            BEAM_TEXTURE_FIRE,
            (texture) => {
                if (!mounted) return;
                console.log("üî• –¢–µ–∫—Å—Ç—É—Ä–∞ –û–≥–Ω—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                texture.encoding = THREE.sRGBEncoding; // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞
                beamTexturesRef.current.fire = texture;
                fireLoaded = true;
                checkTexLoadComplete();
            },
            undefined,
            (error) => {
                if (!mounted) return;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${BEAM_TEXTURE_FIRE}:`, error);
                fireLoaded = true; // –°—á–∏—Ç–∞–µ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º" –¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π
                checkTexLoadComplete();
            }
        );

        textureLoader.load(
            BEAM_TEXTURE_ICE,
            (texture) => {
                if (!mounted) return;
                console.log("‚ùÑÔ∏è –¢–µ–∫—Å—Ç—É—Ä–∞ –õ—å–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                texture.encoding = THREE.sRGBEncoding;
                beamTexturesRef.current.ice = texture;
                iceLoaded = true;
                checkTexLoadComplete();
            },
            undefined,
            (error) => {
                if (!mounted) return;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${BEAM_TEXTURE_ICE}:`, error);
                iceLoaded = true; // –°—á–∏—Ç–∞–µ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º" –¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π
                checkTexLoadComplete();
            }
        );

        return () => {
            mounted = false;
            // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å –ø–∞–º—è—Ç—å —Å—Ä–∞–∑—É)
            beamTexturesRef.current.fire?.dispose();
            beamTexturesRef.current.ice?.dispose();
            beamTexturesRef.current = {};
            setBeamTexturesLoaded(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        }
    }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –°—Ü–µ–Ω—ã, –†–µ–Ω–¥–µ—Ä–µ—Ä–∞, –ö–∞–º–µ—Ä—ã ---
    useEffect(() => {
        console.log("[Level.jsx] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã Three.js");
        const scene = new THREE.Scene();
        sceneRef.current = scene;

        const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 2000);
        camera.position.set(0, 0, 1000); // Z –ø–æ–¥–∞–ª—å—à–µ –¥–ª—è –æ—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π
        cameraRef.current = camera;

        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.outputEncoding = THREE.sRGBEncoding; // –ö–∞–∫ –≤ code2
        rendererRef.current = renderer;

        const mountPoint = mountRef.current;
        if (!mountPoint) { console.error("Mount point not found!"); setLevelStatus('error'); return; }

        mountPoint.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        mountPoint.appendChild(renderer.domElement);

        const handleResize = () => {
            if (!mountRef.current || !rendererRef.current || !cameraRef.current) return;
            const width = mountPoint.clientWidth;
            const height = mountPoint.clientHeight;
            rendererRef.current.setSize(width, height);
            cameraRef.current.left = width / -2;
            cameraRef.current.right = width / 2;
            cameraRef.current.top = height / 2;
            cameraRef.current.bottom = height / -2;
            cameraRef.current.updateProjectionMatrix();
        };

        handleResize(); // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
        window.addEventListener('resize', handleResize);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ (–∏–∑ code1 –∏–ª–∏ code2, –æ–Ω–∏ –ø–æ—Ö–æ–∂–∏)
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
        directionalLight.position.set(50, 150, 100); // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
        directionalLight.target.position.set(0, 0, 0);
        scene.add(directionalLight);
        scene.add(directionalLight.target);

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ Three.js (–æ—Å–Ω–æ–≤–Ω–∞—è)
        return () => {
            console.log("[Level.jsx] –û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω—ã Three.js");
            window.removeEventListener('resize', handleResize);

             // –£–¥–∞–ª—è–µ–º —Å–Ω–∞—Ä—è–¥—ã –≤—Ä–∞–≥–æ–≤ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ü–µ–Ω—ã
             if (sceneRef.current && enemyProjectilesRef.current) {
                enemyProjectilesRef.current.forEach(proj => {
                    if (proj.mesh) {
                        sceneRef.current?.remove(proj.mesh);
                        proj.mesh.geometry?.dispose();
                        proj.mesh.material?.dispose();
                    }
                });
                enemyProjectilesRef.current = [];
             }
             // –£–¥–∞–ª—è–µ–º —Å–Ω–∞—Ä—è–¥—ã –∏–≥—Ä–æ–∫–∞
             if (sceneRef.current && projectilesRef.current) {
                projectilesRef.current.forEach(proj => {
                    if (proj.mesh) {
                        sceneRef.current?.remove(proj.mesh);
                        proj.mesh.geometry?.dispose();
                        proj.mesh.material?.dispose();
                    }
                });
                projectilesRef.current = [];
             }
            // –û—Ç–º–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current);
                animationFrameId.current = null;
            }
            // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞
            if (joystickRef.current) {
                try { joystickRef.current.destroy(); } catch (e) { console.warn("Joystick destroy error:", e); }
                joystickRef.current = null;
            }
            // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
            rendererRef.current?.dispose();
            if (mountPoint && rendererRef.current?.domElement && mountPoint.contains(rendererRef.current.domElement)) {
                mountPoint.removeChild(rendererRef.current.domElement);
            }
            // –û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã (—Ñ–æ–Ω –∏ —Å—Ç–µ–Ω—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤ –¥—Ä—É–≥–æ–º useEffect)
             if (sceneRef.current) {
                 // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–µ—Ç–µ–π (—Å–≤–µ—Ç, –∫–∞–º–µ—Ä–∞ –∏ —Ç.–¥., –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ü–µ–Ω—É)
                 // while(sceneRef.current.children.length > 0){
                 //     const child = sceneRef.current.children[0];
                 //     sceneRef.current.remove(child);
                 //     // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏–π/–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                 //     if (child instanceof THREE.Mesh) {
                 //         child.geometry?.dispose();
                 //         if (Array.isArray(child.material)) {
                 //             child.material.forEach(m => m.dispose());
                 //         } else {
                 //             child.material?.dispose();
                 //         }
                 //     }
                 // }
                 // --- –ò–õ–ò –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —Ñ–æ–Ω/—Å—Ç–µ–Ω—ã —É–¥–∞–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ ---
                 sceneRef.current.remove(ambientLight);
                 sceneRef.current.remove(directionalLight);
                 sceneRef.current.remove(directionalLight.target);
                 // –ú–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–∞ –∏ –≤—Ä–∞–≥–æ–≤ —É–¥–∞–ª—è—é—Ç—Å—è —Å–≤–æ–∏–º–∏ —Ö—É–∫–∞–º–∏ –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
             }

            // –°–±—Ä–æ—Å —Ä–µ—Ñ–æ–≤
            sceneRef.current = null;
            rendererRef.current = null;
            cameraRef.current = null;
        };
    }, []); // –ü—É—Å—Ç–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

    // --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –§–æ–Ω–∞ –∏ –°—Ç–µ–Ω (–∏–∑ code1) ---
    useEffect(() => {
        const currentScene = sceneRef.current;
        // –ñ–¥–µ–º —Å—Ü–µ–Ω—É –∏ –ö–û–ù–§–ò–ì, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–∑–º–µ—Ä—ã –º–∏—Ä–∞ –Ω—É–∂–Ω—ã –¥–ª—è —Ñ–æ–Ω–∞ –∏ —Å—Ç–µ–Ω
        if (!currentScene || !levelConfig) {
            console.log("[Level.jsx] Skip Background/Walls: No scene or levelConfig yet.");
            return;
        }
        console.log("[Level.jsx] –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞ –∏ —Å—Ç–µ–Ω");

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏)
        if(backgroundMeshRef.current) {
            console.log("  > Removing old background");
            currentScene.remove(backgroundMeshRef.current);
            backgroundMeshRef.current.geometry?.dispose();
            backgroundMeshRef.current.material?.map?.dispose(); // Dispose texture map
            backgroundMeshRef.current.material?.dispose();
            backgroundMeshRef.current = null;
        }
        if(wallsRef.current.length > 0) {
            console.log(`  > Removing ${wallsRef.current.length} old walls`);
            wallsRef.current.forEach(w => {
                if(w.mesh) {
                    currentScene.remove(w.mesh);
                    w.mesh.geometry?.dispose();
                    // –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –æ–±—ã—á–Ω–æ –æ–±—â–∏–π, –µ–≥–æ –º–æ–∂–Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑,
                    // –Ω–æ –µ—Å–ª–∏ –æ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–µ–Ω—ã, —Ç–æ –Ω—É–∂–Ω–æ: w.mesh.material?.dispose();
                }
            });
            wallsRef.current = []; // –û—á–∏—â–∞–µ–º —Ä–µ—Ñ –º–∞—Å—Å–∏–≤–∞ —Å—Ç–µ–Ω
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ–Ω–∞
        const textureLoader = new THREE.TextureLoader();
        if (levelData?.backgroundTexture) {
            console.log(`  > Loading background texture: ${levelData.backgroundTexture}`);
            textureLoader.load(
                levelData.backgroundTexture,
                (texture) => {
                    if (!sceneRef.current) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
                    console.log("    * Background texture loaded successfully");
                    texture.encoding = THREE.sRGBEncoding;
                    const bgGeometry = new THREE.PlaneGeometry(levelConfig.gameWorldWidth, levelConfig.gameWorldHeight);
                    const bgMaterial = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });
                    const backgroundMesh = new THREE.Mesh(bgGeometry, bgMaterial);
                    backgroundMesh.position.set(0, 0, -10); // –ó–∞ –∏–≥—Ä–æ–∫–æ–º –∏ —Å—Ç–µ–Ω–∞–º–∏
                    backgroundMesh.renderOrder = -1; // –†–µ–Ω–¥–µ—Ä–∏—Ç—å –ø–µ—Ä–≤—ã–º
                    sceneRef.current.add(backgroundMesh);
                    backgroundMeshRef.current = backgroundMesh; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                },
                undefined, // Progress callback (optional)
                (error) => {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞:", error);
                    // –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∫–∞–∫ fallback
                    if(sceneRef.current) sceneRef.current.background = new THREE.Color(0x282c34);
                }
            );
        } else {
            console.log("  > No background texture specified, using color.");
            currentScene.background = new THREE.Color(0x282c34); // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–µ–Ω
        if (levelData?.walls && levelData.walls.length > 0 && levelConfig) {
            console.log(`  > Creating ${levelData.walls.length} walls`);
             // –ú–∞—Ç–µ—Ä–∏–∞–ª –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑
            const wallMaterial = new THREE.MeshStandardMaterial({
                 color: 0x808080, // –°–µ—Ä—ã–π
                 roughness: 0.8,
                 metalness: 0.2
             });
            const tempWalls = []; // –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è

            levelData.walls.forEach(wallData => {
                const wallWidth = wallData.width;
                const wallHeight = wallData.height;
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                const wallX = convertTiledX(wallData.x, wallWidth, levelConfig.gameWorldWidth);
                const wallY = convertTiledY(wallData.y, wallHeight, levelConfig.gameWorldHeight, levelConfig.WORLD_Y_OFFSET);

                const wallGeometry = new THREE.BoxGeometry(wallWidth, wallHeight, 10); // –ù–µ–±–æ–ª—å—à–∞—è –≥–ª—É–±–∏–Ω–∞
                const wallMesh = new THREE.Mesh(wallGeometry, wallMaterial);
                wallMesh.position.set(wallX, wallY, -5); // –ß—É—Ç—å –≤—ã—à–µ —Ñ–æ–Ω–∞, –Ω–æ –∑–∞ –∏–≥—Ä–æ–∫–æ–º
                wallMesh.receiveShadow = true; // –ï—Å–ª–∏ —Ç–µ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã
                currentScene.add(wallMesh);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π
                tempWalls.push({
                    id: wallData.id || `wall-${Math.random()}`, // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –Ω–µ—Ç
                    x: wallX - wallWidth / 2, // –õ–µ–≤—ã–π –∫—Ä–∞–π –¥–ª—è AABB
                    y: wallY - wallHeight / 2, // –ù–∏–∂–Ω–∏–π –∫—Ä–∞–π –¥–ª—è AABB
                    width: wallWidth,
                    height: wallHeight,
                    mesh: wallMesh // –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—à –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                });
            });
            wallsRef.current = tempWalls; // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ

             // –û—á–∏—Å—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
             // –ù–æ –∑–¥–µ—Å—å –æ–Ω –Ω—É–∂–µ–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–µ–Ω/—Ñ–æ–Ω–∞
             // wallMaterial.dispose(); // –ù–µ –∑–¥–µ—Å—å
        } else {
            console.log("  > No walls data found or levelConfig missing.");
        }

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ useEffect (–ø—Ä–∏ —Å–º–µ–Ω–µ levelConfig –∏–ª–∏ levelData)
        return () => {
            console.log("[Level.jsx] –û—á–∏—Å—Ç–∫–∞ —Ñ–æ–Ω–∞ –∏ —Å—Ç–µ–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º");
             if (sceneRef.current) {
                 if(backgroundMeshRef.current) {
                     sceneRef.current.remove(backgroundMeshRef.current);
                     backgroundMeshRef.current.geometry?.dispose();
                     backgroundMeshRef.current.material?.map?.dispose();
                     backgroundMeshRef.current.material?.dispose();
                     backgroundMeshRef.current = null;
                 }
                 wallsRef.current.forEach(w => {
                     if (w.mesh) {
                         sceneRef.current?.remove(w.mesh);
                         w.mesh.geometry?.dispose();
                         // –ù–µ —É–¥–∞–ª—è–µ–º –æ–±—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –∑–¥–µ—Å—å
                     }
                 });
                 // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                 sceneRef.current.background = null;
             }
            wallsRef.current = []; // –û—á–∏—â–∞–µ–º —Ä–µ—Ñ
             // –û–±—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —Å–∞–º Level —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è
             // –ù–æ –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å—Ç–µ–Ω
        };
    }, [levelConfig, levelData?.backgroundTexture, levelData?.walls]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è –¥–ª—è —Ñ–æ–Ω–∞/—Å—Ç–µ–Ω

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –ò–≥—Ä–æ–∫–∞ (–∏–∑ code1) ---
    const { playerObject, isPlayerModelLoaded } = usePlayerLoader(
        playerStats?.skin || "/Models/character.glb", // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ skin
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º levelData?.playerStart, –Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ levelConfig, –µ—Å–ª–∏ start –Ω–µ –∑–∞–¥–∞–Ω
        levelData?.playerStart || (levelConfig ? { x: 0, y: levelConfig.WORLD_Y_OFFSET - 50 } : { x: 0, y: 0 }),
        sceneRef.current,
        levelConfig // –ü–µ—Ä–µ–¥–∞–µ–º levelConfig
    );
    // –£–±—Ä–∞–ª–∏ –ª–æ–≥ –æ—Ç—Å—é–¥–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ—Ä–µ–Ω–¥–µ—Ä–µ

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –í—Ä–∞–≥–æ–≤ (–ò–°–ü–û–õ–¨–ó–£–ï–ú useEnemyLoader –∏–∑ code1) ---
    const { enemyRefs, areEnemiesLoaded, initialEnemyStates } = useEnemyLoader(
        levelData?.enemies,   // –ú–∞—Å—Å–∏–≤ –≤—Ä–∞–≥–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è
        sceneRef.current,     // –¢–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞
        levelConfig,          // –ö–æ–Ω—Ñ–∏–≥ —É—Ä–æ–≤–Ω—è (–¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Ä–∞–∑–º–µ—Ä–æ–≤)
        levelData?.id,        // ID —É—Ä–æ–≤–Ω—è (–¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è/–ª–æ–≥–∏–∫–∏)
        difficulty            // –°–ª–æ–∂–Ω–æ—Å—Ç—å (–¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–æ–≤)
    );
     // console.log('[Level.jsx] –ü–û–°–õ–ï useEnemyLoader:', { enemyRefsCount: enemyRefs?.length, areEnemiesLoaded, initialEnemyStatesCount: initialEnemyStates?.length }); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π –∑–∞–≥—Ä—É–∑–∫–æ–π (–∏–∑ code1, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ —Å –ª–æ–≥–∏–∫–æ–π code2) ---
    useEffect(() => {
        // –°—á–∏—Ç–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–≥—Ä–æ–∫ –ò –≤—Ä–∞–≥–∏ –ò —Ç–µ–∫—Å—Ç—É—Ä—ã –ª—É—á–µ–π
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ levelConfig, —Ç.–∫. –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –∏–≥—Ä—ã
        const allLoaded = !!levelConfig && isPlayerModelLoaded && areEnemiesLoaded && beamTexturesLoaded;
        // console.log(`[Level.jsx] Checking Loading Status: Config=${!!levelConfig}, Player=${isPlayerModelLoaded}, Enemies=${areEnemiesLoaded}, Beams=${beamTexturesLoaded}. All Loaded = ${allLoaded}`);
        const currentlyLoading = !allLoaded;

        if (isLoading !== currentlyLoading) {
            setIsLoading(currentlyLoading);
            if (!currentlyLoading) { // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¢–û–õ–¨–ö–û –ß–¢–û –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
                if (!readyCalledRef.current) { // –í—ã–∑—ã–≤–∞–µ–º onReady —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                    console.log("‚ú® –£—Ä–æ–≤–µ–Ω—å –ì–û–¢–û–í! –í—ã–∑–æ–≤ onReady.");
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HP –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∏–≥—Ä–µ
                    if (typeof initializeLevelHp === 'function') {
                         initializeLevelHp();
                         console.log("HP –∏–≥—Ä–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.");
                    } else {
                        console.error("–û–®–ò–ë–ö–ê: initializeLevelHp –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ onReady!");
                    }
                    if (typeof onReady === 'function') {
                         onReady();
                    } else {
                         console.warn("–ü—Ä–æ–ø—Å onReady –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ Level.");
                    }
                    readyCalledRef.current = true; // –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ onReady –≤—ã–∑–≤–∞–Ω

                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è survival
                    if (levelData?.winCondition?.type === 'survive_duration') {
                        levelStartTimeRef.current = Date.now();
                        setRemainingTime(levelData.winCondition.duration);
                        console.log(`Survival Timer Started: ${levelData.winCondition.duration}s`);
                    } else {
                        levelStartTimeRef.current = null;
                        setRemainingTime(null);
                    }
                } else {
                     console.log("[Level.jsx] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ onReady —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω.");
                }
            } else {
                 console.log("[Level.jsx] –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...");
            }
        }
    }, [
        levelConfig, // –î–æ–±–∞–≤–∏–ª–∏ levelConfig –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        isPlayerModelLoaded,
        areEnemiesLoaded,
        beamTexturesLoaded,
        isLoading,
        onReady,
        initializeLevelHp, // –î–æ–±–∞–≤–∏–ª–∏ initializeLevelHp
        levelData?.winCondition // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
    ]);

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ä–∞–≥–æ–≤ (–∏–∑ code1, –Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑ code2) ---
    useEffect(() => {
        // –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–∞–≥–∏ –£–ñ–ï –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (areEnemiesLoaded && initialEnemyStates && initialEnemyStates.length > 0) {
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º JSON —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ —Ç–æ—Ç –∂–µ
            // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤, –Ω–æ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Ä–∞–≥–æ–≤ –æ–±—ã—á–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            if (JSON.stringify(enemiesState) !== JSON.stringify(initialEnemyStates)) {
                 console.log(`--- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø enemiesState (${initialEnemyStates.length} —à—Ç.) –∏–∑ initialEnemyStates ---`);
                 setEnemiesState(initialEnemyStates);
            }
        } else if (!areEnemiesLoaded && enemiesState.length > 0) {
             // –ï—Å–ª–∏ –≤—Ä–∞–≥–∏ –≤—ã–≥—Ä—É–∂–∞—é—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è), –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
             console.log("--- –û—á–∏—Å—Ç–∫–∞ enemiesState, —Ç.–∫. areEnemiesLoaded = false ---");
             setEnemiesState([]);
        }
        // –ù–µ –∑–∞–≤–∏—Å–∏–º –æ—Ç enemiesState –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∞
    }, [areEnemiesLoaded, initialEnemyStates]);

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –î–∂–æ–π—Å—Ç–∏–∫–∞ (–∏–∑ code2, –Ω–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç isLoading –∫–∞–∫ –≤ code1) ---
    useEffect(() => {
        let joystickInstance = null;
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!isLoading && sceneRef.current) {
            const joystickZone = document.getElementById("joystick-container");
            if (joystickZone && !joystickRef.current) { // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
                try {
                    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞...");
                    const options = {
                        zone: joystickZone,
                        mode: "static", // –ò–ª–∏ dynamic/semi
                        position: { left: "50%", top: "50%" }, // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –∑–æ–Ω—ã
                        size: 100, // –†–∞–∑–º–µ—Ä –¥–∂–æ–π—Å—Ç–∏–∫–∞
                        color: "rgba(255, 255, 255, 0.5)", // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –±–µ–ª—ã–π
                        threshold: 0.1 // –ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                    };
                    joystickInstance = nipplejs.create(options);
                    joystickRef.current = joystickInstance; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É

                    joystickInstance.on("move", (evt, data) => {
                        if (data.vector) {
                            velocity.current = { x: data.vector.x, y: data.vector.y, force: data.force };
                        }
                    });
                    joystickInstance.on("end", () => {
                        velocity.current = { x: 0, y: 0, force: 0 };
                    });
                    console.log("–î–∂–æ–π—Å—Ç–∏–∫ —Å–æ–∑–¥–∞–Ω.");
                } catch (error) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞:", error);
                }
            } else if (!joystickZone) {
                 console.warn("–ù–µ –Ω–∞–π–¥–µ–Ω #joystick-container –¥–ª—è –¥–∂–æ–π—Å—Ç–∏–∫–∞.");
            }
        } else if (isLoading && joystickRef.current) {
             // –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –≤ –∑–∞–≥—Ä—É–∑–∫—É, –∞ –¥–∂–æ–π—Å—Ç–∏–∫ –±—ã–ª, —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –µ–≥–æ
             console.log("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –∏–∑-–∑–∞ isLoading=true");
              try { joystickRef.current.destroy(); } catch(e) { console.warn("Joystick destroy error:", e); }
              joystickRef.current = null;
        }

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ isLoading –Ω–∞ true
        return () => {
            if (joystickRef.current) {
                 console.log("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ useEffect");
                 try { joystickRef.current.destroy(); } catch(e) { console.warn("Joystick destroy error:", e); }
                 joystickRef.current = null;
            }
        };
    }, [isLoading]); // –ó–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç isLoading

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥—É (–∏–∑ code2, useCallback –∫–∞–∫ –≤ code1) ---
    const handleEnemyHit = useCallback((enemyId, damageAmount) => {
        let enemyDefeated = false;
        let enemyRefForBlockCheck = null;

        setEnemiesState(prevEnemies => {
            const newEnemiesState = [...prevEnemies];
            const enemyIndex = newEnemiesState.findIndex(e => e.id === enemyId);

            if (enemyIndex !== -1 && newEnemiesState[enemyIndex].currentHp > 0) {
                enemyRefForBlockCheck = enemyRefs?.find(ref => ref && ref.id === enemyId); // –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É
                let finalDamage = damageAmount;

                // --- –õ–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Revenant Knight ---
                if (enemyRefForBlockCheck?.type === 'revenant_knight' && typeof enemyRefForBlockCheck.blockCharges === 'number' && enemyRefForBlockCheck.blockCharges > 0) {
                    enemyRefForBlockCheck.blockCharges -= 1; // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞—Ä—è–¥—ã –≤ —Ä–µ—Ñ–µ
                    console.log(`Revenant Knight ${enemyId} blocked! Charges left: ${enemyRefForBlockCheck.blockCharges}`);
                    finalDamage = 0; // –ë–ª–æ–∫ –ø–æ–≥–ª–æ—â–∞–µ—Ç —É—Ä–æ–Ω
                    // TODO: –í–∏–∑—É–∞–ª—å–Ω—ã–π/–∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –±–ª–æ–∫–∞?
                }
                // --- ---

                const currentHp = newEnemiesState[enemyIndex].currentHp;
                const newHp = Math.max(0, currentHp - finalDamage);

                if (newHp === 0 && currentHp > 0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HP —Å—Ç–∞–ª–æ 0 –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å
                    console.log(`--- –í—Ä–∞–≥ ${enemyId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã–π (HP=0)! ---`);
                    enemyDefeated = true;
                    // –ü–æ–º–µ—á–∞–µ–º isDead —Å—Ä–∞–∑—É –≤ —Ä–µ—Ñ–µ, —á—Ç–æ–±—ã AI –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å
                    if (enemyRefForBlockCheck && !enemyRefForBlockCheck.isDead) {
                        enemyRefForBlockCheck.isDead = true;
                        console.log(`--- –§–ª–∞–≥ isDead —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${enemyId} –≤ handleEnemyHit ---`);
                        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏ (–∫—Ä–æ–º–µ Rotting Soldier, –æ–Ω –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–∏–∫–ª–µ)
                        if (enemyRefForBlockCheck.type === 'cursed_carrier') {
                             // –õ–æ–≥–∏–∫–∞ —Å–ø–∞–≤–Ω–∞ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
                             // summonCreature('skeleton_swordsman', 1, enemyRefForBlockCheck.pivot.position.clone());
                             console.log(`(Placeholder) Cursed Carrier ${enemyId} died.`);
                        }
                    } else if (!enemyRefForBlockCheck) {
                        console.warn(`[handleEnemyHit] –ù–µ –Ω–∞–π–¥–µ–Ω enemyRef ${enemyId} –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ isDead –ø—Ä–∏ HP=0!`);
                    }
                }

                newEnemiesState[enemyIndex] = { ...newEnemiesState[enemyIndex], currentHp: newHp };
                return newEnemiesState;
            }
            return prevEnemies; // –ù–µ –Ω–∞—à–ª–∏ –≤—Ä–∞–≥–∞ –∏–ª–∏ –æ–Ω —É–∂–µ –º–µ—Ä—Ç–≤
        });

    }, [enemyRefs]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç enemyRefs (–¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä—ã—Ü–∞—Ä—è)

    // --- –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä—Ç–≤—ã—Ö –≤—Ä–∞–≥–æ–≤ —Å–æ —Å—Ü–µ–Ω—ã (–í–∏–∑—É–∞–ª—å–Ω–æ–µ) - –õ–æ–≥–∏–∫–∞ –∏–∑ code2, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º isDead ---
    // –≠—Ç–æ—Ç useEffect –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ isDead —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ handleEnemyHit/game loop,
    // –∞ –ª–æ–≥–∏–∫–∞ —Å–∫—Ä—ã—Ç–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ game loop (–¥–ª—è Rotting Soldier) –∏–ª–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Ä–æ–≤–Ω—è.
    // –û—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —è–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –î–û –æ—á–∏—Å—Ç–∫–∏.
    /*
    useEffect(() => {
        if (!sceneRef.current || !enemyRefs || !enemiesState) return;

        // –ù–∞—Ö–æ–¥–∏–º ID –≤—Ä–∞–≥–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö HP <= 0 –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        const deadEnemyIdsInState = new Set(enemiesState.filter(state => state.currentHp <= 0).map(state => state.id));

        enemyRefs.forEach(enemyRef => {
            if (!enemyRef || !enemyRef.pivot) return;

            const isMarkedDead = enemyRef.isDead; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ isDead –≤ —Ä–µ—Ñ–µ
            const isOnScene = enemyRef.pivot.parent === sceneRef.current;

            // –£–¥–∞–ª—è–µ–º —Å–æ —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–º–µ—á–µ–Ω –º–µ—Ä—Ç–≤—ã–º –ò –µ—â–µ –Ω–∞ —Å—Ü–µ–Ω–µ
            // –ò—Å–∫–ª—é—á–∞–µ–º Rotting Soldier, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞ –≤ —Ü–∏–∫–ª–µ
            if (isMarkedDead && isOnScene && enemyRef.type !== 'rotting_soldier') {
                console.log(`--- –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ–≥–æ –≤—Ä–∞–≥–∞ ${enemyRef.id} —Å–æ —Å—Ü–µ–Ω—ã (useEffect) ---`);
                sceneRef.current.remove(enemyRef.pivot);
                 // –û—á–∏—Å—Ç–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏/–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ)
                 // enemyRef.mesh?.geometry?.dispose();
                 // enemyRef.mesh?.material?.dispose();
                 // enemyRef.hpBar?.container?.geometry?.dispose();
                 // enemyRef.hpBar?.container?.material?.dispose();
                 // enemyRef.hpBar?.fill?.geometry?.dispose();
                 // enemyRef.hpBar?.fill?.material?.dispose();
            }
            // –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ —Å—Ü–µ–Ω—É –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞,
            // —Ç.–∫. useEnemyLoader –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –∏—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.
        });
    }, [enemiesState, enemyRefs]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å—Å—ã–ª–æ–∫
    */

    // --- –õ–æ–≥–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä—ã (–∏–∑ code1/code2) ---
    const winLevel = useCallback(() => { if (levelStatus === 'playing') { console.log(">>> –£—Ä–æ–≤–µ–Ω—å –í–´–ò–ì–†–ê–ù <<<"); setLevelStatus('won'); } }, [levelStatus]);
    const loseLevel = useCallback(() => { if (levelStatus === 'playing') { console.log(">>> –£—Ä–æ–≤–µ–Ω—å –ü–†–û–ò–ì–†–ê–ù <<<"); setLevelStatus('lost'); } }, [levelStatus]);

    // –°–ª–µ–¥–∏–º –∑–∞ HP –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞
    useEffect(() => {
        if (typeof playerHp === 'number' && playerHp <= 0 && levelStatus === 'playing') {
            loseLevel();
        }
    }, [playerHp, levelStatus, loseLevel]);


    // === –û–°–ù–û–í–ù–û–ô –ò–ì–†–û–í–û–ô –¶–ò–ö–õ (–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏ –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π) ===
    useEffect(() => {
        // <<< –£—Å–ª–æ–≤–∏–µ –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞: –ù–ï isLoading –ò —Å—Ç–∞—Ç—É—Å 'playing' –ò –û–°–ù–û–í–ù–´–ï –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –ò —Ç–µ–∫—Å—Ç—É—Ä—ã –ª—É—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã >>>
        if (isLoading || levelStatus !== 'playing' || !playerObject || !enemyRefs || !sceneRef.current || !rendererRef.current || !cameraRef.current || !levelConfig || !beamTexturesLoaded) {
            if (animationFrameId.current) {
                 // console.log("Game loop cancelled due to unmet conditions."); // Debug log
                 cancelAnimationFrame(animationFrameId.current);
                 animationFrameId.current = null;
            }
            return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã
        }

        console.log(">>> –ó–ê–ü–£–°–ö –ò–ì–†–û–í–û–ì–û –¶–ò–ö–õ–ê <<<"); // –õ–æ–≥ –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞

        const clock = new THREE.Clock();
        let lastTimestamp = 0;

        // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ü–∏–∫–ª–∞ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã) ---

        const findNearestEnemy = (origin, maxRangeSq) => {
            let nearestEnemy = null;
            let minDistanceSq = maxRangeSq;
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º enemyRefs –∏ enemiesState –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∂–∏–≤–æ—Å—Ç–∏
            enemyRefs?.forEach(enemy => {
                if (!enemy || enemy.isDead || !enemy.pivot?.position) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º isDead –∏ –Ω–∞–ª–∏—á–∏–µ pivot
                // const enemyState = enemiesState.find(es => es.id === enemy.id); // –ú–æ–∂–Ω–æ –Ω–µ –∏—Å–∫–∞—Ç—å, –µ—Å–ª–∏ isDead –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                // if (!enemyState || enemyState.currentHp <= 0) return;

                const distanceSq = origin.distanceToSquared(enemy.pivot.position);
                if (distanceSq < minDistanceSq) {
                    minDistanceSq = distanceSq;
                    nearestEnemy = enemy;
                }
            });
            return nearestEnemy;
        };

        const addProjectileMesh = (projectileData) => {
            if (!sceneRef.current) return;
            // –ü—Ä–æ—Å—Ç–æ–π —à–∞—Ä –¥–ª—è —Å–Ω–∞—Ä—è–¥–∞ –∏–≥—Ä–æ–∫–∞
            const geometry = new THREE.SphereGeometry(4, 6, 6);
            const material = new THREE.MeshBasicMaterial({ color: projectileData.isCrit ? 0xffaa00 : 0xffffff }); // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –∫—Ä–∏—Ç–∞
            const mesh = new THREE.Mesh(geometry, material);
            mesh.position.copy(projectileData.position);
            projectileData.mesh = mesh; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞—Ä—è–¥–∞
            sceneRef.current.add(mesh);
        };

        const createProjectile = (targetEnemyRef) => {
            if (!playerObject || !targetEnemyRef?.pivot?.position || !playerStats) return;

            const projSpeed = 500; // –°–∫–æ—Ä–æ—Å—Ç—å —Å–Ω–∞—Ä—è–¥–∞ –∏–≥—Ä–æ–∫–∞
            const projLifetime = 1.5; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–Ω–∞—Ä—è–¥–∞ –∏–≥—Ä–æ–∫–∞
            const baseDamage = playerStats.attack || 1;
            const startPos = playerObject.position.clone();
            const targetPos = targetEnemyRef.pivot.position.clone();
            const direction = targetPos.sub(startPos).normalize();
            const critChance = playerStats.critChance || 0;
            const isCrit = Math.random() * 100 < critChance;
            const critMultiplier = playerStats.critMultiplier || 2;
            let finalDamage = isCrit ? Math.round(baseDamage * critMultiplier) : baseDamage;

            // –õ–æ–≥–∏–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —É–¥–∞—Ä–∞
            const doubleStrikeChance = playerStats.doubleStrikeChance || 0;
            const isDoubleStrike = Math.random() * 100 < doubleStrikeChance;

            const makeProjectileData = (dmg, crit, offset = 0) => {
                const pos = startPos.clone().add(direction.clone().multiplyScalar(25)); // –°–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∏–≥—Ä–æ–∫–∞
                if (offset !== 0) {
                     // –°–º–µ—â–∞–µ–º –≤—Ç–æ—Ä–æ–π —Å–Ω–∞—Ä—è–¥ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª–µ—Ç–∞
                     pos.add(new THREE.Vector3(direction.y, -direction.x, 0).multiplyScalar(offset));
                }
                return {
                    id: Math.random(),
                    position: pos,
                    velocity: direction.clone().multiplyScalar(projSpeed),
                    damage: dmg,
                    isCrit: crit,
                    lifetime: projLifetime,
                    mesh: null
                };
            };

            // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π (–∏–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) —Å–Ω–∞—Ä—è–¥
            const p1 = makeProjectileData(finalDamage, isCrit);
            projectilesRef.current.push(p1);
            addProjectileMesh(p1);

            // –ï—Å–ª–∏ –¥–≤–æ–π–Ω–æ–π —É–¥–∞—Ä, —Å–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π
            if (isDoubleStrike) {
                const isCrit2 = Math.random() * 100 < critChance;
                const dmg2 = isCrit2 ? Math.round(baseDamage * critMultiplier) : baseDamage;
                const p2 = makeProjectileData(dmg2, isCrit2, 8); // –°–º–µ—â–∞–µ–º –≤—Ç–æ—Ä–æ–π –Ω–∞ 8 –ø–∏–∫—Å–µ–ª–µ–π
                projectilesRef.current.push(p2);
                addProjectileMesh(p2);
                // console.log("Double Strike!"); // Debug log
            }
        };

        const addEnemyProjectileMesh = (projData) => {
            if (!sceneRef.current) return;
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–ª–∏–Ω–¥—Ä (—Å—Ç—Ä–µ–ª—É) –∫–∞–∫ –≤ code2
            const geometry = new THREE.CylinderGeometry(0.5, 0.5, 12, 5); // –¢–æ–Ω—å—à–µ –∏ –¥–ª–∏–Ω–Ω–µ–µ
            const material = new THREE.MeshBasicMaterial({ color: 0x8B4513 }); // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ü–≤–µ—Ç
            const mesh = new THREE.Mesh(geometry, material);
            mesh.position.copy(projData.position);
            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–µ–ª—É –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª–µ—Ç–∞ (–∏—Å—Ö–æ–¥–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Ü–∏–ª–∏–Ω–¥—Ä–∞ –ø–æ Y)
            mesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), projData.velocity.clone().normalize());
            projData.mesh = mesh;
            sceneRef.current.add(mesh);
        };

        const createEnemyProjectile = (enemy, playerCurrentPos) => {
            if (!enemy || !enemy.pivot?.position || !enemy.stats || !playerCurrentPos || enemy.isDead) return;

            const projSpeed = 300 + Math.random() * 100; // –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞–∂–µ—Å–∫–æ–≥–æ —Å–Ω–∞—Ä—è–¥–∞ (–ª—É—á–Ω–∏–∫)
            const projLifetime = 2.0; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏
            const damage = enemy.stats.damage || 3; // –£—Ä–æ–Ω –∏–∑ —Å—Ç–∞—Ç–æ–≤ –≤—Ä–∞–≥–∞

            const startPos = enemy.pivot.position.clone();
            const targetPos = playerCurrentPos.clone();
            const direction = targetPos.sub(startPos).normalize();
            startPos.add(direction.clone().multiplyScalar(25)); // –°–º–µ—â–∞–µ–º —Å—Ç–∞—Ä—Ç –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≤—Ä–∞–≥–∞

            const projectileData = {
                id: Math.random(),
                ownerId: enemy.id,
                position: startPos,
                velocity: direction.clone().multiplyScalar(projSpeed),
                damage: damage,
                lifetime: projLifetime,
                mesh: null
            };
            enemyProjectilesRef.current.push(projectileData);
            addEnemyProjectileMesh(projectileData);
        };

        // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª—É—á–µ–π (–∏–∑ code2, —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏–∑ code1) ---
        const createBeamMeshFixed = (enemy, targetPos) => {
            if (!sceneRef.current || !enemy.pivot?.position || !beamTexturesRef.current || !enemy.stats || enemy.isDead) {
                 console.warn("createBeamMeshFixed: –ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—Ä–∞–≥ –º–µ—Ä—Ç–≤.", { hasScene: !!sceneRef.current, hasPivot: !!enemy.pivot?.position, hasTextures: !!beamTexturesRef.current, hasStats: !!enemy.stats, isDead: enemy.isDead });
                 return null;
            }

            const beamType = enemy.stats.beamType === 'fire' ? 'fire' : 'ice';
            const texture = beamTexturesRef.current[beamType];

            if (!texture) {
                console.error(`–¢–µ–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ª—É—á–∞ —Ç–∏–ø–∞ "${beamType}" –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!`);
                return null;
            }

            const startPoint = enemy.pivot.position.clone();
            const beamOriginOffsetY = 25; // –°–º–µ—â–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –ª—É—á–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã)
            startPoint.y += beamOriginOffsetY; // –ò—Å–ø—É—Å–∫–∞–µ–º —á—É—Ç—å –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞

            const endPoint = targetPos.clone();
            const direction = endPoint.clone().sub(startPoint);
            const distance = direction.length();

            if (distance <= 0.1) return null; // –ù–µ —Å–æ–∑–¥–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ª—É—á

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ –º–∞—Ç–µ—Ä–∏–∞–ª, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ (–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ)
            const beamGeo = new THREE.PlaneGeometry(BEAM_WIDTH, 1); // –®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ 1 –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ Y
            const beamMat = new THREE.MeshBasicMaterial({
                map: texture,
                transparent: true,
                depthTest: false, // –†–µ–Ω–¥–µ—Ä–∏—Ç—å –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
                depthWrite: false,
                side: THREE.DoubleSide, // –í–∏–¥–µ–Ω —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
                // blending: THREE.AdditiveBlending, // –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–≤–µ—á–µ–Ω–∏—è
            });

            const beamMesh = new THREE.Mesh(beamGeo, beamMat);
            beamMesh.name = `beam_${enemy.id}`;
            beamMesh.renderOrder = 900; // –ù–∏–∂–µ —Ö–µ–ª—Å–±–∞—Ä–æ–≤ (—É –Ω–∏—Ö 999)

            beamMesh.scale.y = distance; // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ –¥–ª–∏–Ω–µ
            beamMesh.position.copy(startPoint).lerp(endPoint, 0.5); // –°—Ç–∞–≤–∏–º –≤ —Å–µ—Ä–µ–¥–∏–Ω—É –æ—Ç—Ä–µ–∑–∫–∞
            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å (–∫–æ—Ç–æ—Ä–∞—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤ XY) —Ç–∞–∫, —á—Ç–æ–±—ã –µ–µ –æ—Å—å Y —Å–æ–≤–ø–∞–ª–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ª—É—á–∞
            beamMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), direction.normalize());

            sceneRef.current.add(beamMesh);
            // console.log(`--- –ú–ï–® –õ–£–ß–ê –°–û–ó–î–ê–ù –¥–ª—è ${enemy.id} (—Ç–∏–ø: ${beamType}) ---`); // Debug log
            return beamMesh;
        }

        const updateBeamMesh = (beamMesh, startPosRaw, targetPos) => {
             if (!beamMesh || !startPosRaw || !targetPos) return;

             const startPoint = startPosRaw.clone();
             const beamOriginOffsetY = 25; // –¢–æ –∂–µ —Å–º–µ—â–µ–Ω–∏–µ
             startPoint.y += beamOriginOffsetY;

             const endPoint = targetPos.clone();
             const direction = endPoint.clone().sub(startPoint);
             const distance = direction.length();

             if (distance <= 0.1) {
                 beamMesh.visible = false; // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ª—É—á
                 return;
             }

             beamMesh.visible = true;
             beamMesh.scale.y = distance;
             beamMesh.position.copy(startPoint).lerp(endPoint, 0.5);
             beamMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), direction.normalize());
        }

        const removeBeamMesh = (enemy) => {
             if (enemy.beamEffectMesh && sceneRef.current) {
                 // console.log(`--- –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—à–∞ –ª—É—á–∞ –¥–ª—è ${enemy.id} ---`); // Debug log
                 sceneRef.current.remove(enemy.beamEffectMesh);
                 // –û—á–∏—Å—Ç–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏/–º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è)
                 enemy.beamEffectMesh.geometry?.dispose();
                 enemy.beamEffectMesh.material?.map?.dispose(); // –í–∞–∂–Ω–æ –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä
                 enemy.beamEffectMesh.material?.dispose();
                 enemy.beamEffectMesh = null; // –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Ä–µ—Ñ–∞ –≤—Ä–∞–≥–∞
             }
        }
        // --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ª—É—á–µ–π ---

        // --- –§—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (–∏–∑ code1/code2) ---
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —ç—Ç–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        const summonCreature = (type, count, position) => {
            console.warn(`–ó–ê–ì–õ–£–®–ö–ê: summonCreature(${type}, ${count}, ${position?.x.toFixed(0)},${position?.y.toFixed(0)}) - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞:
            // 1. –°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞–≥–∞ (enemyData)
            // 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ useEnemyLoader –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ Three.js (pivot, mesh, hpBar)
            // 3. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π ref –≤ enemyRefs.current
            // 4. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ enemiesState
            // 5. –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ —Å—Ü–µ–Ω—É sceneRef.current.add(newEnemy.pivot)
        };
        const applyPlayerDebuff = (type, duration, strength) => {
            console.warn(`–ó–ê–ì–õ–£–®–ö–ê: applyPlayerDebuff(${type}, ${duration}, ${strength}) - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–±–∞—Ñ—Ñ–∞ –∫ –∏–≥—Ä–æ–∫—É:
            // 1. –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–±–∞—Ñ—Ñ–æ–≤ –≤ useGameStore
            // 2. –°–æ–∑–¥–∞—Ç—å action –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–±–∞—Ñ—Ñ–∞
            // 3. –í—ã–∑—ã–≤–∞—Ç—å —ç—Ç–æ—Ç action –æ—Ç—Å—é–¥–∞
            // 4. –£—á–∏—Ç—ã–≤–∞—Ç—å –¥–µ–±–∞—Ñ—Ñ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞ (–≤ computedStats –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é)
        };
        const createPoisonCloud = (position) => {
            console.warn(`–ó–ê–ì–õ–£–®–ö–ê: createPoisonCloud(${position?.x.toFixed(0)},${position?.y.toFixed(0)}) - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
            // –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ–±–ª–∞–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø—Ä–∞–π—Ç –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—Ü)
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —É—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω –≤–Ω—É—Ç—Ä–∏ –æ–±–ª–∞–∫–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –≤ —Ü–∏–∫–ª–µ)
        };
        const placeTotem = (position, totemType) => {
            console.warn(`–ó–ê–ì–õ–£–®–ö–ê: placeTotem(${position?.x.toFixed(0)},${position?.y.toFixed(0)}, ${totemType}) - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
            // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ç–æ—Ç–µ–º–∞ (–º–æ–¥–µ–ª—å, —ç—Ñ—Ñ–µ–∫—Ç—ã)
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ç–µ–º–∞ (–∞—É—Ä–∞, –∞—Ç–∞–∫–∞ –∏ —Ç.–¥.)
        };
        const triggerGroundSpikes = (position, delay, damage) => { // –î–æ–±–∞–≤–∏–ª–∏ —É—Ä–æ–Ω
             console.warn(`–ó–ê–ì–õ–£–®–ö–ê: triggerGroundSpikes(${position?.x.toFixed(0)},${position?.y.toFixed(0)}, ${delay}) - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
             // –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —à–∏–ø–æ–≤ –ø–æ–¥ —Ü–µ–ª—å—é)
             // –ß–µ—Ä–µ–∑ `delay` —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∑–æ–Ω–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è, –∏ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ `damage`
             // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å setTimeout –∏–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä –≤ —Ü–∏–∫–ª–µ
        };
        const createPoisonPuddle = (position, dps, duration) => { // –î–æ–±–∞–≤–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
             console.warn(`–ó–ê–ì–õ–£–®–ö–ê: createPoisonPuddle(${position?.x.toFixed(0)},${position?.y.toFixed(0)}) - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
             // –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ª—É–∂–∏ (—Å–ø—Ä–∞–π—Ç/–¥–µ–∫–∞–ª—å –Ω–∞ –∑–µ–º–ª–µ)
             // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —É—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫—É (`dps`) –ø–æ–∫–∞ –æ–Ω —Å—Ç–æ–∏—Ç –≤ –ª—É–∂–µ
             // –£–¥–∞–ª–µ–Ω–∏–µ –ª—É–∂–∏ —á–µ—Ä–µ–∑ `duration` —Å–µ–∫—É–Ω–¥
        };
        // --- –ö–æ–Ω–µ—Ü TODO ---

        // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã (–∏–∑ code1, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ) ---
        const checkWinCondition = () => {
            if (!levelData?.winCondition || isLoading || levelStatus !== 'playing') {
                return; // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —É—Å–ª–æ–≤–∏—è, –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∏–¥–µ—Ç
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–∞–≥–æ–≤ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ö–æ—Ç—è –±—ã —Ä–∞–∑
            // –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∏–≥—Ä–∞—Ç—å —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –≤—Ä–∞–≥–æ–≤ 0 –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
             if (enemiesState.length === 0 && initialEnemyStates?.length > 0 && areEnemiesLoaded) {
                  // –ï—Å–ª–∏ initialEnemyStates –±—ã–ª –Ω–µ –ø—É—Å—Ç–æ–π, –∞ enemiesState —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º - –∑–Ω–∞—á–∏—Ç –≤—Å–µ—Ö —É–±–∏–ª–∏
                  if (levelData.winCondition.type === 'clear_enemies') {
                       console.log("Win Condition Check: clear_enemies MET (enemiesState became empty)!");
                       winLevel();
                       return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥—Ä—É–≥–∏–µ —É—Å–ª–æ–≤–∏—è
                  }
             } else if (enemiesState.length === 0 && initialEnemyStates?.length === 0 && areEnemiesLoaded) {
                 // –ï—Å–ª–∏ –≤—Ä–∞–≥–æ–≤ –Ω–µ –±—ã–ª–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ
                 // –∏–ª–∏ –¥—Ä—É–≥–æ–µ —É—Å–ª–æ–≤–∏–µ. –ù–µ —Å—á–∏—Ç–∞–µ–º "clear_enemies" –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º.
             }


            const { type, duration } = levelData.winCondition;

            switch (type) {
                case 'clear_enemies':
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∂–∏–≤—ã–µ –≤—Ä–∞–≥–∏ –≤ –¢–ï–ö–£–©–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    const liveEnemies = enemiesState?.filter(e => e.currentHp > 0) || [];
                     // –£—Å–ª–æ–≤–∏–µ: –∂–∏–≤—ã—Ö –Ω–µ—Ç –ò —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–∞–≥–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–µ (—Ç.–µ. –æ–Ω–∏ –±—ã–ª–∏)
                    if (liveEnemies.length === 0 && enemiesState.length > 0) {
                        console.log("Win Condition Check: clear_enemies MET!");
                        winLevel();
                    }
                    break;
                case 'defeat_all_bosses':
                     const liveBosses = enemiesState?.filter(e => e.isBoss && e.currentHp > 0) || [];
                     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –±–æ—Å—Å—ã –≤–æ–æ–±—â–µ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏—Ö —É–±–∏–ª–∏ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ)
                     const wereBosses = enemiesState?.some(e => e.isBoss);
                     if (liveBosses.length === 0 && wereBosses) {
                        console.log("Win Condition Check: defeat_all_bosses MET!");
                        winLevel();
                    }
                    break;
                case 'survive_duration':
                    if (levelStartTimeRef.current && duration) {
                        const elapsed = (Date.now() - levelStartTimeRef.current) / 1000;
                        const timeLeft = duration - elapsed;
                        setRemainingTime(timeLeft > 0 ? timeLeft : 0); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π—Ç –¥–ª—è UI
                        if (timeLeft <= 0) {
                             console.log("Win Condition Check: survive_duration MET!");
                             winLevel();
                        }
                    }
                    break;
                default:
                    // console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã: ${type}`);
                    break;
            }
        }; // --- –ö–æ–Ω–µ—Ü checkWinCondition ---

        // --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–¥—Ä–∞ ---
        const animate = (timestamp) => {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
            if (levelStatus !== 'playing') {
                console.log(`Game loop stopping. Status: ${levelStatus}`);
                if(animationFrameId.current) cancelAnimationFrame(animationFrameId.current);
                animationFrameId.current = null;
                clock.stop();
                return;
            }
            // –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
            animationFrameId.current = requestAnimationFrame(animate);

            // –†–∞—Å—á–µ—Ç Delta Time (dt)
            // const dt = Math.min(clock.getDelta(), 0.05); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ dt –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            // --- –ò–õ–ò –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç dt ---
            const dt = timestamp === 0 ? 0.016 : Math.min((timestamp - lastTimestamp) / 1000, 0.05);
            lastTimestamp = timestamp;
            // ---

            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            const playerPos = playerObject?.position; // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
            const currentScene = sceneRef.current;
            const currentCamera = cameraRef.current;
            const currentRenderer = rendererRef.current;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            if (!playerObject || !playerPos || !currentScene || !currentCamera || !currentRenderer || !levelConfig || !playerStats) {
                 console.warn("–ü—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã (player, scene, camera, renderer, config, stats)");
                 return;
            }

            // ==================================
            // === 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ò–≥—Ä–æ–∫–∞ =======
            // ==================================
            const effectiveSpeed = (playerStats.speed || 3) * (velocity.current.force > 0.1 ? 1 : 0); // –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑ —Å—Ç–∞—Ç–æ–≤
            const speedMultiplier = 60; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏

            if (effectiveSpeed > 0) {
                const dx = (velocity.current.x || 0) * effectiveSpeed * dt * speedMultiplier;
                const dy = (velocity.current.y || 0) * effectiveSpeed * dt * speedMultiplier;

                let nextX = playerPos.x + dx;
                let nextY = playerPos.y + dy;
                const PLAYER_SIZE = { width: 30, height: 30 }; // –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π

                // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π —Å–æ —Å—Ç–µ–Ω–∞–º–∏ ---
                const pRect = { x: playerPos.x - PLAYER_SIZE.width / 2, y: playerPos.y - PLAYER_SIZE.height / 2, width: PLAYER_SIZE.width, height: PLAYER_SIZE.height };
                let colX = false;
                let colY = false;
                const pRectX = { ...pRect, x: nextX - PLAYER_SIZE.width / 2 };
                for (const wall of wallsRef.current) { if (checkCollision(pRectX, wall)) { colX = true; break; } }
                const pRectY = { ...pRect, y: nextY - PLAYER_SIZE.height / 2 };
                for (const wall of wallsRef.current) { if (checkCollision(pRectY, wall)) { colY = true; break; } }

                if (!colX) playerPos.x = nextX;
                if (!colY) playerPos.y = nextY;
                // --- ---

                // --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –º–∏—Ä–∞ ---
                const pSizeHW = PLAYER_SIZE.width / 2;
                const pSizeHH = PLAYER_SIZE.height / 2;
                const minX = -levelConfig.gameWorldWidth / 2 + pSizeHW;
                const maxX = levelConfig.gameWorldWidth / 2 - pSizeHW;
                const minYw = -levelConfig.WORLD_Y_OFFSET + pSizeHH; // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
                const maxYw = levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - pSizeHH; // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞

                playerPos.x = clamp(playerPos.x, minX, maxX);
                playerPos.y = clamp(playerPos.y, minYw, maxYw);
                // --- ---

                // --- –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –º–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–∞ ---
                if (Math.abs(dx) > 0.01 || Math.abs(dy) > 0.01) {
                    const angle = Math.atan2(dy, dx);
                    let targetRotZ = angle - Math.PI / 2; // –ü–æ–≤–æ—Ä–æ—Ç –º–æ–¥–µ–ª–∏ (–æ–±—ã—á–Ω–æ Y –≤–ø–µ—Ä–µ–¥)
                    const currentRotZ = playerObject.rotation.z;
                    const twoPi = Math.PI * 2;
                    let diff = targetRotZ - currentRotZ;
                    while (diff < -Math.PI) diff += twoPi;
                    while (diff > Math.PI) diff -= twoPi;
                    const lerpFactor = 0.15; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                    playerObject.rotation.z += diff * lerpFactor;
                }
                // --- ---

                // TODO: –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã –∏–≥—Ä–æ–∫–∞
                // playerObject.userData?.actions?.Walk?.play();
                // playerObject.userData?.actions?.Idle?.stop();
            } else {
                 // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞
                 // playerObject.userData?.actions?.Idle?.play();
                 // playerObject.userData?.actions?.Walk?.stop();
            }
             // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–∫—Å–µ—Ä–∞ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
             playerObject.userData?.mixer?.update(dt);

            // ==================================
            // === 2. –ê—Ç–∞–∫–∞ –ò–≥—Ä–æ–∫–∞ =============
            // ==================================
            playerAttackCooldown.current -= dt;
            if (playerAttackCooldown.current <= 0) {
                const interval = 1 / (playerStats.attackSpeed || 1.0); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ —Å—Ç–∞—Ç–æ–≤
                playerAttackCooldown.current = interval;
                const range = playerStats.attackRange || 150; // –î–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å—Ç–∞—Ç–æ–≤
                const rangeSq = range * range;
                const target = findNearestEnemy(playerPos, rangeSq);
                if (target) {
                     createProjectile(target);
                     // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞?
                }
            }

            // ==================================
            // === 3. –°–Ω–∞—Ä—è–¥—ã –ò–≥—Ä–æ–∫–∞ ==========
            // ==================================
            const activeProjectiles = [];
            // –°–æ–∑–¥–∞–µ–º —Ö–∏—Ç–±–æ–∫—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –∫–∞–¥—Ä
             const enemyHitboxes = enemyRefs?.map(enemy => {
                 if (enemy?.pivot?.position && !enemy.isDead) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º isDead
                     const size = 40; // –†–∞–∑–º–µ—Ä —Ö–∏—Ç–±–æ–∫—Å–∞ –≤—Ä–∞–≥–∞ (–º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞–≥–∞)
                     return {
                         id: enemy.id,
                         type: enemy.type, // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä—ã—Ü–∞—Ä—è
                         ref: enemy, // –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ blockCharges
                         x: enemy.pivot.position.x - size / 2,
                         y: enemy.pivot.position.y - size / 2,
                         width: size,
                         height: size
                     };
                 } return null;
             }).filter(Boolean) || []; // –§–∏–ª—å—Ç—Ä—É–µ–º null –∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ enemyRefs –Ω–µ—Ç

            projectilesRef.current.forEach(proj => {
                // –î–≤–∏–∂–µ–Ω–∏–µ
                proj.position.add(proj.velocity.clone().multiplyScalar(dt));
                proj.lifetime -= dt;

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—à–∞
                if (proj.mesh) proj.mesh.position.copy(proj.position);

                let hit = false;
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π, –µ—Å–ª–∏ —Å–Ω–∞—Ä—è–¥ –∂–∏–≤ –∏ –µ—Å—Ç—å —Ö–∏—Ç–±–æ–∫—Å—ã –≤—Ä–∞–≥–æ–≤
                if (proj.lifetime > 0 && enemyHitboxes.length > 0) {
                    const projSize = 8; // –†–∞–∑–º–µ—Ä —Ö–∏—Ç–±–æ–∫—Å–∞ —Å–Ω–∞—Ä—è–¥–∞
                    const pHitbox = { x: proj.position.x - projSize / 2, y: proj.position.y - projSize / 2, width: projSize, height: projSize };

                    for (const eBox of enemyHitboxes) {
                        if (checkCollision(pHitbox, eBox)) {
                            // –ü–µ—Ä–µ–¥–∞–µ–º ID –∏ —É—Ä–æ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                            handleEnemyHit(eBox.id, proj.damage);
                            hit = true;
                            break; // –°–Ω–∞—Ä—è–¥ –ø–æ–ø–∞–ª, –¥–∞–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                        }
                    }
                }

                // –£–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
                if (proj.lifetime > 0 && !hit) {
                    activeProjectiles.push(proj); // –û—Å—Ç–∞–≤–ª—è–µ–º
                } else {
                    // –£–¥–∞–ª—è–µ–º –º–µ—à –∏ —á–∏—Å—Ç–∏–º —Ä–µ—Å—É—Ä—Å—ã
                    if (proj.mesh) {
                        currentScene?.remove(proj.mesh);
                        proj.mesh.geometry?.dispose();
                        proj.mesh.material?.dispose();
                    }
                }
            });
            projectilesRef.current = activeProjectiles; // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–Ω–∞—Ä—è–¥–æ–≤

            // ==================================
            // === 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í—Ä–∞–≥–æ–≤ ========
            // ==================================
            enemyRefs?.forEach(enemy => {
                // 1. --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
                const enemyState = enemiesState?.find(es => es.id === enemy.id); // –°–æ—Å—Ç–æ—è–Ω–∏–µ HP

                // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –≤—Ä–∞–≥, –µ–≥–æ pivot, —Å—Ç–∞—Ç—ã, –∏ –Ω–µ –ø–æ–º–µ—á–µ–Ω –ª–∏ –æ–Ω –∫–∞–∫ –º–µ—Ä—Ç–≤—ã–π
                if (!enemy || !enemy.pivot || !enemy.stats || enemy.isDead || !enemyState) {
                     // –ï—Å–ª–∏ –≤—Ä–∞–≥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –º–µ—Ä—Ç–≤—ã–π, –Ω–æ —Ö–µ–ª—Å–±–∞—Ä –µ—â–µ –≤–∏–¥–µ–Ω - —Å–∫—Ä—ã—Ç—å
                    if (enemy?.isDead && enemy.hpBar?.container?.visible) {
                         enemy.hpBar.container.visible = false;
                     }
                     // –ï—Å–ª–∏ –≤—Ä–∞–≥ –º–µ—Ä—Ç–≤ –∏ —É –Ω–µ–≥–æ –±—ã–ª –ª—É—á, —É–¥–∞–ª—è–µ–º –ª—É—á
                     if (enemy?.isDead && enemy.beamEffectMesh) {
                          removeBeamMesh(enemy);
                     }
                    return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ –≤—Ä–∞–≥–∞
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–º–µ—Ä –ª–∏ –≤—Ä–∞–≥ –¢–û–õ–¨–ö–û –ß–¢–û (HP <= 0, –Ω–æ isDead –µ—â–µ false)
                 if (enemyState.currentHp <= 0 /* && !enemy.isDead - —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ */) {
                    enemy.isDead = true; // –ü–æ–º–µ—á–∞–µ–º –∑–¥–µ—Å—å
                    console.log(`--- –í—Ä–∞–≥ ${enemy.id} (${enemy.type}) –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ isDead –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ (HP=${enemyState.currentHp}) ---`);

                     // --- –õ–û–ì–ò–ö–ê –ü–†–ò –°–ú–ï–†–¢–ò (–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É) ---
                     if (enemy.type === 'rotting_soldier' && !enemy.exploded) {
                        console.log(`Rotting Soldier ${enemy.id} EXPLODES!`);
                         // TODO: –≠—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ (–≤–∏–∑—É–∞–ª—å–Ω—ã–π/–∑–≤—É–∫–æ–≤–æ–π) –≤ —Ç–æ—á–∫–µ ePos
                         const ePos = enemy.pivot.position;

                         // –£—Ä–æ–Ω –∏–≥—Ä–æ–∫—É –æ—Ç –≤–∑—Ä—ã–≤–∞
                         if (enemy.stats.explosionDamage && typeof playerTakeDamage === 'function') {
                             const explosionRadius = enemy.stats.explosionRadius || 50; // –†–∞–¥–∏—É—Å –∏–∑ —Å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
                             const distToPlayer = ePos.distanceTo(playerPos);
                             if (distToPlayer <= explosionRadius) {
                                 console.log(`... Player takes ${enemy.stats.explosionDamage} explosion damage`);
                                 playerTakeDamage(enemy.stats.explosionDamage);
                             }
                         }
                         // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞–∫–∞ —è–¥–∞ –≤ –º–µ—Å—Ç–µ —Å–º–µ—Ä—Ç–∏
                         createPoisonCloud(ePos.clone());
                         enemy.exploded = true; // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –≤–∑–æ—Ä–≤–∞–ª—Å—è
                         if(enemy.pivot) enemy.pivot.visible = false; // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å/–∑–∞–≥–ª—É—à–∫—É
                         if(enemy.hpBar?.container) enemy.hpBar.container.visible = false; // –°–∫—Ä—ã–≤–∞–µ–º —Ö–µ–ª—Å–±–∞—Ä

                         // –¢–∞–∫ –∫–∞–∫ –æ–Ω —Å–∫—Ä—ã—Ç, –º–æ–∂–Ω–æ –¥–∞–ª—å—à–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å AI –∏ —Ç.–¥.
                         return; // !!! –í–ê–ñ–ù–û: –≤—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ –≤—Ä–∞–≥–∞ !!!

                     } else if (enemy.type === 'cursed_carrier') {
                          // –°–ø–∞–≤–Ω –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
                          // const ePos = enemy.pivot.position;
                          // summonCreature(enemy.stats.summonType || 'skeleton_swordsman', enemy.stats.summonCount || 1, ePos.clone());
                          // console.log(`Cursed Carrier ${enemy.id} summoned on death`);
                     }

                    // –£–±–∏—Ä–∞–µ–º –ª—É—á, –µ—Å–ª–∏ –º–∞–≥ —É–º–µ—Ä –≤–æ –≤—Ä–µ–º—è –∫–∞—Å—Ç–∞
                    if (enemy.beamEffectMesh) removeBeamMesh(enemy);

                    // TODO: –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ—Ä—Ç–∏? –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑.
                    // enemy.actions?.[deathActionName]?.reset().play();

                    // –ü–æ—Å–ª–µ –ø–æ–º–µ—Ç–∫–∏ isDead –≤—Ä–∞–≥ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–¥—Ä–∞—Ö,
                    // –Ω–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –æ—Å–æ–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏ (–∫–∞–∫ –≤–∑—Ä—ã–≤), –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∑–¥–µ—Å—å.
                    // –°–∞–º–æ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ —Å—Ü–µ–Ω—ã –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ–∑–∂–µ (–∏–ª–∏ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã—Ç).
                    return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ä—Ç–≤–æ–≥–æ –≤—Ä–∞–≥–∞
                 }


                // --- –ï—Å–ª–∏ –≤—Ä–∞–≥ –∂–∏–≤ (–ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏) ---
                const ePivot = enemy.pivot;
                const ePos = ePivot.position;
                const eStats = enemy.stats;
                const mixer = enemy.mixer; // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π –º–∏–∫—Å–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
                // playerPos —É–∂–µ –µ—Å—Ç—å

                // 2. --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å) ---
                mixer?.update(dt);

                // 3. --- –†–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –¥–æ –∏–≥—Ä–æ–∫–∞ ---
                const dist = ePos.distanceTo(playerPos);

                // 4. --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –•–µ–ª—Å–±–∞—Ä–∞ (–∏–∑ code2, –Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π isDead) ---
                if (enemy.hpBar?.container && enemy.hpBar?.fill && enemyState.maxHp > 0 /* && !enemy.isDead - —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ */) {
                     const hpPercent = Math.max(0, enemyState.currentHp / enemyState.maxHp); // –ù–µ –¥–∞–µ–º —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å
                     const fillMesh = enemy.hpBar.fill;
                     const container = enemy.hpBar.container;
                     const newScaleX = Math.max(0.001, hpPercent); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –∏—Å—á–µ–∑–∞–ª —Å–æ–≤—Å–µ–º
                     // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª–æ—Å–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞
                     const newPosX = (HEALTH_BAR_WIDTH * (newScaleX - 1)) / 2;
                     fillMesh.scale.x = newScaleX;
                     fillMesh.position.x = newPosX;
                     container.visible = true; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
                     // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫ –∫–∞–º–µ—Ä–µ
                     if (currentCamera) { container.quaternion.copy(currentCamera.quaternion); }
                } else if (enemy.hpBar?.container) {
                     container.visible = false; // –°–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ HP <= 0 –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                }

                // 5. --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–£–õ–î–ê–£–ù–û–í ---
                if (enemy.attackCooldown > 0) enemy.attackCooldown -= dt;
                if (enemy.abilityCooldown > 0) enemy.abilityCooldown -= dt;
                // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫—É–ª–¥–∞—É–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (typeof enemy.beamEffectTimer === 'number' && enemy.beamEffectTimer > 0) {
                    enemy.beamEffectTimer -= dt;
                    if (enemy.beamEffectTimer <= 0) {
                        removeBeamMesh(enemy); // –£–±–∏—Ä–∞–µ–º –ª—É—á –ø–æ —Ç–∞–π–º–µ—Ä—É
                    }
                }

                 // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è AI ---
                 const atkRange = eStats.attackRange || 50; // –ë–∞–∑–æ–≤–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏/–∞–≥—Ä–æ
                 const playerInAttackRange = dist <= atkRange;
                 const aggroMultiplier = 5; // –ù–∞—Å–∫–æ–ª—å–∫–æ –¥–∞–ª—å—à–µ –≤–∏–¥–∏—Ç –≤—Ä–∞–≥, —á–µ–º –∞—Ç–∞–∫—É–µ—Ç
                 const aggroRange = atkRange * aggroMultiplier;
                 const playerInAggroRange = dist <= aggroRange;
                 const baseSpeed = eStats.speed || 1.5; // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–ø–∏–∫—Å–µ–ª–µ–π –≤ —Å–µ–∫—É–Ω–¥—É?)
                 const moveSpeed = baseSpeed * dt; // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞ –∫–∞–¥—Ä

                 // –°–æ—Å—Ç–æ—è–Ω–∏—è AI –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–≤–µ–¥–µ–Ω–∏–π (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤–æ–≤–Ω–µ)
                 let currentAiState = enemy.aiState || 'idle'; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                 // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤—Ä–∞–≥–∞ ---
                 const rotateEnemyTowards = (targetPosition, rotationSpeed = 0.08) => {
                     const direction = new THREE.Vector3().subVectors(targetPosition, ePos);
                     if (direction.lengthSq() < 0.01) return; // –ù–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ —Ü–µ–ª—å —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ
                     const angle = Math.atan2(direction.y, direction.x);
                     let targetZ = angle - Math.PI / 2; // –ú–æ–¥–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç –ø–æ Y+
                     const currentZ = ePivot.rotation.z;
                     const twoPi = Math.PI * 2;
                     let diff = targetZ - currentZ;
                     while (diff < -Math.PI) diff += twoPi;
                     while (diff > Math.PI) diff -= twoPi;
                     const threshold = 0.05; // –ü–æ—Ä–æ–≥ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏–ª–∏ –Ω–∞—á–∞–ª–∞ lerp
                     if (Math.abs(diff) > threshold) {
                         ePivot.rotation.z += diff * rotationSpeed; // –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
                     } else {
                          ePivot.rotation.z = targetZ; // –†–µ–∑–∫–∏–π –ø–æ–≤–æ—Ä–æ—Ç, –µ—Å–ª–∏ –ø–æ—á—Ç–∏ –¥–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å
                     }
                     ePivot.rotation.order = 'XYZ'; // –ü–æ—Ä—è–¥–æ–∫ –≤—Ä–∞—â–µ–Ω–∏—è
                     ePivot.rotation.x = 0;
                     ePivot.rotation.y = 0;
                 };

                 // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –≤—Ä–∞–≥–∞ —Å –∫–æ–ª–ª–∏–∑–∏—è–º–∏ ---
                 const moveEnemy = (directionVector, speed) => {
                      if (speed <= 0) return;
                      const moveDir = directionVector.clone().normalize();
                      const dx = moveDir.x * speed;
                      const dy = moveDir.y * speed;

                      let nextX = ePos.x + dx;
                      let nextY = ePos.y + dy;
                      const ENEMY_COLLISION_SIZE = { width: 30, height: 30 }; // –†–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π
                      const eRect = { x: ePos.x - ENEMY_COLLISION_SIZE.width / 2, y: ePos.y - ENEMY_COLLISION_SIZE.height / 2, width: ENEMY_COLLISION_SIZE.width, height: ENEMY_COLLISION_SIZE.height };

                      let colX = false; let colY = false;
                      const eRectX = { ...eRect, x: nextX - ENEMY_COLLISION_SIZE.width / 2 };
                      for (const wall of wallsRef.current) { if (checkCollision(eRectX, wall)) { colX = true; break; } }
                      const eRectY = { ...eRect, y: nextY - ENEMY_COLLISION_SIZE.height / 2 };
                      for (const wall of wallsRef.current) { if (checkCollision(eRectY, wall)) { colY = true; break; } }

                      if (!colX) ePos.x = nextX;
                      if (!colY) ePos.y = nextY;

                      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –º–∏—Ä–∞ (–≤–∞–∂–Ω–æ!)
                      const eSizeHW = ENEMY_COLLISION_SIZE.width / 2;
                      const eSizeHH = ENEMY_COLLISION_SIZE.height / 2;
                      const minX = -levelConfig.gameWorldWidth / 2 + eSizeHW;
                      const maxX = levelConfig.gameWorldWidth / 2 - eSizeHW;
                      const minYw = -levelConfig.WORLD_Y_OFFSET + eSizeHH;
                      const maxYw = levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - eSizeHH;
                      ePos.x = clamp(ePos.x, minX, maxX);
                      ePos.y = clamp(ePos.y, minYw, maxYw);

                      return { collidedX: colX, collidedY: colY }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏
                 };

                 // --- TODO: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ ---
                 const playAnimation = (animName) => {
                      // if (!enemy.actions || !enemy.actions[animName]) return;
                      // // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω—É–∂–Ω—É—é
                      // Object.values(enemy.actions).forEach(action => {
                      //     if (action !== enemy.actions[animName]) action.fadeOut(0.2);
                      // });
                      // enemy.actions[animName].reset().fadeIn(0.2).play();
                 };


                // 6. --- –õ–û–ì–ò–ö–ê –ò–ò (switch –∏–∑ code1, –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–æ) ---
                if (enemy.attackCooldown > 0) enemy.attackCooldown -= dt;
                if (enemy.abilityCooldown > 0) enemy.abilityCooldown -= dt;
                
                // –§–ª–∞–≥–∏ –¥–ª—è –æ–±—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                let shouldMove = false;
                let moveTargetPos = playerPos.clone(); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–≤–∏–∂–µ–º—Å—è –∫ –∏–≥—Ä–æ–∫—É
                let shouldRotate = false;
                let rotateTargetPos = playerPos.clone(); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –∏–≥—Ä–æ–∫–∞
                
                // --- –í—ã–±–æ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ –¢–ò–ü–£ –í–†–ê–ì–ê ---
                switch (enemy.type) {
                
                    // === –ë–õ–ò–ñ–ù–ò–ô –ë–û–ô (–û–°–ù–û–í–ù–û–ô) ===
                    case 'melee':
                    case 'boss': // –ë–æ—Å—Å –ø–æ–∫–∞ –≤–µ–¥–µ—Ç —Å–µ–±—è –∫–∞–∫ –º–∏–ª–∏
                    case 'skeleton_swordsman':
                    case 'cursed_gladiator':
                    case 'revenant_knight': // –†—ã—Ü–∞—Ä—å —Ç–æ–∂–µ, –Ω–æ —Å –±–ª–æ–∫–æ–º
                    case 'rotting_soldier': // –¢–æ–∂–µ –º–∏–ª–∏, –ø–æ–∫–∞ –∂–∏–≤
                    case 'cursed_carrier': // –¢–æ–∂–µ –º–∏–ª–∏, –Ω–æ –µ—â–µ –∏ —Å–ø–∞—É–Ω–∏—Ç
                    {
                        const atkRange = eStats.attackRange || 25;
                        const playerInAttackRange = dist <= atkRange;
                        const aggroMult = 5;
                        const aggroRange = atkRange * aggroMult;
                        const inAggroRange = dist <= aggroRange;
                        let isAttacking = false;
                
                        // --- –õ–æ–≥–∏–∫–∞ –†—ã—Ü–∞—Ä—è (–ë–ª–æ–∫) ---
                        let canAttack = true;
                        if (enemy.type === 'revenant_knight') {
                            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—Ä—è–¥—ã –±–ª–æ–∫–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                            if (typeof enemy.blockCharges === 'undefined') {
                                 enemy.blockCharges = enemy.stats.initialBlockCharges || 0; // –ë–µ—Ä–µ–º –∏–∑ –æ—Ç–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤
                                 console.log(`Knight ${enemy.id} initialized with ${enemy.blockCharges} block charges.`);
                            }
                            if (enemy.blockCharges > 0) {
                                canAttack = false; // –ù–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –ø–æ–∫–∞ –µ—Å—Ç—å –±–ª–æ–∫? –ò–ª–∏ –º–æ–∂–µ—Ç? –†–µ—à–∏ —Å–∞–º.
                                // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –±–ª–æ–∫–∞? –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —â–∏—Ç–∞?
                            }
                            // –õ–æ–≥–∏–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ handleEnemyHit
                        }
                        // --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –†—ã—Ü–∞—Ä—è ---
                
                        if (playerInAttackRange && enemy.attackCooldown <= 0 && canAttack) { // –ê—Ç–∞–∫–∞
                            let currentDamage = eStats.damage || 5;
                            // --- –õ–æ–≥–∏–∫–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä–∞ (–°—Ç–∞–∫–∏) ---
                            if (enemy.type === 'cursed_gladiator') {
                                if (typeof enemy.damageStacks === 'undefined') enemy.damageStacks = 0;
                                currentDamage += enemy.damageStacks * (eStats.stackDamageBonus || 1);
                                enemy.damageStacks++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞–∫–∏ –ü–û–°–õ–ï –∞—Ç–∞–∫–∏
                            }
                            // --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä–∞ ---
                
                            console.log(`${enemy.id} (${enemy.type}) attacks player! Damage: ${currentDamage}`);
                            if (typeof playerTakeDamage === 'function') playerTakeDamage(currentDamage);
                            enemy.attackCooldown = 1 / (eStats.attackSpeed || 1.0);
                            isAttacking = true;
                            // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
                
                        } else if (inAggroRange && !playerInAttackRange) { // –ü—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
                            shouldMove = true;
                            moveTargetPos = playerPos.clone();
                            shouldRotate = true;
                            rotateTargetPos = playerPos.clone();
                            // TODO: –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã
                        } else if (!inAggroRange && enemy.type === 'cursed_carrier' && enemy.abilityCooldown <= 0) {
                             // –ù–æ—Å–∏–ª—å—â–∏–∫ —Å–ø–∞—É–Ω–∏—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–∞–ª–µ–∫–æ? –ò–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç? –†–µ—à–∏–º –ø–æ–∫–∞ —Ç–∞–∫.
                              console.log(`Carrier ${enemy.id} summons while idle...`);
                              // summonCreature(eStats.summonType || 'skeleton_swordsman', eStats.summonCount || 1, ePos);
                              enemy.abilityCooldown = eStats.summonCooldown || 15.0;
                              // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–∑—ã–≤–∞?
                        }
                        else { // –ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ
                             // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle
                             // –£ —Ä—ã—Ü–∞—Ä—è –º–æ–∂–µ—Ç –±—ã—Ç—å BlockIdle
                             // if (enemy.type === 'revenant_knight' && enemy.blockCharges > 0) { /* –ê–Ω–∏–º–∞—Ü–∏—è BlockIdle */ }
                        }
                
                        // --- –õ–æ–≥–∏–∫–∞ –ù–æ—Å–∏–ª—å—â–∏–∫–∞ (–°–ø–∞—É–Ω –ø–æ –ö–î, –µ—Å–ª–∏ –Ω–µ –∞—Ç–∞–∫—É–µ—Ç) ---
                         if (enemy.type === 'cursed_carrier' && !isAttacking && enemy.abilityCooldown <= 0) {
                              console.log(`Carrier ${enemy.id} summons...`);
                              // summonCreature(eStats.summonType || 'skeleton_swordsman', eStats.summonCount || 1, ePos);
                              enemy.abilityCooldown = eStats.summonCooldown || 15.0; // –°–±—Ä–æ—Å –ö–î
                              // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–∑—ã–≤–∞?
                         }
                         // --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –ù–æ—Å–∏–ª—å—â–∏–∫–∞ ---
                
                        break; // –ö–æ–Ω–µ—Ü case –¥–ª—è –º–∏–ª–∏-–ø–æ–¥–æ–±–Ω—ã—Ö
                    }
                
                
                    // === –î–ê–õ–¨–ù–ò–ô –ë–û–ô (–°–Ω–∞—Ä—è–¥—ã) ===
                    case 'ranged':
                    case 'skeleton_archer':
                    {
                         const atkRange = eStats.attackRange || 100;
                         const playerInAttackRange = dist <= atkRange;
                         shouldRotate = playerInAttackRange; // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∏–¥–∏–º —Ü–µ–ª—å?
                
                         if (playerInAttackRange) {
                             if (enemy.attackCooldown <= 0) {
                                 console.log(`${enemy.id} firing projectile!`);
                                 // createEnemyProjectile(enemy, playerPos); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞
                                 enemy.attackCooldown = 1 / (eStats.attackSpeed || 0.8);
                                 // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
                             } else {
                                 // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏/–æ–∂–∏–¥–∞–Ω–∏—è
                             }
                         } else {
                             // --- –ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–µ - —Å—Ç–æ–∏–º –Ω–∞ –º–µ—Å—Ç–µ) ---
                             // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                             shouldMove = false;
                             // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle
                         }
                         rotateTargetPos = playerPos.clone(); // –¶–µ–ª—å –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤—Å–µ–≥–¥–∞ –∏–≥—Ä–æ–∫, –µ—Å–ª–∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è
                         break;
                     }
                
                
                    // === –ö–ê–°–¢–ï–†–´ (–õ—É—á–∏ / –°–Ω–∞—Ä—è–¥—ã –≤ —Ç–æ—á–∫—É) ===
                    case 'caster': // –û–≥–æ–Ω—å/–õ–µ–¥
                    case 'ghostly_enchanter': // –û—Å–ª–∞–±–ª–µ–Ω–∏–µ
                    case 'ogre_mage': // –°–Ω–∞—Ä—è–¥ –≤ —Ç–æ—á–∫—É
                    {
                        const atkRange = eStats.attackRange || 300;
                        const playerInAttackRange = dist <= atkRange;
                        shouldRotate = playerInAttackRange; // –ü–æ–≤–æ—Ä–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∏–¥–∏—Ç –∏–≥—Ä–æ–∫–∞
                        rotateTargetPos = playerPos.clone();
                
                        if (playerInAttackRange) {
                             if (enemy.attackCooldown <= 0) {
                                  // –ö–∞—Å—Ç—É–µ–º!
                                  enemy.attackCooldown = 1 / (eStats.attackSpeed || 0.5);
                                  // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Å—Ç–∞ ('Attack')
                
                                 if (enemy.type === 'ogre_mage') {
                                     enemy.targetPosition = playerPos.clone(); // –ó–∞–ø–æ–º–Ω–∏—Ç—å —Ç–æ—á–∫—É
                                     console.log(`Ogre Mage ${enemy.id} attacks target point!`);
                                     // TODO: createProjectileToPoint(ePos, enemy.targetPosition, eStats.damage || 10, 400); // –°–æ–∑–¥–∞—Ç—å —Å–Ω–∞—Ä—è–¥, –ª–µ—Ç—è—â–∏–π –≤ —Ç–æ—á–∫—É
                                 } else if (enemy.type === 'ghostly_enchanter') {
                                     console.log(`Enchanter ${enemy.id} applies weaken!`);
                                     // TODO: applyPlayerDebuff('weaken', eStats.debuffDuration || 5, eStats.debuffStrength || 0.2); // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–±–∞—Ñ—Ñ
                                     // TODO: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª—É—á–∞ –æ—Å–ª–∞–±–ª–µ–Ω–∏—è? (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å createBeamMeshFixed/updateBeamMesh)
                                 } else { // –û–±—ã—á–Ω—ã–µ –º–∞–≥–∏ –æ–≥–Ω—è/–ª—å–¥–∞
                                      if (typeof playerTakeDamage === 'function') playerTakeDamage(eStats.beamDamage || 1); // –£—Ä–æ–Ω –æ—Ç –ª—É—á–∞ (–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π?)
                                      if (eStats.beamType === 'fire') { console.log("Applying FIRE DoT (placeholder)"); /* TODO: applyPlayerDoT('fire', ...) */ }
                                      else if (eStats.beamType === 'ice') { console.log("Applying ICE Freeze (placeholder)"); /* TODO: applyPlayerStatus('frozen', ...) */ }
                                      // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª—É—á–∞
                                      if(enemy.beamEffectMesh) removeBeamMesh(enemy);
                                      enemy.beamEffectMesh = createBeamMeshFixed(enemy, playerPos);
                                      if (enemy.beamEffectMesh) enemy.beamEffectTimer = eStats.beamEffectDuration || 1.0;
                                 }
                             } else {
                                 // –û–∂–∏–¥–∞–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞
                                  if (enemy.beamEffectMesh) updateBeamMesh(enemy.beamEffectMesh, ePos, playerPos); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª—É—á
                                 // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle –∏–ª–∏ Aiming
                             }
                         } else { // –ò–≥—Ä–æ–∫ –≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞
                             if (enemy.beamEffectMesh) removeBeamMesh(enemy); // –£–±–∏—Ä–∞–µ–º –ª—É—á
                             // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle
                         }
                          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∞ –ª—É—á–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É
                          if (enemy.beamEffectMesh && enemy.beamEffectTimer > 0) {
                              enemy.beamEffectTimer -= dt;
                              if (enemy.beamEffectTimer <= 0) removeBeamMesh(enemy);
                          }
                         break;
                    }
                
                
                    // === –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ù–û–í–´–ï –¢–ò–ü–´ ===
                
                    case 'necromancer': {
                        shouldRotate = true; // –í—Å–µ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞
                        rotateTargetPos = playerPos.clone();
                        // –ü—Ä–∏–∑—ã–≤ –ø–æ –∫—É–ª–¥–∞—É–Ω—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                        if (enemy.abilityCooldown <= 0) {
                            console.log(`Necromancer ${enemy.id} summons ${eStats.summonCount || 1} ${eStats.summonType || 'skeleton_spirit'}!`);
                            // TODO: –í—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é summonCreature(eStats.summonType || 'skeleton_spirit', eStats.summonCount || 1, ePos);
                            enemy.abilityCooldown = eStats.summonCooldown || 10.0; // –°–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–∞
                            // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–∑—ã–≤–∞ ('Attack'?)
                        } else {
                            // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle
                        }
                        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É –∏–ª–∏ –æ—Ç –Ω–µ–≥–æ?
                        break;
                    }
                
                    case 'bone_dancer': {
                        const desiredDist = 60; // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –æ—Ä–±–∏—Ç—ã
                        const orbitSpeed = (eStats.speed || 3.0) * 60 * dt; // –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
                        const adjustSpeed = orbitSpeed * 0.5; // –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
                
                        let dirToPlayer = new THREE.Vector3().subVectors(playerPos, ePos);
                        let currentDist = dirToPlayer.length();
                        let tangentDir = new THREE.Vector3(-dirToPlayer.y, dirToPlayer.x, 0).normalize(); // –ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä
                        let radialDir = dirToPlayer.normalize(); // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫/–æ—Ç –∏–≥—Ä–æ–∫–∞
                
                        let moveVector = tangentDir; // –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π
                
                        // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
                        if (currentDist < desiredDist - 5) { // –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ - –æ—Ç–±–µ–≥–∞–µ–º
                             moveVector.sub(radialDir.multiplyScalar(adjustSpeed / orbitSpeed)); // –í—ã—á–∏—Ç–∞–µ–º —á–∞—Å—Ç—å —Ä–∞–¥–∏–∞–ª—å–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
                        } else if (currentDist > desiredDist + 5) { // –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ - –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è
                             moveVector.add(radialDir.multiplyScalar(adjustSpeed / orbitSpeed)); // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Ä–∞–¥–∏–∞–ª—å–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
                        }
                
                        moveVector.normalize().multiplyScalar(orbitSpeed); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
                        const nextX = ePos.x + moveVector.x;
                        const nextY = ePos.y + moveVector.y;
                        // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π —Å–æ —Å—Ç–µ–Ω–∞–º–∏ –¥–ª—è nextX, nextY
                        ePos.x = nextX;
                        ePos.y = nextY;
                
                        shouldRotate = true; // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è
                        rotateTargetPos = playerPos.clone(); // –°–º–æ—Ç—Ä–∏–º –Ω–∞ –∏–≥—Ä–æ–∫–∞ (–∏–ª–∏ –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é?)
                        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –±–µ–≥–∞ ('Walk')
                        break;
                    }
                
                
                    case 'plague_totemist': {
                         shouldRotate = true; // –°–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞
                         rotateTargetPos = playerPos.clone();
                         // –°—Ç–∞–≤–∏—Ç —Ç–æ—Ç–µ–º –ø–æ –∫—É–ª–¥–∞—É–Ω—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                         if (enemy.abilityCooldown <= 0) {
                             console.log(`Totemist ${enemy.id} places a ${eStats.totemType || 'debuff'} totem!`);
                             // TODO: –í—ã–∑–≤–∞—Ç—å placeTotem(ePos, eStats.totemType || 'debuff_slow', ...);
                             enemy.abilityCooldown = eStats.totemCooldown || 12.0;
                             // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Å—Ç–∞ ('Attack'?)
                         } else {
                             // TODO: –°—Ç–æ—è—Ç—å –∏–ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è? –ê–Ω–∏–º–∞—Ü–∏—è Idle.
                         }
                        break;
                     }
                
                
                    case 'sand_reaper': {
                         shouldRotate = true; // –°–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞
                         rotateTargetPos = playerPos.clone();
                         // –ö–∞—Å—Ç—É–µ—Ç —à–∏–ø—ã –ø–æ –∫—É–ª–¥–∞—É–Ω—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                         if (enemy.abilityCooldown <= 0) {
                             console.log(`Sand Reaper ${enemy.id} summons spikes under player!`);
                             // TODO: –í—ã–∑–≤–∞—Ç—å triggerGroundSpikes(playerPos.clone(), eStats.spikeDelay || 1.0, ...);
                             enemy.abilityCooldown = eStats.abilityCooldown || 5.0;
                             // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Å—Ç–∞ ('Attack'?)
                         } else {
                             // TODO: –°—Ç–æ—è—Ç—å –∏–ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è? –ê–Ω–∏–º–∞—Ü–∏—è Idle.
                         }
                        break;
                     }
                
                
                    case 'poison_cultist': {
                         shouldRotate = true; // –°–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞
                         rotateTargetPos = playerPos.clone();
                         const atkRange = eStats.attackRange || 200; // –†–∞–¥–∏—É—Å –¥–ª—è –∞—Ç–∞–∫–∏
                         const playerInAttackRange = dist <= atkRange;
                
                         if (playerInAttackRange && enemy.abilityCooldown <= 0) { // –ê—Ç–∞–∫—É–µ—Ç –≤ —Ä–∞–¥–∏—É—Å–µ –ø–æ –ö–î
                             console.log(`Cultist ${enemy.id} throws poison puddle!`);
                             // TODO: –í—ã–∑–≤–∞—Ç—å createPoisonPuddle(playerPos.clone(), ...); // –ö–∏–¥–∞–µ—Ç –≤ –∏–≥—Ä–æ–∫–∞
                             enemy.abilityCooldown = eStats.abilityCooldown || 8.0;
                             // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ ('Attack')
                         } else {
                             // TODO: –°—Ç–æ—è—Ç—å –∏–ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è? –ê–Ω–∏–º–∞—Ü–∏—è Idle.
                         }
                        break;
                     }
                
                    default:
                        console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø –≤—Ä–∞–≥–∞ –≤ switch: ${enemy.type}`);
                        // –ë–∞–∑–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ —Å—Ç–æ—è—Ç—å
                        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle
                        break;
                } // --- –ö–æ–Ω–µ—Ü switch(enemy.type) ---
                
                // --- –û–±—â–∞—è –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö: –ü–æ–≤–æ—Ä–æ—Ç –∏ –î–≤–∏–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ---
                if (shouldRotate && rotateTargetPos) {
                   // rotateEnemyToTarget(ePivot, rotateTargetPos, dt, 0.05); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞
                   // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞:
                    let dirRot = new THREE.Vector3().subVectors(rotateTargetPos, ePos);
                    const angle = Math.atan2(dirRot.y, dirRot.x);
                    let targetZ = angle + Math.PI / 2; // +PI/2 —Ç.–∫. –º–æ–¥–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç –ø–æ Y
                    const curZ = ePivot.rotation.z;
                    const twoPi = Math.PI * 2;
                    let diff = targetZ - curZ;
                    while (diff < -Math.PI) diff += twoPi;
                    while (diff > Math.PI) diff -= twoPi;
                    const thresh = 0.05; // –ü–æ—Ä–æ–≥ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞
                    if (Math.abs(diff) > thresh) {
                        const lerp = 0.08; // –ü–ª–∞–≤–Ω–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞
                        ePivot.rotation.z = curZ + diff * lerp;
                    } else {
                        ePivot.rotation.z = targetZ; // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ, –µ—Å–ª–∏ –±–ª–∏–∑–∫–æ
                    }
                    ePivot.rotation.order = 'XYZ'; ePivot.rotation.x = 0; ePivot.rotation.y = 0;
                }
                
                if (shouldMove && moveTargetPos) {
                   // –î–≤–∏–∂–µ–Ω–∏–µ (—ç—Ç–æ—Ç –∫–æ–¥ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω—É–∂–Ω—ã–µ case –≤—ã—à–µ,
                   // –∑–¥–µ—Å—å –æ–Ω –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –∫–∞–∫ –±—ã–ª–æ —É –º–∏–ª–∏)
                   // let chaseDir = new THREE.Vector3().subVectors(moveTargetPos, ePos);
                   // const moveDir = chaseDir.normalize();
                   // const moveSpeed = (eStats.speed || 1.5) * dt * 60;
                   // if (moveSpeed > 0) {
                   //     const nextX = ePos.x + moveDir.x * moveSpeed;
                   //     const nextY = ePos.y + moveDir.y * moveSpeed;
                   //     // TODO: checkWallCollisionPlaceholder(...)
                   //     ePos.x = nextX;
                   //     ePos.y = nextY;
                   // }
                }
                
                }); // --- –ö–æ–Ω–µ—Ü enemyRefs.forEach ---
                

            // ==================================
            // === 5. –°–Ω–∞—Ä—è–¥—ã –í—Ä–∞–≥–æ–≤ ==========
            // ==================================
            const activeEnemyProjectiles = [];
            const PLAYER_HITBOX_SIZE = { width: 25, height: 25 }; // –•–∏—Ç–±–æ–∫—Å –∏–≥—Ä–æ–∫–∞ (—á—É—Ç—å –º–µ–Ω—å—à–µ –º–æ–¥–µ–ª–∏)
            const playerHitboxForEnemyProj = playerObject ? {
                 x: playerPos.x - PLAYER_HITBOX_SIZE.width / 2,
                 y: playerPos.y - PLAYER_HITBOX_SIZE.height / 2,
                 width: PLAYER_HITBOX_SIZE.width,
                 height: PLAYER_HITBOX_SIZE.height
             } : null;

            if (playerHitboxForEnemyProj) { // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–Ω–∞—Ä—è–¥—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∂–∏–≤ –∏ –µ—Å—Ç—å —Ö–∏—Ç–±–æ–∫—Å
                enemyProjectilesRef.current.forEach(proj => {
                    // –î–≤–∏–∂–µ–Ω–∏–µ
                    proj.position.add(proj.velocity.clone().multiplyScalar(dt));
                    proj.lifetime -= dt;
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—à–∞
                    if (proj.mesh) {
                        proj.mesh.position.copy(proj.position);
                        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å—Ç—Ä–µ–ª—ã/—Å–Ω–∞—Ä—è–¥–∞
                        proj.mesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), proj.velocity.clone().normalize());
                    }

                    let hitPlayer = false;
                    if (proj.lifetime > 0) {
                        // –•–∏—Ç–±–æ–∫—Å —Å–Ω–∞—Ä—è–¥–∞ –≤—Ä–∞–≥–∞
                        const projSize = 10; // –†–∞–∑–º–µ—Ä —Ö–∏—Ç–±–æ–∫—Å–∞ —Å—Ç—Ä–µ–ª—ã
                        const projHitbox = { x: proj.position.x - projSize / 2, y: proj.position.y - projSize / 2, width: projSize, height: projSize };
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ —Å –∏–≥—Ä–æ–∫–æ–º
                        if (checkCollision(projHitbox, playerHitboxForEnemyProj)) {
                            if (typeof playerTakeDamage === 'function') {
                                playerTakeDamage(proj.damage);
                            } else { console.error("playerTakeDamage is not a function!"); }
                            hitPlayer = true;
                        }
                        // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ —Å–æ —Å—Ç–µ–Ω–∞–º–∏ –¥–ª—è –≤—Ä–∞–∂–µ—Å–∫–∏—Ö —Å–Ω–∞—Ä—è–¥–æ–≤?
                    }

                    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
                    if (proj.lifetime > 0 && !hitPlayer) {
                        activeEnemyProjectiles.push(proj); // –û—Å—Ç–∞–≤–ª—è–µ–º
                    } else {
                        // –£–¥–∞–ª—è–µ–º –º–µ—à –∏ —á–∏—Å—Ç–∏–º —Ä–µ—Å—É—Ä—Å—ã
                        if (proj.mesh) {
                            currentScene?.remove(proj.mesh);
                            proj.mesh.geometry?.dispose();
                            proj.mesh.material?.dispose();
                        }
                    }
                });
                enemyProjectilesRef.current = activeEnemyProjectiles; // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤
            } else {
                 // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç (–∏–ª–∏ –µ–≥–æ —Ö–∏—Ç–±–æ–∫—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω), —É–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ —Å–Ω–∞—Ä—è–¥—ã
                 enemyProjectilesRef.current.forEach(proj => {
                     if (proj.mesh) {
                         currentScene?.remove(proj.mesh);
                         proj.mesh.geometry?.dispose();
                         proj.mesh.material?.dispose();
                     }
                 });
                 enemyProjectilesRef.current = [];
            }


            // ==================================
            // === 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–æ–±–µ–¥—ã/–ü—Ä–æ–∏–≥—Ä—ã—à–∞ =
            // ==================================
             // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø–æ HP —É–∂–µ –µ—Å—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º useEffect
             checkWinCondition(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã

            // ==================================
            // === 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ö–∞–º–µ—Ä—ã ========
            // ==================================
             if (playerObject && currentCamera && levelConfig) {
                 const camWidth = currentCamera.right - currentCamera.left;
                 const camHeight = currentCamera.top - currentCamera.bottom;
                 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∞ –∑–∞ –∫—Ä–∞—è –º–∏—Ä–∞
                 const targetXCam = clamp(
                     playerPos.x,
                     -levelConfig.gameWorldWidth / 2 + camWidth / 2, // –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
                     levelConfig.gameWorldWidth / 2 - camWidth / 2   // –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
                 );
                 const targetYCam = clamp(
                     playerPos.y,
                     -levelConfig.WORLD_Y_OFFSET + camHeight / 2, // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
                     levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - camHeight / 2 // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
                 );
                 // –ü–ª–∞–≤–Ω–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã
                 currentCamera.position.lerp(new THREE.Vector3(targetXCam, targetYCam, currentCamera.position.z), 0.1);
                 // lookAt –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∫–∞–º–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≤—Ä–∞—â–∞–µ—Ç—Å—è
                 // currentCamera.lookAt(currentCamera.position.x, currentCamera.position.y, 0);
             }


            // ==================================
            // === 8. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ =================
            // ==================================
            if (currentRenderer && currentScene && currentCamera) {
                try {
                     currentRenderer.render(currentScene, currentCamera);
                } catch (error) {
                     console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:", error);
                     setLevelStatus('error'); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
                     if(animationFrameId.current) cancelAnimationFrame(animationFrameId.current); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª
                     animationFrameId.current = null;
                     clock.stop();
                }
            }

        }; // --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ animate ---

        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞, –µ—Å–ª–∏ —Ü–∏–∫–ª –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if (!animationFrameId.current) {
            clock.start();
            lastTimestamp = performance.now(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º timestamp
            animationFrameId.current = requestAnimationFrame(animate);
        }

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è useEffect –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        return () => {
            console.log("<<< –û–°–¢–ê–ù–û–í–ö–ê –ò–ì–†–û–í–û–ì–û –¶–ò–ö–õ–ê (–û—á–∏—Å—Ç–∫–∞ useEffect) >>>");
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current);
                animationFrameId.current = null;
            }
            clock.stop();
            // –û—á–∏—Å—Ç–∫–∞ —Å–Ω–∞—Ä—è–¥–æ–≤ –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–∏–∫–ª–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
             projectilesRef.current.forEach(p => p.mesh && sceneRef.current?.remove(p.mesh));
             projectilesRef.current = [];
             enemyProjectilesRef.current.forEach(p => p.mesh && sceneRef.current?.remove(p.mesh));
             enemyProjectilesRef.current = [];
             enemyRefs?.forEach(e => { if (e.beamEffectMesh) removeBeamMesh(e); });
        };
    }, [ // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–¢—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω—ã!)
        // === –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±—ä–µ–∫—Ç—ã ===
        isLoading,         // –§–ª–∞–≥ –æ–±—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
        levelStatus,       // 'playing', 'won', 'lost', 'error'
        levelData,         // –î–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è (–¥–ª—è winCondition –∏ –¥—Ä.)
        levelConfig,       // –†–∞–∑–º–µ—Ä—ã –º–∏—Ä–∞ –∏ —Å–º–µ—â–µ–Ω–∏—è
        playerObject,      // –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–π)
        enemyRefs,         // –ú–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –≤—Ä–∞–≥–æ–≤
        enemiesState,      // –°–æ—Å—Ç–æ—è–Ω–∏–µ HP –≤—Ä–∞–≥–æ–≤
        playerStats,       // –°—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞
        beamTexturesLoaded,// –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä –ª—É—á–µ–π

        // === –§—É–Ω–∫—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –í–ù–ï —ç—Ç–æ–≥–æ useEffect ===
        playerTakeDamage,  // –§—É–Ω–∫—Ü–∏—è –∏–∑ useGameStore
        handleEnemyHit,    // useCallback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥—É
        winLevel,          // useCallback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–±–µ–¥—ã
        loseLevel,         // useCallback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
        difficulty         // –°–ª–æ–∂–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –ª–æ–≥–∏–∫—É –≤ —Ü–∏–∫–ª–µ, —Ö–æ—Ç—è —Å–µ–π—á–∞—Å –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ useEnemyLoader)
        // –§—É–Ω–∫—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –í–ù–£–¢–†–ò (animate, helpers), –Ω–µ –≤–∫–ª—é—á–∞—é—Ç—Å—è!
    ]);


    // === 11. –†–ï–ù–î–ï–† JSX (–∏–∑ code2, —Å –º–µ–ª–∫–∏–º–∏ –ø—Ä–∞–≤–∫–∞–º–∏) ===
    return (
        <div className="game-wrapper">
            {/* –û–≤–µ—Ä–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {isLoading && <LoadingScreen />} {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º LoadingScreen –∏–∑ code1 */}

            {/* –ò–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ visibility, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã */}
            <div className="game-container" style={{ visibility: isLoading ? 'hidden' : 'visible' }}>
                {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º HP –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∏ —Å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã */}
                {!isLoading && playerObject && typeof playerHp === 'number' && typeof displayMaxHp === 'number' && (
                    <HealthBar currentHp={playerHp} maxHp={displayMaxHp} />
                )}
                {/* –¢–∞–π–º–µ—Ä –≤—ã–∂–∏–≤–∞–Ω–∏—è */}
                {!isLoading && levelData?.winCondition?.type === 'survive_duration' && remainingTime !== null && levelStatus === 'playing' && (
                     <div className="survival-timer"> –í—ã–∂–∏—Ç—å: {Math.ceil(remainingTime)} —Å–µ–∫ </div>
                 )}
                {/* –ú–µ—Å—Ç–æ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ Three.js */}
                <div ref={mountRef} className="game-canvas"></div>
            </div>

            {/* –î–∂–æ–π—Å—Ç–∏–∫ - —Å–∫—Ä—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ */}
            <div id="joystick-container" className="joystick-container" style={{ visibility: isLoading ? 'hidden' : 'visible' }}></div>

            {/* –ü–æ–ø–∞–ø –ü–æ—Ä–∞–∂–µ–Ω–∏—è */}
            {levelStatus === 'lost' && (
                <GameOverPopup
                    onGoToMenu={() => {
                        if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'lost');
                        else console.warn("onLevelComplete –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
                    }}
                />
            )}

            {/* –ü–æ–ø–∞–ø –ü–æ–±–µ–¥—ã */}
            {levelStatus === 'won' && (
                 <div className="level-complete-overlay">
                     <h2>–ü–æ–±–µ–¥–∞!</h2>
                     {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ID —É—Ä–æ–≤–Ω—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å */}
                     <p>–£—Ä–æ–≤–µ–Ω—å {levelData.id} ({difficulty}) –ø—Ä–æ–π–¥–µ–Ω!</p>
                     <button onClick={() => {
                         if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'won');
                         else console.warn("onLevelComplete –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
                     }}>
                         –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                     </button>
                 </div>
             )}

             {/* –ü–æ–ø–∞–ø –û—à–∏–±–∫–∏ */}
             {levelStatus === 'error' && (
                  <div className="level-error-overlay">
                      <h2>–û—à–∏–±–∫–∞</h2>
                      <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ —É—Ä–æ–≤–Ω—è.</p>
                      <button onClick={() => {
                          if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'error');
                          else console.warn("onLevelComplete –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
                      }}>
                          –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                      </button>
                  </div>
              )}
        </div> // –ó–∞–∫—Ä—ã—Ç–∏–µ game-wrapper
    ); // –ó–∞–∫—Ä—ã—Ç–∏–µ return
}; // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Level

export default Level; // –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é