import * as THREE from "three";
// –î–æ–±–∞–≤–ª—è–µ–º useMemo –≤ –∏–º–ø–æ—Ä—Ç
import React, { useEffect, useRef, useState, useCallback, useMemo } from "react";
import nipplejs from "nipplejs";
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ö—É–∫–æ–≤
import usePlayerLoader from './usePlayerLoader'; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞ –≤–µ—Ä–Ω—ã
import useEnemyLoader from './useEnemyLoader';   // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞ –≤–µ—Ä–Ω—ã
// –ò–º–ø–æ—Ä—Ç —Å—Ç–æ—Ä–∞ –∏ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import useGameStore from '../store/useGameStore'; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π
import GameOverPopup from './GameOverPopup'; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π
// –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π
import "./styles.scss"; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π
import { clamp, checkCollision, convertTiledX, convertTiledY, DEFAULT_WORLD_WIDTH, DEFAULT_WORLD_HEIGHT } from './utils';


// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ª—É—á–∞ ---
const BEAM_WIDTH = 15; // <<<--- –ü–æ–¥–±–µ—Ä–∏ —à–∏—Ä–∏–Ω—É –ª—É—á–∞
const BEAM_TEXTURE_FIRE = '/assets/fire-beam.png'; // <<<--- –£–ö–ê–ñ–ò –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨
const BEAM_TEXTURE_ICE = '/assets/ice-beam.png';   // <<<--- –£–ö–ê–ñ–ò –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç HealthBar (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∑–¥–µ—Å—å –∂–µ) ---
const HealthBar = ({ currentHp, maxHp }) => {
    const healthPercent = maxHp > 0 ? Math.max(0, (currentHp / maxHp) * 100) : 0;
    return (
        <div className="health-bar-container">
            <div className="health-bar" style={{ width: `${healthPercent}%` }}></div>
        </div>
    );
};
// ---------------------------------------------

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –º–∏—Ä–∞ ---
// (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ useMemo –Ω–∏–∂–µ)
const getWorldDimensions = (levelData) => {
    const gameWorldWidth = levelData?.width || DEFAULT_WORLD_WIDTH;
    const gameWorldHeight = levelData?.height || DEFAULT_WORLD_HEIGHT;
    const WORLD_Y_OFFSET = gameWorldHeight / 2;
    return { gameWorldWidth, gameWorldHeight, WORLD_Y_OFFSET };
};
// ---------------------------------------------

// === –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –£—Ä–æ–≤–Ω—è ===
const Level = ({ levelData, onLevelComplete, onReady }) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è
    if (!levelData || typeof levelData.id === 'undefined') {
        return <div className="error-message">–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è!</div>;
    }

    const HEALTH_BAR_WIDTH = 30; // –¢–∞–∫–æ–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –≤ useEnemyLoader!

    // === –†–µ—Ñ—ã ===
    const mountRef = useRef(null);
    const cameraRef = useRef(null);
    const sceneRef = useRef(null);
    const rendererRef = useRef(null);
    const joystickRef = useRef(null);
    const animationFrameId = useRef(null);
    const wallsRef = useRef([]);
    const projectilesRef = useRef([]);
    const velocity = useRef({ x: 0, y: 0, force: 0 });
    const playerAttackCooldown = useRef(0);
    const levelStartTimeRef = useRef(null);
    const readyCalledRef = useRef(false);
    const enemyProjectilesRef = useRef([]); // <<<--- –ù–û–í–´–ô –†–ï–§: –°–Ω–∞—Ä—è–¥—ã –≤—Ä–∞–≥–æ–≤
    const beamTexturesRef = useRef({});
const [beamTexturesLoaded, setBeamTexturesLoaded] = useState(false);

    // === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
    const [isLoading, setIsLoading] = useState(true);
    const [levelStatus, setLevelStatus] = useState('playing');
    const [enemiesState, setEnemiesState] = useState([]);
    const [remainingTime, setRemainingTime] = useState(null);

    // === –ì–ª–æ–±–∞–ª—å–Ω—ã–π –°—Ç–æ—Ä ===
    const {
        playerHp,
        displayMaxHp,
        playerStats,
        playerTakeDamage,
        initializeLevelHp
    } = useGameStore(state => ({
        playerHp: state.playerHp,
        displayMaxHp: state.computedStats().hp,
        playerStats: state.computedStats(),
        playerTakeDamage: state.playerTakeDamage,
        initializeLevelHp: state.initializeLevelHp,
    }));

    useEffect(() => {
        console.log("Player Stats Loaded:", JSON.stringify(playerStats, null, 2));
    }, [playerStats]);
    // <<<--- –ö–û–ù–ï–¶ –õ–û–ì–ê ---<<<

    useEffect(() => {
        console.log("--- Level Mount/Data Change: –í—ã–∑–æ–≤ initializeLevelHp() ---");
        if (typeof initializeLevelHp === 'function') {
            initializeLevelHp(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º HP –≤ —Å—Ç–æ—Ä–µ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
        } else {
            console.error("–û–®–ò–ë–ö–ê: initializeLevelHp –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è!");
        }
        // –¢–∞–∫–∂–µ —Å–±—Ä–æ—Å–∏–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–≤–Ω—è –Ω–∞ 'playing' –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        setLevelStatus('playing');
    }, [initializeLevelHp, levelData]); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è
    // === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –£—Ä–æ–≤–Ω—è (–ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è) ===
    const levelConfig = useMemo(() => {
        // console.log("Calculating levelConfig..."); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–∞
        return getWorldDimensions(levelData);
    }, [levelData?.width, levelData?.height]);

     // --- !!! –ù–û–í–´–ô useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä –ª—É—á–µ–π !!! ---
     useEffect(() => {
        const textureLoader = new THREE.TextureLoader();
        let fireLoaded = false;
        let iceLoaded = false;
        let mounted = true;

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –ª—É—á–µ–π...");

        const checkTexLoadComplete = () => {
            if (fireLoaded && iceLoaded && mounted) {
                console.log("‚úÖ –¢–µ–∫—Å—Ç—É—Ä—ã –ª—É—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
                setBeamTexturesLoaded(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –≤—Å–µ –≥–æ—Ç–æ–≤–æ
            }
        };

        // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ –ª—É—á–∞
        textureLoader.load(
            BEAM_TEXTURE_FIRE,
            (texture) => {
                if (!mounted) return;
                console.log("üî• –¢–µ–∫—Å—Ç—É—Ä–∞ –û–≥–Ω—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                texture.encoding = THREE.sRGBEncoding; // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞
                beamTexturesRef.current.fire = texture;
                fireLoaded = true;
                checkTexLoadComplete();
            },
            undefined,
            (error) => {
                 if (!mounted) return;
                 console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${BEAM_TEXTURE_FIRE}:`, error);
                 fireLoaded = true; // –°—á–∏—Ç–∞–µ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º" –¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π
                 checkTexLoadComplete();
            }
        );

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–¥—è–Ω–æ–≥–æ –ª—É—á–∞
        textureLoader.load(
            BEAM_TEXTURE_ICE,
            (texture) => {
                if (!mounted) return;
                console.log("‚ùÑÔ∏è –¢–µ–∫—Å—Ç—É—Ä–∞ –õ—å–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                texture.encoding = THREE.sRGBEncoding;
                beamTexturesRef.current.ice = texture;
                iceLoaded = true;
                checkTexLoadComplete();
            },
            undefined,
            (error) => {
                 if (!mounted) return;
                 console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${BEAM_TEXTURE_ICE}:`, error);
                 iceLoaded = true; // –°—á–∏—Ç–∞–µ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º" –¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π
                 checkTexLoadComplete();
            }
        );

        return () => {
             mounted = false;
             // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Ä–æ–≤–Ω—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ –Ω–µ –Ω—É–∂–Ω—ã)
             // beamTexturesRef.current.fire?.dispose();
             // beamTexturesRef.current.ice?.dispose();
             // beamTexturesRef.current = {};
             // setBeamTexturesLoaded(false);
        }
    }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
// === 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–¶–ï–ù–´, –†–ï–ù–î–ï–†–ï–†–ê, –ö–ê–ú–ï–†–´ + –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–°–ê–ô–ó–ê ===
    // =======================================================================
    useEffect(() => {
        const scene = new THREE.Scene();
        sceneRef.current = scene;

        // –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É –°–ù–ê–ß–ê–õ–ê —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 2000);
        cameraRef.current = camera;
        camera.position.set(0, 0, 1000); // Z –≤–∞–∂–µ–Ω

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        rendererRef.current = renderer;
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.outputEncoding = THREE.sRGBEncoding;

        const mountPoint = mountRef.current;
        if (!mountPoint) { console.error("Mount point not found!"); setLevelStatus('error'); return; }

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–Ω–≤–∞—Å –≤ DOM
        mountPoint.innerHTML = "";
        mountPoint.appendChild(renderer.domElement);

        // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ ---
        const handleResize = () => {
            if (!mountRef.current || !rendererRef.current || !cameraRef.current) return;

            const width = mountPoint.clientWidth;
            const height = mountPoint.clientHeight;

            // 1. –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
            rendererRef.current.setSize(width, height);

            // 2. –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –æ—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∫–∞–º–µ—Ä—ã
            cameraRef.current.left = width / -2;
            cameraRef.current.right = width / 2;
            cameraRef.current.top = height / 2;
            cameraRef.current.bottom = height / -2;

            // 3. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –∫–∞–º–µ—Ä—ã
            cameraRef.current.updateProjectionMatrix();

            // console.log(`Canvas resized to: ${width}x${height}`); // –û—Ç–ª–∞–¥–∫–∞
        };

        // --- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ù–ê–ß–ê–õ–¨–ù–´–ô —Ä–∞–∑–º–µ—Ä –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã ---
        handleResize(); // –í—ã–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

        // --- –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è resize –æ–∫–Ω–∞ ---
        window.addEventListener('resize', handleResize);

        // --- –û—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã (—Å–≤–µ—Ç, —Ñ–æ–Ω, —Å—Ç–µ–Ω—ã) ---
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6); scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
        directionalLight.position.set(50, 150, 100); directionalLight.target.position.set(0, 0, 0);
        scene.add(directionalLight); scene.add(directionalLight.target);

        const textureLoader = new THREE.TextureLoader(); let backgroundMesh = null;
        if (levelData?.backgroundTexture) {
            textureLoader.load(levelData.backgroundTexture, (texture) => {
                 if (!sceneRef.current) return; texture.encoding = THREE.sRGBEncoding;
                 const bgGeometry = new THREE.PlaneGeometry(levelConfig.gameWorldWidth, levelConfig.gameWorldHeight);
                 const bgMaterial = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });
                 backgroundMesh = new THREE.Mesh(bgGeometry, bgMaterial); backgroundMesh.position.set(0, 0, -10); backgroundMesh.renderOrder = -1;
                 sceneRef.current.add(backgroundMesh);
            }, undefined, (error) => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞:", error));
        } else { scene.background = new THREE.Color(0x282c34); }

        wallsRef.current = [];
        if (levelData?.walls && levelData.walls.length > 0) {
             const wallMaterial = new THREE.MeshStandardMaterial({ color: 0x808080, roughness: 0.8, metalness: 0.2 });
             levelData.walls.forEach(wallData => {
                 const wallWidth = wallData.width; const wallHeight = wallData.height;
                 const wallX = convertTiledX(wallData.x, wallWidth, levelConfig.gameWorldWidth);
                 const wallY = convertTiledY(wallData.y, wallHeight, levelConfig.gameWorldHeight, levelConfig.WORLD_Y_OFFSET);
                 const wallGeometry = new THREE.BoxGeometry(wallWidth, wallHeight, 10);
                 const wallMesh = new THREE.Mesh(wallGeometry, wallMaterial);
                 wallMesh.position.set(wallX, wallY, -5.1); wallMesh.receiveShadow = true; scene.add(wallMesh);
                 wallsRef.current.push({id: wallData.id || `wall-${Math.random()}`, x: wallX - wallWidth / 2, y: wallY - wallHeight / 2, width: wallWidth, height: wallHeight, mesh: wallMesh});
             });
        }

        // --- –§—É–Ω–∫—Ü–∏—è –û—á–∏—Å—Ç–∫–∏ ---
        return () => {
            window.removeEventListener('resize', handleResize); // << –í–∞–∂–Ω–æ: –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
            // <<<--- –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ —Å–Ω–∞—Ä—è–¥–æ–≤ –≤—Ä–∞–≥–æ–≤ ---<<<
if (sceneRef.current && enemyProjectilesRef.current) {
     enemyProjectilesRef.current.forEach(proj => {
         if (proj.mesh) {
             sceneRef.current.remove(proj.mesh);
             proj.mesh.geometry?.dispose();
             proj.mesh.material?.dispose();
         }
     });
     enemyProjectilesRef.current = [];
 }
            // –û—Å—Ç–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            if (animationFrameId.current) { cancelAnimationFrame(animationFrameId.current); animationFrameId.current = null; }
            if (joystickRef.current) { joystickRef.current.destroy(); joystickRef.current = null; }
            rendererRef.current?.dispose();
            if (mountPoint && rendererRef.current?.domElement && mountPoint.contains(rendererRef.current.domElement)) {
                mountPoint.removeChild(rendererRef.current.domElement);
            }
            if (sceneRef.current) { wallsRef.current.forEach(wall => { if(wall.mesh) sceneRef.current?.remove(wall.mesh); wall.mesh?.geometry?.dispose(); }); if (backgroundMesh) { sceneRef.current.remove(backgroundMesh); backgroundMesh.geometry?.dispose(); backgroundMesh.material?.map?.dispose(); backgroundMesh.material?.dispose(); } while(sceneRef.current.children.length > 0){ sceneRef.current.remove(sceneRef.current.children[0]); } }
            wallsRef.current = []; sceneRef.current = null; rendererRef.current = null; cameraRef.current = null;
        };
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏, —Ç–∞–∫ –∫–∞–∫ handleResize —Å–∞–º–∞ –±–µ—Ä–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –∏–∑ DOM
    }, [levelData?.backgroundTexture, levelData?.walls, levelConfig]);
    // =======================================================================
    // === –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –°–¶–ï–ù–´ + –†–ï–°–ê–ô–ó ===
    // =======================================================================

    // === 2. –ó–ê–ì–†–£–ó–ö–ê –ò–ì–†–û–ö–ê ===
    const { playerObject, isPlayerModelLoaded } = usePlayerLoader(
        playerStats.skin || "/Models/character.glb",
        levelData?.playerStart || { x: levelConfig.gameWorldWidth / 2, y: levelConfig.gameWorldHeight - 100 },
        sceneRef.current, levelConfig
    );

    // === 3. –ó–ê–ì–†–£–ó–ö–ê –í–†–ê–ì–û–í ===
    const { enemyRefs, areEnemiesLoaded, initialEnemyStates } = useEnemyLoader(
        levelData?.enemies, sceneRef.current, levelConfig
    );

    // === 4. –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–©–ï–ô –ó–ê–ì–†–£–ó–ö–û–ô ===
    useEffect(() => {
        const currentlyLoading = !(isPlayerModelLoaded && areEnemiesLoaded);
        if (isLoading !== currentlyLoading) {
            setIsLoading(currentlyLoading);
            if (!currentlyLoading) {
                console.log("‚ú® –£—Ä–æ–≤–µ–Ω—å –ì–û–¢–û–í!");
                if (typeof initializeLevelHp === 'function') { initializeLevelHp(); console.log("HP –∏–≥—Ä–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); }
                else { console.error("–û–®–ò–ë–ö–ê: initializeLevelHp –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è!"); }
                if (typeof onReady === 'function' && !readyCalledRef.current) { onReady(); readyCalledRef.current = true; }
                if (levelData?.winCondition?.type === 'survive_duration') {
                    levelStartTimeRef.current = Date.now(); setRemainingTime(levelData.winCondition.duration);
                } else { levelStartTimeRef.current = null; setRemainingTime(null); }
            }
        }
    }, [isPlayerModelLoaded, areEnemiesLoaded, isLoading, onReady, levelData?.winCondition]);

    // === 5. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø –í–†–ê–ì–û–í ===
    useEffect(() => {
        if (areEnemiesLoaded && initialEnemyStates.length > 0) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ JSON.stringify –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–∞–º—ã–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º, –Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –ª–∏—à–Ω–∏–µ —Ä–µ—Ä–µ–Ω–¥–µ—Ä—ã, –µ—Å–ª–∏ initialEnemyStates –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
            if (JSON.stringify(enemiesState) !== JSON.stringify(initialEnemyStates)) {
                 console.log("--- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø enemiesState –∏–∑ initialEnemyStates ---");
                 setEnemiesState(initialEnemyStates);
            }
        } else if (!areEnemiesLoaded && enemiesState.length > 0) {
             // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –≤—Ä–∞–≥–∏ –≤—ã–≥—Ä—É–∂–µ–Ω—ã
             console.log("--- –û—á–∏—Å—Ç–∫–∞ enemiesState –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –≤—Ä–∞–≥–æ–≤ ---");
             setEnemiesState([]);
        }
        // –ó–∞–≤–∏—Å–∏–º –¢–û–õ–¨–ö–û –æ—Ç —Ñ–ª–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    }, [areEnemiesLoaded, initialEnemyStates]); // <<<--- –£–ë–†–ê–õ–ò enemiesState –ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô

    // === 6. –ù–ê–°–¢–†–û–ô–ö–ê –î–ñ–û–ô–°–¢–ò–ö–ê ===
     useEffect(() => {
        let joystickInstance = null;
        if (!isLoading && sceneRef.current) { // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            const joystickZone = document.getElementById("joystick-container");
            if (joystickZone && !joystickRef.current) {
                 try {
                     const options = { zone: joystickZone, mode: "static", position: { left: "50%", top: "50%" }, size: 100, color: "rgba(255, 255, 255, 0.5)", threshold: 0.1 };
                     joystickInstance = nipplejs.create(options); joystickRef.current = joystickInstance;
                     joystickInstance.on("move", (evt, data) => { if (data.vector) { velocity.current = { x: data.vector.x, y: data.vector.y, force: data.force }; } });
                     joystickInstance.on("end", () => { velocity.current = { x: 0, y: 0, force: 0 }; });
                 } catch (error) { console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞:", error); }
             } else if (!joystickZone && !isLoading) { console.warn("–ù–µ –Ω–∞–π–¥–µ–Ω #joystick-container."); }
        }
        return () => { if (joystickRef.current) { joystickRef.current.destroy(); joystickRef.current = null; } };
    }, [isLoading]);

    // === 7. –û–ë–†–ê–ë–û–¢–ß–ò–ö –£–†–û–ù–ê –í–†–ê–ì–£ ===
    const handleEnemyHit = useCallback((enemyId, damageAmount) => {
        console.log(`--- handleEnemyHit –≤—ã–∑–≤–∞–Ω: –≤—Ä–∞–≥ ID=${enemyId}, —É—Ä–æ–Ω=${damageAmount} ---`);
        let enemyDefeated = false;
        let enemyRefToMark = null;

        setEnemiesState(prevEnemies => {
            console.log(`--- setEnemiesState –ø–æ–ª—É—á–∏–ª prevEnemies —Å HP:`, JSON.stringify(prevEnemies.map(e => ({id: e.id, hp: e.currentHp}))));
            const newEnemiesState = [...prevEnemies];
            const enemyIndex = newEnemiesState.findIndex(e => e.id === enemyId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –≤—Ä–∞–≥ –∏ –∂–∏–≤ –ª–∏ –æ–Ω
            if (enemyIndex !== -1 && newEnemiesState[enemyIndex].currentHp > 0) {
                const currentHp = newEnemiesState[enemyIndex].currentHp; // –ó–∞–ø–æ–º–Ω–∏–º —Ç–µ–∫—É—â–µ–µ HP
                const newHp = Math.max(0, currentHp - damageAmount); // –í—ã—á–∏—Å–ª–∏–º –Ω–æ–≤–æ–µ HP

                // --- !!! –ü–†–ê–í–ò–õ–¨–ù–û–ï –ú–ï–°–¢–û –î–õ–Ø –õ–û–ì–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø HP !!! ---
                console.log(`--- –ò–∑–º–µ–Ω–µ–Ω–∏–µ HP –¥–ª—è ${enemyId}: ${currentHp} -> ${newHp} ---`);
                // --- !!! ---

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–º–µ—Ä –ª–∏ –≤—Ä–∞–≥ –∏–º–µ–Ω–Ω–æ —ç—Ç–∏–º —É–¥–∞—Ä–æ–º
                if (newHp === 0 /* && currentHp > 0 */) { // –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å currentHp > 0, —Ç.–∫. newHp=0 —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ currentHp –±—ã–ª > 0
                    console.log(`--- –í—Ä–∞–≥ ${enemyId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã–π (HP=0)! ---`);
                    enemyDefeated = true;
                    // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞ –≤ enemyRefs –°–†–ê–ó–£, –ø–æ–∫–∞ –µ—Å—Ç—å enemyId
                     enemyRefToMark = enemyRefs.find(ref => ref && ref.id === enemyId);
                     if (!enemyRefToMark) { console.warn(`[handleEnemyHit] –ù–µ –Ω–∞–π–¥–µ–Ω enemyRef ${enemyId} –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ isDead!`); }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º HP –≤ –Ω–æ–≤–æ–º –º–∞—Å—Å–∏–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                 newEnemiesState[enemyIndex] = { ...newEnemiesState[enemyIndex], currentHp: newHp };
                 return newEnemiesState; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
            }

            // –ï—Å–ª–∏ –≤—Ä–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –º–µ—Ä—Ç–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Å—Å–∏–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return prevEnemies;
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ isDead –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –≤—Ä–∞–≥–∞ –≤–Ω–µ setEnemiesState
        // –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã AI –≤—Ä–∞–≥–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–∞–∑—É, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
        if (enemyDefeated && enemyRefToMark && !enemyRefToMark.isDead) {
             enemyRefToMark.isDead = true;
             console.log(`--- –§–ª–∞–≥ isDead —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${enemyId} ---`);
        }
    }, [enemyRefs]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç enemyRefs

    // === 8. –£–î–ê–õ–ï–ù–ò–ï –ú–ï–†–¢–í–´–• –í–†–ê–ì–û–í –°–û –°–¶–ï–ù–´ ===
     useEffect(() => {
        if (!sceneRef.current || !enemyRefs || !enemiesState) return;
        const deadEnemyIds = new Set(enemiesState.filter(state => state.currentHp <= 0).map(state => state.id));
        console.log("--- –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–µ—Ä—Ç–≤—ã—Ö ID:", deadEnemyIds); // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–æ–≥–æ —Å—á–∏—Ç–∞–µ–º –º–µ—Ä—Ç–≤—ã–º–∏
        enemyRefs.forEach(enemyRef => {
            if (deadEnemyIds.has(enemyRef.id) && enemyRef.pivot?.parent === sceneRef.current) { // –î–æ–±–∞–≤–∏–ª ?.parent
                console.log(`--- –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ–≥–æ –≤—Ä–∞–≥–∞ ${enemyRef.id} —Å–æ —Å—Ü–µ–Ω—ã ---`);
                 sceneRef.current.remove(enemyRef.pivot);
            }
        });
    }, [enemiesState, enemyRefs]); // sceneRef –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, —É–±—Ä–∞–ª –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    // === 9. –õ–û–ì–ò–ö–ê –°–¢–ê–¢–£–°–û–í –ò–ì–†–´ ===
    const winLevel = useCallback(() => { if (levelStatus === 'playing') setLevelStatus('won'); }, [levelStatus]);
    const loseLevel = useCallback(() => { if (levelStatus === 'playing') setLevelStatus('lost'); }, [levelStatus]);
    useEffect(() => { if (typeof playerHp === 'number' && playerHp <= 0 && levelStatus === 'playing') loseLevel(); }, [playerHp, levelStatus, loseLevel]);

    // === 10. –û–°–ù–û–í–ù–û–ô –ò–ì–†–û–í–û–ô –¶–ò–ö–õ ===
    useEffect(() => {
        if (isLoading || levelStatus !== 'playing' || !playerObject || !enemyRefs || !sceneRef.current || !rendererRef.current || !cameraRef.current) {
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É —Ü–∏–∫–ª–∞, —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current); animationFrameId.current = null;
            }
            return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã
        }

        const clock = new THREE.Clock();
        // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ü–∏–∫–ª–∞ ---
        const findNearestEnemy = (origin, maxRangeSq) => { /* ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ... */
            let nearestEnemy = null; let minDistanceSq = maxRangeSq;
            enemyRefs.forEach(enemy => {
                const enemyState = enemiesState.find(es => es.id === enemy.id);
                if (!enemy || !enemy.pivot?.position || !enemyState || enemyState.currentHp <= 0 || enemy.isDead) return;
                const distanceSq = origin.distanceToSquared(enemy.pivot.position);
                if (distanceSq < minDistanceSq) { minDistanceSq = distanceSq; nearestEnemy = enemy; }
            }); return nearestEnemy;
        };
        const addProjectileMesh = (projectileData) => { /* ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ... */
            if (!sceneRef.current) return; const geometry = new THREE.SphereGeometry(4, 6, 6);
            const material = new THREE.MeshBasicMaterial({ color: projectileData.isCrit ? 0xffaa00 : 0xffffff });
            const mesh = new THREE.Mesh(geometry, material); mesh.position.copy(projectileData.position);
            projectileData.mesh = mesh; sceneRef.current.add(mesh);
         };
        const createProjectile = (targetEnemyRef) => { /* ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ... */
             if (!playerObject || !targetEnemyRef?.pivot?.position) return;
             const projSpeed = 500; const projLifetime = 1.5; const baseDamage = playerStats.attack || 1;
             const startPos = playerObject.position.clone(); const targetPos = targetEnemyRef.pivot.position.clone();
             const direction = targetPos.sub(startPos).normalize(); const critChance = playerStats.critChance || 0;
             const isCrit = Math.random() * 100 < critChance; const critMultiplier = 2;
             let finalDamage = isCrit ? Math.round(baseDamage * critMultiplier) : baseDamage;
             const doubleStrikeChance = playerStats.doubleStrikeChance || 0;
             const isDoubleStrike = Math.random() * 100 < doubleStrikeChance;
             const makeProjectileData = (dmg, crit) => ({id: Math.random(), position: startPos.clone().add(direction.clone().multiplyScalar(25)), velocity: direction.clone().multiplyScalar(projSpeed), damage: dmg, isCrit: crit, lifetime: projLifetime, mesh: null});
             const p1 = makeProjectileData(finalDamage, isCrit); projectilesRef.current.push(p1); addProjectileMesh(p1);
             if (isDoubleStrike) { const isCrit2 = Math.random() * 100 < critChance; const dmg2 = isCrit2 ? Math.round(baseDamage * critMultiplier) : baseDamage;
                 const p2 = makeProjectileData(dmg2, isCrit2); p2.position.add(new THREE.Vector3(direction.y, -direction.x, 0).multiplyScalar(5));
                 projectilesRef.current.push(p2); addProjectileMesh(p2);
             }
        };

         const addEnemyProjectileMesh = (projData) => {
            if (!sceneRef.current) return;
            const geometry = new THREE.CylinderGeometry(0.5, 0.5, 12, 5);
            const material = new THREE.MeshBasicMaterial({ color: 0x8B4513 });
            const mesh = new THREE.Mesh(geometry, material);
            mesh.position.copy(projData.position);
            mesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), projData.velocity.clone().normalize());
            projData.mesh = mesh;
            sceneRef.current.add(mesh);
        };

        const createEnemyProjectile = (enemy, playerCurrentPos) => {
            if (!enemy || !enemy.pivot?.position || !enemy.stats || !playerCurrentPos) return;

            const projSpeed = 300 + Math.random() * 100;
            const projLifetime = 2.0;
            const damage = enemy.stats.damage || 3; // –ë–µ—Ä–µ–º —É—Ä–æ–Ω –∏–∑ —Å—Ç–∞—Ç–æ–≤ –≤—Ä–∞–≥–∞

            const startPos = enemy.pivot.position.clone();
            const targetPos = playerCurrentPos.clone();
            const direction = targetPos.sub(startPos).normalize();
            startPos.add(direction.clone().multiplyScalar(25)); // –°–º–µ—â–∞–µ–º —Å—Ç–∞—Ä—Ç

            const projectileData = {
                id: Math.random(),
                ownerId: enemy.id, // ID –≤—Ä–∞–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø—É—Å—Ç–∏–ª —Å–Ω–∞—Ä—è–¥
                position: startPos,
                velocity: direction.clone().multiplyScalar(projSpeed),
                damage: damage,
                lifetime: projLifetime,
                mesh: null
            };

            enemyProjectilesRef.current.push(projectileData); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –≤—Ä–∞–∂–µ—Å–∫–∏—Ö —Å–Ω–∞—Ä—è–¥–æ–≤
            addEnemyProjectileMesh(projectileData); // –°–æ–∑–¥–∞–µ–º –º–µ—à
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—à–∞ –ª—É—á–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ create...Projectile)
        const createBeamMeshFixed = (enemy, targetPos) => {
            console.log("--- DEBUG: –í—Ö–æ–¥ –≤ createBeamMeshFixed ---"); // –õ–æ–≥ –≤—Ö–æ–¥–∞

            // --- –õ–æ–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è ---
            console.log("  >> sceneRef.current:", sceneRef.current ? '–ï–°–¢–¨' : '–ù–ï–¢');
            console.log("  >> enemy.pivot?.position:", enemy.pivot?.position);
            console.log("  >> beamTexturesRef.current:", beamTexturesRef.current);
            // --- ---
            if (!sceneRef.current || !enemy.pivot?.position || !beamTexturesRef.current) return null;

            const beamType = enemy.stats.beamType === 'fire' ? 'fire' : 'ice';
            const texture = beamTexturesRef.current[beamType]; // –ë–µ—Ä–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É

            if (!texture) {
                console.error(`–¢–µ–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ª—É—á–∞ —Ç–∏–ø–∞ "${beamType}" –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!`);
                return null;
            }

            const startPoint = enemy.pivot.position.clone();
            // --- !!! –°–º–µ—â–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –ª—É—á–∞ (–∫ —Ä—É–∫–µ/–ø–æ—Å–æ—Ö—É –º–∞–≥–∞) !!! ---
             const beamOriginOffsetY = 25; // <<<--- –ü–û–î–ë–ï–†–ò –≠–¢–û –ó–ù–ê–ß–ï–ù–ò–ï
             startPoint.y += beamOriginOffsetY;
            // --- !!! ---

            const endPoint = targetPos.clone();
            const direction = endPoint.clone().sub(startPoint); // –í–µ–∫—Ç–æ—Ä –æ—Ç –Ω–∞—á–∞–ª–∞ –∫ –∫–æ–Ω—Ü—É
            const distance = direction.length();
            console.log(`  >> –î–∏—Å—Ç–∞–Ω—Ü–∏—è –ª—É—á–∞: ${distance.toFixed(1)}`); // –ù–µ —Ä–∞–≤–Ω–∞ –ª–∏ –Ω—É–ª—é?


            if (distance <= 0.1) return null; // –ù–µ —Å–æ–∑–¥–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ª—É—á

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º PlaneGeometry. –í—ã—Å–æ—Ç–∞ = 1 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –¥–ª–∏–Ω–µ.
            const beamGeo = new THREE.PlaneGeometry(BEAM_WIDTH, 1);
            const beamMat = new THREE.MeshBasicMaterial({
                map: texture,
                transparent: true, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                depthTest: false,  // –†–µ–Ω–¥–µ—Ä–∏—Ç—å –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
                depthWrite: false,
                side: THREE.DoubleSide, // –í–∏–¥–Ω–æ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
                // blending: THREE.AdditiveBlending, // –ü–æ–ø—Ä–æ–±—É–π –¥–ª—è —è—Ä–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ "—Å–≤–µ—á–µ–Ω–∏—è"
            });

            const beamMesh = new THREE.Mesh(beamGeo, beamMat);
            beamMesh.name = `beam_${enemy.id}`;
            beamMesh.renderOrder = 900; // –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∞ (–Ω–∏–∂–µ —Ö–µ–ª—Å–±–∞—Ä–æ–≤)

            // --- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è ---
            beamMesh.scale.y = distance; // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ (=–¥–ª–∏–Ω–µ –ª—É—á–∞)
            beamMesh.position.copy(startPoint).lerp(endPoint, 0.5); // –°—Ç–∞–≤–∏–º –≤ —Å–µ—Ä–µ–¥–∏–Ω—É –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º "–≤–≤–µ—Ä—Ö" –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (–æ—Å—å Y) –≤–¥–æ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—É—á–∞
            beamMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), direction.normalize());
            // --- ---

            sceneRef.current.add(beamMesh);
            console.log(`--- –ú–ï–® –õ–£–ß–ê (Plane) –°–û–ó–î–ê–ù –¥–ª—è ${enemy.id} ---`);
            return beamMesh;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª—É—á–∞ (PlaneGeometry)
        const updateBeamMesh = (beamMesh, startPosRaw, targetPos) => {
            if (!beamMesh || !startPosRaw || !targetPos) return;

            const startPoint = startPosRaw.clone();
            // --- !!! –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ –∂–µ —Å–º–µ—â–µ–Ω–∏–µ, —á—Ç–æ –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ !!! ---
            const beamOriginOffsetY = 25; // <<<--- –¢–û –ñ–ï –ó–ù–ê–ß–ï–ù–ò–ï, –ß–¢–û –ò –í–´–®–ï
            startPoint.y += beamOriginOffsetY;
             // --- !!! ---

            const endPoint = targetPos.clone();
            const direction = endPoint.clone().sub(startPoint);
            const distance = direction.length();

            if (distance <= 0.1) { beamMesh.visible = false; return; }

            beamMesh.visible = true;
            beamMesh.scale.y = distance; // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏–Ω—É
            beamMesh.position.copy(startPoint).lerp(endPoint, 0.5); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            beamMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), direction.normalize());
        }

        // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ª—É—á–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ —Ç–∞–∫–æ–π –∂–µ)
        const removeBeamMesh = (enemy) => {
             if (enemy.beamEffectMesh && sceneRef.current) {
                console.log(`--- –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—à–∞ –ª—É—á–∞ –¥–ª—è ${enemy.id} ---`);
                 sceneRef.current.remove(enemy.beamEffectMesh);
                 // –ì–µ–æ–º–µ—Ç—Ä–∏—é –∏ –º–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
                 // –ù–æ –µ—Å–ª–∏ —Ç—ã —Å–æ–∑–¥–∞–µ—à—å –∏—Ö –∫–∞–∂–¥—ã–π —Ä–∞–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ, —Ç–æ –Ω—É–∂–Ω–æ:
                 // enemy.beamEffectMesh.geometry?.dispose();
                 // enemy.beamEffectMesh.material?.dispose();
                 enemy.beamEffectMesh = null; // –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É
             }
}

        const checkWinCondition = () => { /* ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ... */
             if (!levelData?.winCondition) return; const { type, duration } = levelData.winCondition;
             const liveEnemies = enemiesState.filter(e => e.currentHp > 0); const liveBosses = liveEnemies.filter(e => e.isBoss);
             switch (type) {
                 case 'clear_enemies': if (liveEnemies.length === 0 && levelData.enemies?.length > 0) winLevel(); break;
                 case 'defeat_all_bosses': const wereBosses = levelData.enemies?.some(e => e.type === 'boss'); if (liveBosses.length === 0 && wereBosses) winLevel(); break;
                 case 'survive_duration': if (levelStartTimeRef.current && duration) { const elapsed = (Date.now() - levelStartTimeRef.current) / 1000; const remaining = Math.max(0, duration - elapsed); setRemainingTime(remaining); if (remaining <= 0) winLevel(); } break;
                 default: break;
             }
        };

        // --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–¥—Ä–∞ ---
        const animate = () => {
            
            if (levelStatus !== 'playing') { // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                if(animationFrameId.current) cancelAnimationFrame(animationFrameId.current); animationFrameId.current = null; return;
            }
            animationFrameId.current = requestAnimationFrame(animate); // –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
            const dt = Math.min(clock.getDelta(), 0.05);
            // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–∏–∑ —Ä–µ—Ñ–æ–≤ / –æ–±—ä–µ–∫—Ç–æ–≤)
             const playerPos = playerObject.position;
             const currentScene = sceneRef.current;
             const currentCamera = cameraRef.current;
             const currentRenderer = rendererRef.current;

            // 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (–¥–≤–∏–∂–µ–Ω–∏–µ, –∫–æ–ª–ª–∏–∑–∏–∏, –ø–æ–≤–æ—Ä–æ—Ç)
            const effectiveSpeed = (playerStats.speed || 3) * (velocity.current.force > 0.1 ? 1 : 0);
            if (effectiveSpeed > 0) { /* ... –ª–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è, –∫–æ–ª–ª–∏–∑–∏–π, –ø–æ–≤–æ—Ä–æ—Ç–∞ playerObject ... */
                const speedMultiplier = 60; const dx = (velocity.current.x || 0) * effectiveSpeed * dt * speedMultiplier; const dy = (velocity.current.y || 0) * effectiveSpeed * dt * speedMultiplier;
                let nextX = playerPos.x + dx; let nextY = playerPos.y + dy; const PLAYER_SIZE = { width: 30, height: 30 };
                const pRect = { x: playerPos.x - PLAYER_SIZE.width / 2, y: playerPos.y - PLAYER_SIZE.height / 2, width: PLAYER_SIZE.width, height: PLAYER_SIZE.height };
                let colX = false; let colY = false; const pRectX = { ...pRect, x: nextX - PLAYER_SIZE.width / 2 };
                for (const wall of wallsRef.current) { if (checkCollision(pRectX, wall)) { colX = true; break; } }
                const pRectY = { ...pRect, y: nextY - PLAYER_SIZE.height / 2 };
                for (const wall of wallsRef.current) { if (checkCollision(pRectY, wall)) { colY = true; break; } }
                if (!colX) playerPos.x = nextX; if (!colY) playerPos.y = nextY;
                const pSizeHW = PLAYER_SIZE.width / 2; const pSizeHH = PLAYER_SIZE.height / 2;
                const minX = -levelConfig.gameWorldWidth / 2 + pSizeHW; const maxX = levelConfig.gameWorldWidth / 2 - pSizeHW;
                const minYw = -levelConfig.WORLD_Y_OFFSET + pSizeHH; const maxYw = levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - pSizeHH;
                playerPos.x = clamp(playerPos.x, minX, maxX); playerPos.y = clamp(playerPos.y, minYw, maxYw);
                if (Math.abs(dx) > 0.01 || Math.abs(dy) > 0.01) {
                    const angle = Math.atan2(dy, dx); let targetRotZ = angle + Math.PI / 2; const currentRotZ = playerObject.rotation.z; const twoPi = Math.PI * 2;
                    let diff = targetRotZ - currentRotZ; while (diff < -Math.PI) diff += twoPi; while (diff > Math.PI) diff -= twoPi;
                    const lerp = 0.15; playerObject.rotation.z = currentRotZ + diff * lerp;
                }
            }
            // 2. –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
            playerAttackCooldown.current -= dt;
            if (playerAttackCooldown.current <= 0) {
                const interval = 1 / (playerStats.attackSpeed || 1.0); playerAttackCooldown.current = interval;
                const rangeSq = 150 * 150; const target = findNearestEnemy(playerPos, rangeSq); if (target) createProjectile(target);
            }
            // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–æ–≤ –∏–≥—Ä–æ–∫–∞
            const activeProjectiles = [];
            const enemyHitboxes = enemyRefs.map(enemy => { /* ... —Å–æ–∑–¥–∞–Ω–∏–µ —Ö–∏—Ç–±–æ–∫—Å–æ–≤ –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤ ... */
                const state = enemiesState.find(es => es.id === enemy.id);
                if (enemy.pivot?.position && state && state.currentHp > 0 && !enemy.isDead) {
                    const size = 40; return { id: enemy.id, x: enemy.pivot.position.x - size / 2, y: enemy.pivot.position.y - size / 2, width: size, height: size };
                } return null; }).filter(Boolean);
            projectilesRef.current.forEach(proj => { /* ... –¥–≤–∏–∂–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π, —É–¥–∞–ª–µ–Ω–∏–µ ... */
                proj.position.x += proj.velocity.x * dt; proj.position.y += proj.velocity.y * dt; proj.lifetime -= dt;
                if (proj.mesh) proj.mesh.position.copy(proj.position); let hit = false;
                if (proj.lifetime > 0 && enemyHitboxes.length > 0) { const size = 8; const pHitbox = { x: proj.position.x - size / 2, y: proj.position.y - size / 2, width: size, height: size };
                    for (const eBox of enemyHitboxes) { if (checkCollision(pHitbox, eBox)) { handleEnemyHit(eBox.id, proj.damage); hit = true; break; } } }
                if (proj.lifetime > 0 && !hit) activeProjectiles.push(proj); else { if (proj.mesh) { currentScene?.remove(proj.mesh); proj.mesh.geometry?.dispose(); } }
            }); projectilesRef.current = activeProjectiles;
            // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤ (–∞–Ω–∏–º–∞—Ü–∏—è, –ò–ò: –ø–æ–≤–æ—Ä–æ—Ç, –¥–≤–∏–∂–µ–Ω–∏–µ, –∞—Ç–∞–∫–∞)
  // === –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –ö–û–î–ê –î–õ–Ø enemyRefs.forEach(...) ===
        // ===================================================================
        enemyRefs.forEach(enemy => {
            // 1. --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
            const enemyState = enemiesState.find(es => es.id === enemy.id);
            // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ playerObject, —á—Ç–æ–±—ã playerPos –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω
            if (!enemy || !enemy.pivot || !enemy.stats || enemy.isDead || !enemyState || enemyState.currentHp <= 0 || !playerObject) {
                 if (enemy?.hpBar?.container) { enemy.hpBar.container.visible = false; } // –°–∫—Ä—ã–≤–∞–µ–º —Ö–µ–ª—Å–±–∞—Ä –µ—Å–ª–∏ –≤—Ä–∞–≥ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω/–º–µ—Ä—Ç–≤
                 if (enemyState?.currentHp <= 0 && enemy && !enemy.isDead) enemy.isDead = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –º–µ—Ä—Ç–≤–æ–≥–æ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–º–µ—á–µ–Ω
                 return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ –≤—Ä–∞–≥–∞
            }
            const ePivot = enemy.pivot;
            const ePos = ePivot.position;
            const eStats = enemy.stats;
            const mixer = enemy.mixer;
            const playerPos = playerObject.position; // –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞

            // 2. --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π (–î–û –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π) ---
            mixer?.update(dt);

            // 3. --- –†–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Ä–∞–¥–∏—É—Å–∞ –∞—Ç–∞–∫–∏ ---
            const dist = ePos.distanceTo(playerPos);
            const atkRange = eStats.attackRange || 30; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—ã –≤—Ä–∞–≥–∞
            const playerInAttackRange = dist <= atkRange;

            // 4. --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –•–µ–ª—Å–±–∞—Ä–∞ ---
            // (–≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º)
            if (enemy.hpBar?.container && enemy.hpBar?.fill && enemyState.maxHp > 0) {
                const hpPercent = enemyState.currentHp / enemyState.maxHp;
                const fillMesh = enemy.hpBar.fill;
                const container = enemy.hpBar.container;
                const newScaleX = Math.max(0.001, hpPercent);
                const newPosX = (HEALTH_BAR_WIDTH * (newScaleX - 1)) / 2; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ Level.jsx
                // console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –ë–∞—Ä–∞ –¥–ª—è ${enemy.id}: HP=${enemyState.currentHp}/${enemyState.maxHp}, –ü—Ä–æ—Ü–µ–Ω—Ç=${hpPercent.toFixed(2)}`);
                // console.log(`  >> –£—Å—Ç–∞–Ω–æ–≤–∫–∞ scale.x=${newScaleX.toFixed(2)}, position.x=${newPosX.toFixed(2)}`);
                fillMesh.scale.x = newScaleX;
                fillMesh.position.x = newPosX;
                container.visible = true; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –≤—Ä–∞–≥ –∂–∏–≤
                if (cameraRef.current) {
                    container.quaternion.copy(cameraRef.current.quaternion); // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫ –∫–∞–º–µ—Ä–µ
                }
            } else if (enemy.hpBar?.container) {
                 container.visible = false; // –°–∫—Ä—ã–≤–∞–µ–º –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö
            }

            // 5. --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ ---
            const idleAct = enemy.actions['Idle'] || enemy.actions[enemy.idleActionName];
            const walkAct = enemy.actions['Walk'] || enemy.actions[enemy.walkActionName];
            const attackAct = enemy.actions['Attack'] || enemy.actions[enemy.attackActionName];
            const reloadAct = enemy.actions['Reload']; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ 'Reload' –µ—Å—Ç—å

            // 6. --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π ---
             const switchAction = (newAction) => {
                if (!newAction) { newAction = idleAct; if (!newAction) return; }
                if (typeof newAction.reset !== 'function' || typeof newAction.fadeIn !== 'function' || typeof newAction.play !== 'function') { console.error("Invalid anim action:", newAction); return; }
                if (!enemy.currentAction || enemy.currentAction !== newAction) {
                    if (enemy.currentAction && typeof enemy.currentAction.fadeOut === 'function') { enemy.currentAction.fadeOut(0.2); }
                    newAction.reset().fadeIn(0.2).play();
                    enemy.currentAction = newAction;
                }
             };

            // 7. --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –°–õ–ï–î–£–Æ–©–ï–ì–û —Å–æ—Å—Ç–æ—è–Ω–∏—è –ò–ò ---
            let currentState = enemy.aiState;
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–∞–¥—Ä–µ
             if (enemy.type === 'ranged' && !currentState) { enemy.aiState = 'PATROLLING'; currentState = 'PATROLLING'; /* TODO: Init patrol data */ }
             else if (enemy.type === 'caster' && !currentState) { enemy.aiState = 'IDLE'; currentState = 'IDLE'; }
             else if (!currentState) { enemy.aiState = 'IDLE'; currentState = 'IDLE'; } // –î–ª—è –º–∏–ª–∏/–±–æ—Å—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            let nextState = currentState; // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ

            // --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ ---
            if (enemy.type === 'ranged') {
                // –õ–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª—É—á–Ω–∏–∫–∞ (PATROLLING -> ATTACKING -> RELOADING -> ATTACKING -> PATROLLING)
                if (currentState === 'PATROLLING') { if (playerInAttackRange) nextState = 'ATTACKING'; }
                else if (currentState === 'ATTACKING') { if (!playerInAttackRange) nextState = 'PATROLLING'; else if (enemy.attackCooldown <= 0 && attackAct) nextState = 'RELOADING'; }
                else if (currentState === 'RELOADING') { if (!playerInAttackRange) nextState = 'PATROLLING'; else if (enemy.attackCooldown <= 0 && reloadAct) nextState = 'ATTACKING'; }
            }
            else if (enemy.type === 'caster') {
                // –õ–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞–≥–∞ (IDLE -> AIMING -> CASTING -> AIMING/IDLE)
                 // console.log(`–ú–∞–≥ ${enemy.id}: –í —Ä–∞–¥–∏—É—Å–µ=${playerInAttackRange}, –ö—É–ª–¥–∞—É–Ω=${enemy.attackCooldown?.toFixed(2)}, –°–æ—Å—Ç–æ—è–Ω–∏–µ=${currentState}`); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
                 if (currentState === 'IDLE') { if (playerInAttackRange) nextState = 'AIMING'; }
                 else if (currentState === 'AIMING') { if (!playerInAttackRange) nextState = 'IDLE'; else if (enemy.attackCooldown <= 0) nextState = 'CASTING_BEAM_EFFECT'; }
                 else if (currentState === 'CASTING_BEAM_EFFECT') { nextState = playerInAttackRange ? 'AIMING' : 'IDLE'; } // –°—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∫–∞—Å—Ç–∞
            }
            // –î–ª—è –º–∏–ª–∏/–±–æ—Å—Å–æ–≤ –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'nextState', –∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É (–∫–∞–∫ –±—ã–ª–æ —É —Ç–µ–±—è)

            // --- –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ò ---
            enemy.aiState = nextState;

            // 8. --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –î–ï–ô–°–¢–í–ò–ô –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∫–æ—Ç–æ—Ä–æ–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–±–Ω–æ–≤–∏–ª–∏) ---
            let shouldRotate = false; // –§–ª–∞–≥, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤—Ä–∞–≥–∞ –≤ —ç—Ç–æ–º –∫–∞–¥—Ä–µ
            let rotateTarget = playerPos; // –¶–µ–ª—å –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            let animationToPlay = idleAct; // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            if (enemy.type === 'ranged') {
                // --- –î–µ–π—Å—Ç–≤–∏—è –ª—É—á–Ω–∏–∫–∞ ---
                 animationToPlay = idleAct; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                 if (enemy.aiState === 'PATROLLING') {
                     animationToPlay = walkAct;
                     // --- !!! –ó–î–ï–°–¨ –ù–£–ñ–ù–ê –¢–í–û–Ø –õ–û–ì–ò–ö–ê –ü–ê–¢–†–£–õ–ò–†–û–í–ê–ù–ò–Ø !!! ---
                     // TODO: –í—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –ø–∞—Ç—Ä—É–ª—è patrolTargetPos
                     // TODO: –î–≤–∏–≥–∞—Ç—å ePos –∫ patrolTargetPos —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é eStats.speed
                     // TODO: –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –∫ patrolTargetPos (shouldRotate = true; rotateTarget = patrolTargetPos;)
                     // TODO: –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ü–µ–ª—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
                     // --- !!! ---
                 } else if (enemy.aiState === 'ATTACKING') {
                     shouldRotate = true; rotateTarget = playerPos;
                     if (enemy.attackCooldown <= 0) {
                         createEnemyProjectile(enemy, playerPos); // –°—Ç—Ä–µ–ª—è–µ–º
                         enemy.attackCooldown = 1 / (eStats.attackSpeed || 0.5); // –°–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–∞
                         animationToPlay = attackAct; // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
                     } else {
                         animationToPlay = reloadAct; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É, –ø–æ–∫–∞ –∂–¥–µ–º
                     }
                 } else if (enemy.aiState === 'RELOADING') {
                     shouldRotate = true; rotateTarget = playerPos;
                     animationToPlay = reloadAct; // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
                 }
                 // –ü–æ–≤–æ—Ä–æ—Ç –ª—É—á–Ω–∏–∫–∞
                 if (shouldRotate && rotateTarget) { let dirRot = new THREE.Vector3().subVectors(rotateTarget, ePos); const angle = Math.atan2(dirRot.y, dirRot.x); let targetZ = angle + Math.PI / 2; const curZ = ePivot.rotation.z; const twoPi = Math.PI * 2; let diff = targetZ - curZ; while (diff < -Math.PI) diff += twoPi; while (diff > Math.PI) diff -= twoPi; const thresh = 0.05; if (Math.abs(diff) > thresh) { const lerp = 0.03; ePivot.rotation.z = curZ + diff * lerp; } ePivot.rotation.order = 'XYZ'; ePivot.rotation.x = 0; ePivot.rotation.y = 0; }
                 switchAction(animationToPlay); // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ª—É—á–Ω–∏–∫–∞

            } else if (enemy.type === 'caster') {
                // --- –î–µ–π—Å—Ç–≤–∏—è –º–∞–≥–∞ ---
                 animationToPlay = idleAct; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                 if (enemy.aiState === 'IDLE') {
                     animationToPlay = idleAct;
                     if(enemy.beamEffectMesh) removeBeamMesh(enemy); // –£–±–∏—Ä–∞–µ–º –ª—É—á, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                 } else if (enemy.aiState === 'AIMING') {
                     shouldRotate = true; rotateTarget = playerPos;
                     animationToPlay = idleAct; // –ò–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
                     if(enemy.beamEffectMesh) removeBeamMesh(enemy); // –£–±–∏—Ä–∞–µ–º –ª—É—á, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                 } else if (enemy.aiState === 'CASTING_BEAM_EFFECT') {
                     shouldRotate = true; rotateTarget = playerPos;
                     animationToPlay = attackAct; // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Å—Ç–∞
                     console.log(`>>> –ú–∞–≥ ${enemy.id} CASTING ${enemy.stats.beamType} beam!`); // –î–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å—Å—è!

                     // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
                     if (typeof playerTakeDamage === 'function') { playerTakeDamage(enemy.stats.beamDamage || 1); }
                     if (enemy.stats.beamType === 'fire') { console.log("Applying FIRE DoT (placeholder)"); /* TODO */ }
                     else if (enemy.stats.beamType === 'ice') { console.log("Applying ICE Freeze (placeholder)"); /* TODO */ }

                     // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ª—É—á–∞
                     if(enemy.beamEffectMesh) removeBeamMesh(enemy); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
                     enemy.beamEffectMesh = createBeamMeshFixed(enemy, playerPos); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                     if (enemy.beamEffectMesh) { enemy.beamEffectTimer = enemy.stats.beamEffectDuration || 1.0; console.log(`--- Beam timer SET for ${enemy.id}: ${enemy.beamEffectTimer} ---`); }
                     else { console.error(`--- Beam mesh FAILED for ${enemy.id} ---`); }

                     // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –∞—Ç–∞–∫–∏
                     enemy.attackCooldown = 1 / (eStats.attackSpeed || 0.5);
                 }

                 // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∞ –ª—É—á–∞ (–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –º–µ—à —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                 if (enemy.beamEffectMesh) { if (enemy.beamEffectTimer > 0) { enemy.beamEffectTimer -= dt; updateBeamMesh(enemy.beamEffectMesh, enemy.pivot.position, playerPos); } else { removeBeamMesh(enemy); } }

                 // –ü–æ–≤–æ—Ä–æ—Ç –º–∞–≥–∞
                 if (shouldRotate && rotateTarget) { let dirRot = new THREE.Vector3().subVectors(rotateTarget, ePos); const angle = Math.atan2(dirRot.y, dirRot.x); let targetZ = angle + Math.PI / 2; const curZ = ePivot.rotation.z; const twoPi = Math.PI * 2; let diff = targetZ - curZ; while (diff < -Math.PI) diff += twoPi; while (diff > Math.PI) diff -= twoPi; const thresh = 0.05; if (Math.abs(diff) > thresh) { const lerp = 0.03; ePivot.rotation.z = curZ + diff * lerp; } ePivot.rotation.order = 'XYZ'; ePivot.rotation.x = 0; ePivot.rotation.y = 0; }
                 // –ê–Ω–∏–º–∞—Ü–∏—è –º–∞–≥–∞
                 switchAction(animationToPlay);

            } else { // --- –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ú–∏–ª–∏ / –ë–æ—Å—Å–æ–≤ ---
                 // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–¥–µ—Å—å, –Ω–∞ –æ—Å–Ω–æ–≤–µ enemy.aiState (–µ—Å–ª–∏ —Ç—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å)
                 // –õ–∏–±–æ –æ—Å—Ç–∞–≤—å –∑–¥–µ—Å—å —Ç—É –ª–æ–≥–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ —É —Ç–µ–±—è —Ä–∞–Ω—å—à–µ –¥–ª—è –Ω–∏—Ö
                 const aggroMult = 5; const aggroRange = atkRange * aggroMult; const inAggroRange = dist <= aggroRange;
                 if (playerInAttackRange && enemy.attackCooldown <= 0) { // –ê—Ç–∞–∫–∞ –≤–±–ª–∏–∑–∏
                      if (typeof playerTakeDamage === 'function') { playerTakeDamage(eStats.attack || 5); }
                      enemy.attackCooldown = 1 / (eStats.attackSpeed || 0.5);
                      switchAction(attackAct);
                      // enemy.aiState = 'MELEE_ATTACKING'; // –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∏—Ö
                 } else if (inAggroRange && !playerInAttackRange) { // –ü—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
                      let chaseDir = new THREE.Vector3().subVectors(playerPos, ePos); const moveDir = chaseDir.normalize(); const moveSpeed = (eStats.speed || 1.5) * dt * 60; if (moveSpeed > 0) { ePos.x += moveDir.x * moveSpeed; ePos.y += moveDir.y * moveSpeed; } const angle = Math.atan2(chaseDir.y, chaseDir.x); let targetZ = angle + Math.PI / 2; const curZ = ePivot.rotation.z; const twoPi = Math.PI * 2; let diff = targetZ - curZ; while (diff < -Math.PI) diff += twoPi; while (diff > Math.PI) diff -= twoPi; const thresh = 0.05; if (Math.abs(diff) > thresh) { const lerp = 0.08; ePivot.rotation.z = curZ + diff * lerp; } ePivot.rotation.order = 'XYZ'; ePivot.rotation.x = 0; ePivot.rotation.y = 0;
                      switchAction(walkAct);
                      // enemy.aiState = 'CHASING';
                 } else { // –ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ
                      switchAction(idleAct);
                      // enemy.aiState = 'IDLE';
                 }
            }

            // 9. --- –û–ë–©–ï–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–£–õ–î–ê–£–ù–ê –ê–¢–ê–ö–ò (–ü–û–°–õ–ï –í–°–ï–• –î–ï–ô–°–¢–í–ò–ô!) ---
            if (enemy.attackCooldown > 0) {
                enemy.attackCooldown -= dt;
            }

        }); // <<<--- –ö–û–ù–ï–¶ enemyRefs.forEach

            const activeEnemyProjectiles = [];
            const PLAYER_SIZE_ENEMY_PROJ = { width: 30, height: 30 }; // –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω—É –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É)
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∏—Ç–±–æ–∫—Å –∏–≥—Ä–æ–∫–∞ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
            const playerHitboxForEnemyProj = {
                 x: playerPos.x - PLAYER_SIZE_ENEMY_PROJ.width / 2,
                 y: playerPos.y - PLAYER_SIZE_ENEMY_PROJ.height / 2,
                 width: PLAYER_SIZE_ENEMY_PROJ.width,
                 height: PLAYER_SIZE_ENEMY_PROJ.height
             };
    
    
            enemyProjectilesRef.current.forEach(proj => {
                // –î–≤–∏–∂–µ–Ω–∏–µ
                proj.position.add(proj.velocity.clone().multiplyScalar(dt));
                proj.lifetime -= dt;
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—à–∞
                if (proj.mesh) {
                    proj.mesh.position.copy(proj.position);
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å—Ç—Ä–µ–ª—ã
                    proj.mesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), proj.velocity.clone().normalize());
                }
    
                let hitPlayer = false;
                if (proj.lifetime > 0) {
                    // –•–∏—Ç–±–æ–∫—Å —Å–Ω–∞—Ä—è–¥–∞ (—Å—Ç—Ä–µ–ª—ã)
                    const projSize = 10; // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ö–∏—Ç–±–æ–∫—Å–∞ —Å—Ç—Ä–µ–ª—ã
                    const projHitbox = { x: proj.position.x - projSize / 2, y: proj.position.y - projSize / 2, width: projSize, height: projSize };
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ —Å –∏–≥—Ä–æ–∫–æ–º
                    if (checkCollision(projHitbox, playerHitboxForEnemyProj)) {
                         console.log(`üéØ Enemy projectile hit player! Dmg: ${proj.damage}`); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                         if (typeof playerTakeDamage === 'function') {
                             playerTakeDamage(proj.damage);
                         } else { console.error("playerTakeDamage is not a function!"); }
                         hitPlayer = true;
                    }
                }
    
                // –£–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
                if (proj.lifetime > 0 && !hitPlayer) {
                    activeEnemyProjectiles.push(proj); // –û—Å—Ç–∞–≤–ª—è–µ–º
                } else {
                    // –£–¥–∞–ª—è–µ–º –º–µ—à –∏ —á–∏—Å—Ç–∏–º —Ä–µ—Å—É—Ä—Å—ã
                    if (proj.mesh) {
                        currentScene?.remove(proj.mesh);
                        proj.mesh.geometry?.dispose();
                        proj.mesh.material?.dispose(); // –î–æ–±–∞–≤–∏–º –æ—á–∏—Å—Ç–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                     }
                }
            });
            enemyProjectilesRef.current = activeEnemyProjectiles; // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤
            // --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê, –ö–û–¢–û–†–´–ô –ù–£–ñ–ù–û –í–°–¢–ê–í–ò–¢–¨ ---<<<

            // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
            checkWinCondition();
            // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
            const targetXCam = clamp(playerPos.x, -levelConfig.gameWorldWidth / 2 + 375 / 2, levelConfig.gameWorldWidth / 2 - 375 / 2);
            const targetYCam = clamp(playerPos.y, -levelConfig.WORLD_Y_OFFSET + 667 / 2, levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - 667 / 2);
            currentCamera.position.lerp(new THREE.Vector3(targetXCam, targetYCam, currentCamera.position.z), 0.1);
            currentCamera.lookAt(currentCamera.position.x, currentCamera.position.y, 0);
            // 7. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
            try { currentRenderer.render(currentScene, currentCamera); }
            catch (error) { console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:", error); setLevelStatus('error'); }
        }; // --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ animate ---
        
        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
        console.log("üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ animate()");
        clock.start();
        if (!animationFrameId.current) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∞–∂–¥—ã
             animationFrameId.current = requestAnimationFrame(animate);
        }

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è useEffect –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        return () => {
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current);
                animationFrameId.current = null;
                clock.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—ã
                // console.log("üßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ animate() –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Å–º–µ–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π");
            }
        };
    }, [ // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        isLoading, levelStatus, levelData, levelConfig, playerObject, enemyRefs, enemiesState, playerStats, // –û–±—ä–µ–∫—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        playerTakeDamage, handleEnemyHit, winLevel, loseLevel // –§—É–Ω–∫—Ü–∏–∏
    ]);


    // === 11. –†–ï–ù–î–ï–† JSX ===
    return (
        <div className="game-wrapper">
            {/* –û–≤–µ—Ä–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {isLoading && (
                <div className="level-loading-overlay">
                    <div className="loading-spinner"></div>
                    <div className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è...</div>
                </div>
            )}

            {/* –ò–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */}
            <div className="game-container" style={{ visibility: isLoading ? 'hidden' : 'visible' }}>
                <HealthBar currentHp={playerHp} maxHp={displayMaxHp} />
                {levelData?.winCondition?.type === 'survive_duration' && remainingTime !== null && levelStatus === 'playing' && (
                     <div className="survival-timer"> –í—ã–∂–∏—Ç—å: {Math.ceil(remainingTime)} —Å–µ–∫ </div>
                 )}
                <div ref={mountRef} className="game-canvas"></div> {/* –ú–µ—Å—Ç–æ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ */}
            </div>

            {/* –î–∂–æ–π—Å—Ç–∏–∫ */}
            <div id="joystick-container" className="joystick-container" style={{ visibility: isLoading ? 'hidden' : 'visible' }}></div>

            {/* –ü–æ–ø–∞–ø –ü–æ—Ä–∞–∂–µ–Ω–∏—è */}
            {levelStatus === 'lost' && (
                <GameOverPopup
                    onGoToMenu={() => { if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'lost'); }}
                />
            )}

             {/* –ü–æ–ø–∞–ø –ü–æ–±–µ–¥—ã */}
             {levelStatus === 'won' && (
                 <div className="level-complete-overlay">
                     <h2>–ü–æ–±–µ–¥–∞!</h2>
                     <p>–£—Ä–æ–≤–µ–Ω—å {levelData.id} –ø—Ä–æ–π–¥–µ–Ω!</p>
                     <button onClick={() => { if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'won'); }}>
                         –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                     </button>
                 </div>
             )}

             {/* –ü–æ–ø–∞–ø –û—à–∏–±–∫–∏ */}
             {levelStatus === 'error' && (
                 <div className="level-error-overlay">
                      <h2>–û—à–∏–±–∫–∞</h2>
                      <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ —É—Ä–æ–≤–Ω—è.</p>
                      <button onClick={() => { if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'error'); }}>
                          –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                      </button>
                 </div>
              )}
        </div> // –ó–∞–∫—Ä—ã—Ç–∏–µ game-wrapper
    ); // –ó–∞–∫—Ä—ã—Ç–∏–µ return
}; // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Level

export default Level; // –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é