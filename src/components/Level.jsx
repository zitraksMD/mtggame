// src/components/Level.jsx
import * as THREE from "three";
import React, { useEffect, useRef, useState, useCallback, useMemo } from "react";
import nipplejs from "nipplejs";
import './Styles.scss'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –∏–∑ code1
import useGameStore from '../store/useGameStore';
import usePlayerLoader from './usePlayerLoader';
import useEnemyLoader from './useEnemyLoader'; // –ò–º–ø–æ—Ä—Ç –∏–∑ code1
import GameOverPopup from './GameOverPopup';
import LoadingScreen from "./LoadingScreen"; // –ò–º–ø–æ—Ä—Ç –∏–∑ code1
import { clamp, checkCollision, convertTiledX, convertTiledY, DEFAULT_WORLD_WIDTH, DEFAULT_WORLD_HEIGHT } from './utils';

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const HEALTH_BAR_WIDTH = 30;
const HEALTH_BAR_HEIGHT = 4;
const HEALTH_BAR_OFFSET_Y = 25; // Y-—Å–º–µ—â–µ–Ω–∏–µ —Ö–µ–ª—Å–±–∞—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –≤—Ä–∞–≥–∞
const BEAM_WIDTH = 15;
const BEAM_TEXTURE_FIRE = '/assets/fire-beam.png'; // <<<--- –£–ö–ê–ñ–ò –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨
const BEAM_TEXTURE_ICE = '/assets/ice-beam.png';   // <<<--- –£–ö–ê–ñ–ò –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨
const ENEMY_COLLISION_SIZE = { width: 30, height: 30 }; // –†–∞–∑–º–µ—Ä —Ö–∏—Ç–±–æ–∫—Å–∞ –≤—Ä–∞–≥–∞ (–∏–∑ code1)

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç HealthBar ---
const HealthBar = ({ currentHp, maxHp }) => {
    const healthPercent = maxHp > 0 ? Math.max(0, (currentHp / maxHp) * 100) : 0;
    return (
        <div className="health-bar-container">
            <div className="health-bar" style={{ width: `${healthPercent}%` }}></div>
        </div>
    );
};
// ---------------------------------------------

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –º–∏—Ä–∞ ---
const getWorldDimensions = (levelData) => {
    const gameWorldWidth = levelData?.width || DEFAULT_WORLD_WIDTH;
    const gameWorldHeight = levelData?.height || DEFAULT_WORLD_HEIGHT;
    const WORLD_Y_OFFSET = gameWorldHeight / 2;
    return { gameWorldWidth, gameWorldHeight, WORLD_Y_OFFSET };
};
// ---------------------------------------------

// === –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –£—Ä–æ–≤–Ω—è ===
const Level = ({ levelData, onLevelComplete, onReady, difficulty = 'normal' }) => {

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ levelData –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ ---
    if (!levelData || typeof levelData.id === 'undefined') {
        console.error("[Level.jsx] –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ levelData!", levelData);
        return <div className="level-screen error">–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è!</div>;
    }

    // === –†–µ—Ñ—ã ===
    const mountRef = useRef(null);
    const cameraRef = useRef(null);
    const sceneRef = useRef(null);
    const rendererRef = useRef(null);
    const joystickRef = useRef(null);
    const animationFrameId = useRef(null);
    const wallsRef = useRef([]);
    const projectilesRef = useRef([]); // –°–Ω–∞—Ä—è–¥—ã –∏–≥—Ä–æ–∫–∞
    const enemyProjectilesRef = useRef([]); // –°–Ω–∞—Ä—è–¥—ã –≤—Ä–∞–≥–æ–≤
    const velocity = useRef({ x: 0, y: 0, force: 0 });
    const playerAttackCooldown = useRef(0);
    const levelStartTimeRef = useRef(null);
    const readyCalledRef = useRef(false);
    const beamTexturesRef = useRef({});
    const backgroundMeshRef = useRef(null); // –†–µ—Ñ –¥–ª—è —Ñ–æ–Ω–∞

    // === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
    const [isLoading, setIsLoading] = useState(true);
    const [levelStatus, setLevelStatus] = useState('playing');
    const [enemiesState, setEnemiesState] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ HP –≤—Ä–∞–≥–æ–≤
    const [remainingTime, setRemainingTime] = useState(null);
    const [beamTexturesLoaded, setBeamTexturesLoaded] = useState(false);
    const [activeClouds, setActiveClouds] = useState([]); // <<< –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –¥–ª—è –æ–±–ª–∞–∫–æ–≤
    const activeCloudsRef = useRef([]); // –†–µ—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ animate

    
    
    // === –ì–ª–æ–±–∞–ª—å–Ω—ã–π –°—Ç–æ—Ä ===
    const {
        playerHp,
        displayMaxHp, // computedStats().hp
        playerStats,  // computedStats()
        playerTakeDamage,
        initializeLevelHp,
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑ code1 (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å applyDebuff)
        // applyDebuff // <- –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å action
    } = useGameStore(state => ({
        playerHp: state.playerHp,
        displayMaxHp: state.computedStats().hp,
        playerStats: state.computedStats(),
        playerTakeDamage: state.playerTakeDamage,
        initializeLevelHp: state.initializeLevelHp,
        // applyDebuff: state.applyDebuff // <- –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å action
    }));

    
    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HP –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è ---
    useEffect(() => {
        console.log(`[Level ${levelData.id}] Mount/Data Change: –í—ã–∑–æ–≤ initializeLevelHp()`);
        if (typeof initializeLevelHp === 'function') {
             initializeLevelHp();
        } else {
            console.error("–û–®–ò–ë–ö–ê: initializeLevelHp –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è!");
        }
        setLevelStatus('playing');
        readyCalledRef.current = false;
    }, [initializeLevelHp, levelData.id]);

    // --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –£—Ä–æ–≤–Ω—è ---
    const levelConfig = useMemo(() => {
        console.log("[Level.jsx] Calculating levelConfig");
        return getWorldDimensions(levelData);
    }, [levelData?.width, levelData?.height]);

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –ª—É—á–µ–π ---
    useEffect(() => {
        const textureLoader = new THREE.TextureLoader();
        let fireLoaded = false;
        let iceLoaded = false;
        let mounted = true;

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –ª—É—á–µ–π...");

        const checkTexLoadComplete = () => {
            if (fireLoaded && iceLoaded && mounted) {
                console.log("‚úÖ –¢–µ–∫—Å—Ç—É—Ä—ã –ª—É—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
                setBeamTexturesLoaded(true);
            }
        };

        textureLoader.load(
            BEAM_TEXTURE_FIRE,
            (texture) => {
                if (!mounted) return;
                console.log("üî• –¢–µ–∫—Å—Ç—É—Ä–∞ –û–≥–Ω—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                texture.encoding = THREE.sRGBEncoding;
                beamTexturesRef.current.fire = texture;
                fireLoaded = true;
                checkTexLoadComplete();
            },
            undefined,
            (error) => {
                if (!mounted) return;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${BEAM_TEXTURE_FIRE}:`, error);
                fireLoaded = true; // –°—á–∏—Ç–∞–µ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º" –¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π
                checkTexLoadComplete();
            }
        );

        textureLoader.load(
            BEAM_TEXTURE_ICE,
            (texture) => {
                if (!mounted) return;
                console.log("‚ùÑÔ∏è –¢–µ–∫—Å—Ç—É—Ä–∞ –õ—å–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
                texture.encoding = THREE.sRGBEncoding;
                beamTexturesRef.current.ice = texture;
                iceLoaded = true;
                checkTexLoadComplete();
            },
            undefined,
            (error) => {
                if (!mounted) return;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${BEAM_TEXTURE_ICE}:`, error);
                iceLoaded = true; // –°—á–∏—Ç–∞–µ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º" –¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π
                checkTexLoadComplete();
            }
        );

        return () => {
            mounted = false;
            beamTexturesRef.current.fire?.dispose();
            beamTexturesRef.current.ice?.dispose();
            beamTexturesRef.current = {};
            setBeamTexturesLoaded(false);
        }
    }, []);

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –°—Ü–µ–Ω—ã, –†–µ–Ω–¥–µ—Ä–µ—Ä–∞, –ö–∞–º–µ—Ä—ã ---
    useEffect(() => {
        console.log("[Level.jsx] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã Three.js");
        const scene = new THREE.Scene();
        sceneRef.current = scene;

        const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 2000);
        camera.position.set(0, 0, 1000);
        cameraRef.current = camera;

        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.outputEncoding = THREE.sRGBEncoding;
        rendererRef.current = renderer;

        const mountPoint = mountRef.current;
        if (!mountPoint) { console.error("Mount point not found!"); setLevelStatus('error'); return; }

        mountPoint.innerHTML = "";
        mountPoint.appendChild(renderer.domElement);

        const handleResize = () => {
            if (!mountRef.current || !rendererRef.current || !cameraRef.current) return;
            const width = mountPoint.clientWidth;
            const height = mountPoint.clientHeight;
            rendererRef.current.setSize(width, height);
            cameraRef.current.left = width / -2;
            cameraRef.current.right = width / 2;
            cameraRef.current.top = height / 2;
            cameraRef.current.bottom = height / -2;
            cameraRef.current.updateProjectionMatrix();
        };

        handleResize();
        window.addEventListener('resize', handleResize);

        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
        directionalLight.position.set(50, 150, 100);
        directionalLight.target.position.set(0, 0, 0);
        scene.add(directionalLight);
        scene.add(directionalLight.target);

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ Three.js (–æ—Å–Ω–æ–≤–Ω–∞—è)
        return () => {
            console.log("[Level.jsx] –û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω—ã Three.js");
            window.removeEventListener('resize', handleResize);

            // –û—Ç–º–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current);
                animationFrameId.current = null;
            }
            // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞
            if (joystickRef.current) {
                try { joystickRef.current.destroy(); } catch (e) { console.warn("Joystick destroy error:", e); }
                joystickRef.current = null;
            }

            // –£–¥–∞–ª—è–µ–º —Å–Ω–∞—Ä—è–¥—ã
            if (sceneRef.current) {
                 enemyProjectilesRef.current.forEach(proj => {
                     if (proj.mesh) {
                         sceneRef.current?.remove(proj.mesh);
                         proj.mesh.geometry?.dispose();
                         proj.mesh.material?.dispose();
                     }
                 });
                 projectilesRef.current.forEach(proj => {
                     if (proj.mesh) {
                         sceneRef.current?.remove(proj.mesh);
                         proj.mesh.geometry?.dispose();
                         proj.mesh.material?.dispose();
                     }
                 });
                 // –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∞
                 sceneRef.current.remove(ambientLight);
                 sceneRef.current.remove(directionalLight);
                 sceneRef.current.remove(directionalLight.target);
                 // –ú–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–∞ –∏ –≤—Ä–∞–≥–æ–≤ —É–¥–∞–ª—è—é—Ç—Å—è —Å–≤–æ–∏–º–∏ —Ö—É–∫–∞–º–∏ –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
            }
             enemyProjectilesRef.current = [];
             projectilesRef.current = [];


            // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
            rendererRef.current?.dispose();
            if (mountPoint && rendererRef.current?.domElement && mountPoint.contains(rendererRef.current.domElement)) {
                mountPoint.removeChild(rendererRef.current.domElement);
            }

            // –°–±—Ä–æ—Å —Ä–µ—Ñ–æ–≤
            sceneRef.current = null;
            rendererRef.current = null;
            cameraRef.current = null;
        };
    }, []);

    // --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –§–æ–Ω–∞ –∏ –°—Ç–µ–Ω ---
    useEffect(() => {
        const currentScene = sceneRef.current;
        if (!currentScene || !levelConfig) {
            console.log("[Level.jsx] Skip Background/Walls: No scene or levelConfig yet.");
            return;
        }
        console.log("[Level.jsx] –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞ –∏ —Å—Ç–µ–Ω");

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö
        if(backgroundMeshRef.current) {
            console.log("  > Removing old background");
            currentScene.remove(backgroundMeshRef.current);
            backgroundMeshRef.current.geometry?.dispose();
            backgroundMeshRef.current.material?.map?.dispose();
            backgroundMeshRef.current.material?.dispose();
            backgroundMeshRef.current = null;
        }
        if(wallsRef.current.length > 0) {
            console.log(`  > Removing ${wallsRef.current.length} old walls`);
            wallsRef.current.forEach(w => {
                if(w.mesh) {
                    currentScene.remove(w.mesh);
                    w.mesh.geometry?.dispose();
                    // –û–±—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ —É–¥–∞–ª—è–µ–º —Ç—É—Ç
                }
            });
            wallsRef.current = [];
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ–Ω–∞
        const textureLoader = new THREE.TextureLoader();
        if (levelData?.backgroundTexture) {
            console.log(`  > Loading background texture: ${levelData.backgroundTexture}`);
            textureLoader.load(
                levelData.backgroundTexture,
                (texture) => {
                    if (!sceneRef.current) return;
                    console.log("    * Background texture loaded successfully");
                    texture.encoding = THREE.sRGBEncoding;
                    const bgGeometry = new THREE.PlaneGeometry(levelConfig.gameWorldWidth, levelConfig.gameWorldHeight);
                    const bgMaterial = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });
                    const backgroundMesh = new THREE.Mesh(bgGeometry, bgMaterial);
                    backgroundMesh.position.set(0, 0, -10);
                    backgroundMesh.renderOrder = -1;
                    sceneRef.current.add(backgroundMesh);
                    backgroundMeshRef.current = backgroundMesh;
                },
                undefined,
                (error) => {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞:", error);
                    if(sceneRef.current) sceneRef.current.background = new THREE.Color(0x282c34);
                }
            );
        } else {
            console.log("  > No background texture specified, using color.");
            currentScene.background = new THREE.Color(0x282c34);
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–µ–Ω
        if (levelData?.walls && levelData.walls.length > 0 && levelConfig) {
            console.log(`  > Creating ${levelData.walls.length} walls`);
             const wallMaterial = new THREE.MeshStandardMaterial({
                 color: 0x808080,
                 roughness: 0.8,
                 metalness: 0.2
             });
             const tempWalls = [];

             levelData.walls.forEach(wallData => {
                 const wallWidth = wallData.width;
                 const wallHeight = wallData.height;
                 const wallX = convertTiledX(wallData.x, wallWidth, levelConfig.gameWorldWidth);
                 const wallY = convertTiledY(wallData.y, wallHeight, levelConfig.gameWorldHeight, levelConfig.WORLD_Y_OFFSET);

                 const wallGeometry = new THREE.BoxGeometry(wallWidth, wallHeight, 10);
                 const wallMesh = new THREE.Mesh(wallGeometry, wallMaterial);
                 wallMesh.position.set(wallX, wallY, -5);
                 currentScene.add(wallMesh);

                 tempWalls.push({
                     id: wallData.id || `wall-${Math.random()}`,
                     x: wallX - wallWidth / 2,
                     y: wallY - wallHeight / 2,
                     width: wallWidth,
                     height: wallHeight,
                     mesh: wallMesh
                 });
             });
             wallsRef.current = tempWalls;
         } else {
             console.log("  > No walls data found or levelConfig missing.");
         }

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ useEffect
        return () => {
            console.log("[Level.jsx] –û—á–∏—Å—Ç–∫–∞ —Ñ–æ–Ω–∞ –∏ —Å—Ç–µ–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º");
             if (sceneRef.current) {
                 if(backgroundMeshRef.current) {
                     sceneRef.current.remove(backgroundMeshRef.current);
                     backgroundMeshRef.current.geometry?.dispose();
                     backgroundMeshRef.current.material?.map?.dispose();
                     backgroundMeshRef.current.material?.dispose();
                     backgroundMeshRef.current = null;
                 }
                 wallsRef.current.forEach(w => {
                     if (w.mesh) {
                         sceneRef.current?.remove(w.mesh);
                         w.mesh.geometry?.dispose();
                         // –ù–µ —É–¥–∞–ª—è–µ–º –æ–±—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –∑–¥–µ—Å—å
                     }
                 });
                 sceneRef.current.background = null;
             }
             wallsRef.current = [];
        };
    }, [levelConfig, levelData?.backgroundTexture, levelData?.walls]);

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –ò–≥—Ä–æ–∫–∞ ---
    const { playerObject, isPlayerModelLoaded } = usePlayerLoader(
        playerStats?.skin || "/Models/character.glb",
        levelData?.playerStart || (levelConfig ? { x: 0, y: levelConfig.WORLD_Y_OFFSET - 50 } : { x: 0, y: 0 }),
        sceneRef.current,
        levelConfig
    );

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –í—Ä–∞–≥–æ–≤ (–ò–°–ü–û–õ–¨–ó–£–ï–ú useEnemyLoader) ---
    const { enemyRefs, areEnemiesLoaded, initialEnemyStates } = useEnemyLoader(
        levelData?.enemies,
        sceneRef.current,
        levelConfig,
        levelData?.id,
        difficulty
    );

    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π –∑–∞–≥—Ä—É–∑–∫–æ–π ---
    useEffect(() => {
        const allLoaded = !!levelConfig && isPlayerModelLoaded && areEnemiesLoaded && beamTexturesLoaded;
        const currentlyLoading = !allLoaded;

        if (isLoading !== currentlyLoading) {
            setIsLoading(currentlyLoading);
            if (!currentlyLoading) { // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¢–û–õ–¨–ö–û –ß–¢–û –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
                if (!readyCalledRef.current) {
                    console.log("‚ú® –£—Ä–æ–≤–µ–Ω—å –ì–û–¢–û–í! –í—ã–∑–æ–≤ onReady.");
                    if (typeof initializeLevelHp === 'function') {
                        initializeLevelHp();
                        console.log("HP –∏–≥—Ä–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.");
                    } else {
                        console.error("–û–®–ò–ë–ö–ê: initializeLevelHp –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ onReady!");
                    }
                    if (typeof onReady === 'function') {
                         onReady();
                    } else {
                         console.warn("–ü—Ä–æ–ø—Å onReady –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ Level.");
                    }
                    readyCalledRef.current = true;

                    if (levelData?.winCondition?.type === 'survive_duration') {
                        levelStartTimeRef.current = Date.now();
                        setRemainingTime(levelData.winCondition.duration);
                        console.log(`Survival Timer Started: ${levelData.winCondition.duration}s`);
                    } else {
                        levelStartTimeRef.current = null;
                        setRemainingTime(null);
                    }
                } else {
                     console.log("[Level.jsx] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ onReady —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω.");
                }
            } else {
                 console.log("[Level.jsx] –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...");
            }
        }
    }, [
        levelConfig,
        isPlayerModelLoaded,
        areEnemiesLoaded,
        beamTexturesLoaded,
        isLoading,
        onReady,
        initializeLevelHp,
        levelData?.winCondition
    ]);

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ä–∞–≥–æ–≤ ---
    useEffect(() => {
        if (areEnemiesLoaded && initialEnemyStates && initialEnemyStates.length > 0) {
            if (JSON.stringify(enemiesState) !== JSON.stringify(initialEnemyStates)) {
                 console.log(`--- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø enemiesState (${initialEnemyStates.length} —à—Ç.) –∏–∑ initialEnemyStates ---`);
                 setEnemiesState(initialEnemyStates);
            }
        } else if (!areEnemiesLoaded && enemiesState.length > 0) {
             console.log("--- –û—á–∏—Å—Ç–∫–∞ enemiesState, —Ç.–∫. areEnemiesLoaded = false ---");
             setEnemiesState([]);
        }
    }, [areEnemiesLoaded, initialEnemyStates]); // –ù–µ –∑–∞–≤–∏—Å–∏–º –æ—Ç enemiesState

    const hpResources = useMemo(() => ({
        geometryBg: new THREE.PlaneGeometry(HEALTH_BAR_WIDTH, HEALTH_BAR_HEIGHT),
        geometryFill: new THREE.PlaneGeometry(HEALTH_BAR_WIDTH, HEALTH_BAR_HEIGHT),
        materialBg: new THREE.MeshBasicMaterial({ color: 0x333333, depthTest: false, depthWrite: false, transparent: true, opacity: 0.8 }),
        materialFill: new THREE.MeshBasicMaterial({ color: 0x00ff00, depthTest: false, depthWrite: false, transparent: true, opacity: 0.9 })
    }), []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π = —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ—Ñ–∞ –∏ —Å—Ç–µ–π—Ç–∞
    useEffect(() => {
        console.log(`[Sync Ref] activeClouds state changed, updating activeCloudsRef. New length: ${activeClouds.length}`);
        activeCloudsRef.current = activeClouds;
    }, [activeClouds]);

// –í Level.jsx
const createPoisonCloud = useCallback((position) => {
    const currentScene = sceneRef.current;
    if (!currentScene) return;

    const cloudRadius = 70; // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–Ω–∞
    const cloudDuration = 8.0;
    const cloudDps = 5;
    // const cloudColor = 0x32CD32; // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç

    console.log(`‚òÅÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ø–î–û–í–ò–¢–û–ì–û –û–ë–õ–ê–ö–ê (–¢–ï–°–¢ –ö–£–ë) –≤ (${position.x.toFixed(0)}, ${position.y.toFixed(0)})`);

    // --- –¢–ï–°–¢–û–í–´–ô –í–∏–∑—É–∞–ª (–Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π –∫—É–±) ---
    const testGeometry = new THREE.BoxGeometry(cloudRadius * 0.8, cloudRadius * 0.8, 10); // –ö—É–± —Ä–∞–∑–º–µ—Ä–æ–º —Å —Ä–∞–¥–∏—É—Å
    const testMaterial = new THREE.MeshStandardMaterial({ // Standard –º–∞—Ç–µ—Ä–∏–∞–ª —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–≤–µ—Ç
        color: 0xff00ff,    // –Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
        emissive: 0x330033, // –ù–µ–º–Ω–æ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–≤–µ—á–µ–Ω–∏—è
        roughness: 0.5,
        metalness: 0.1
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞
        // transparent: false,
        // opacity: 1.0,
    });
    const testMesh = new THREE.Mesh(testGeometry, testMaterial);
    testMesh.position.copy(position);
    testMesh.position.z = 5; // <<< –°—Ç–∞–≤–∏–º –ù–ê–î –∑–µ–º–ª–µ–π (Z=0)
    // mesh.rotation.x = -Math.PI / 2; // –ö—É–±—É –Ω–µ –Ω—É–∂–µ–Ω –ø–æ–≤–æ—Ä–æ—Ç, —á—Ç–æ–±—ã –ª–µ–∂–∞—Ç—å –Ω–∞ –∑–µ–º–ª–µ
    testMesh.renderOrder = 30; // –í—ã—à–µ –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    currentScene.add(testMesh);
    // --- –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–∑—É–∞–ª–∞ ---

    // --- –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å —Ç–µ—Å—Ç–æ–≤—ã–º –º–µ—à–µ–º!) ---
    const cloudData = {
        id: Math.random(),
        mesh: testMesh, // <<< –í–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¢–ï–°–¢–û–í–´–ô –º–µ—à
        position: position.clone(),
        radiusSq: cloudRadius * cloudRadius,
        dps: cloudDps,
        endTime: Date.now() + cloudDuration * 1000,
    };
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å—Ç–µ–π—Ç–∞
    setActiveClouds(prevClouds => {
         const newClouds = [...prevClouds, cloudData];
         console.log(`[setActiveClouds] –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–ª–∞–∫–æ ${cloudData.id}. –í—Å–µ–≥–æ: ${newClouds.length}`);
         return newClouds;
     });

}, [sceneRef, setActiveClouds]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

     

// –í Level.jsx

    // === 8. –£–î–ê–õ–ï–ù–ò–ï –ú–ï–†–¢–í–´–• –í–†–ê–ì–û–í –°–û –°–¶–ï–ù–´ ===
    useEffect(() => {
        const currentScene = sceneRef.current;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if (!currentScene || !enemyRefs || !enemiesState) {
            return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤–æ
        }

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¢–ï–ö–£–©–ò–ú –†–ï–§–ê–ú (3D –æ–±—ä–µ–∫—Ç–∞–º), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ —Å—Ü–µ–Ω–µ
        enemyRefs.forEach(enemyRef => {
            if (!enemyRef || !enemyRef.pivot) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ—Ñ—ã

            // –ù–∞—Ö–æ–¥–∏–º –°–û–°–¢–û–Ø–ù–ò–ï –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–∞–≥–∞
            const enemyState = enemiesState.find(es => es.id === enemyRef.id);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–µ—Ä—Ç–≤ –ª–∏ –≤—Ä–∞–≥ —Å–æ–≥–ª–∞—Å–Ω–æ –°–û–°–¢–û–Ø–ù–ò–Æ
            const isDeadInState = enemyState && enemyState.currentHp <= 0;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞ –µ—â–µ –Ω–∞ —Å—Ü–µ–Ω–µ
            const isOnScene = currentScene.children.includes(enemyRef.pivot);

            if (isDeadInState) {
                // --- –í—Ä–∞–≥ –ú–ï–†–¢–í –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é ---
                 if (!enemyRef.isDead) {
                     enemyRef.isDead = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Ä–µ—Ñ–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AI
                     // console.log(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ isDead=true –¥–ª—è ${enemyRef.id} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.`);
                 }

                 // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –µ—â–µ –Ω–∞ —Å—Ü–µ–Ω–µ - –£–î–ê–õ–Ø–ï–ú
                 if (isOnScene) {
                     // <<<--- –í–û–¢ –≠–¢–£ –ü–†–û–í–ï–†–ö–£ –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨ / –í–ï–†–ù–£–¢–¨ --->>>
                     // console.log(`[Cleanup Check] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è ${enemyRef.id}: –¢–∏–ø=${enemyRef.type}, –§–ª–∞–≥ needsToExplode=${enemyRef.needsToExplode}`); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                     if (enemyRef.type === 'rotting_soldier' && enemyRef.needsToExplode) {
                         createPoisonCloud(enemyRef.pivot.position.clone()); // –í—ã–∑—ã–≤–∞–µ–º –æ–±–ª–∞–∫–æ
                         enemyRef.needsToExplode = false; // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                         console.log(`–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç —Å–º–µ—Ä—Ç–∏ (–æ–±–ª–∞–∫–æ) –¥–ª—è —Å–æ–ª–¥–∞—Ç–∞ ${enemyRef.id}`);
                     }
                     // <<<--- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò --- >>>

                     console.log(`--- –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ–≥–æ –≤—Ä–∞–≥–∞ ${enemyRef.id} (State HP: ${enemyState?.currentHp}) —Å–æ —Å—Ü–µ–Ω—ã ---`);
                     currentScene.remove(enemyRef.pivot); // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç

                     // ... –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ ...
                 }
            }
             // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –°–∫—Ä—ã–≤–∞–µ–º —Ö–µ–ª—Å–±–∞—Ä –º–µ—Ä—Ç–≤–æ–≥–æ –≤—Ä–∞–≥–∞
             if (enemyRef.hpBar?.container && isDeadInState) {
                   enemyRef.hpBar.container.visible = false;
             }

        }); // –ö–æ–Ω–µ—Ü forEach

    // –£–±–µ–¥–∏—Å—å, —á—Ç–æ createPoisonCloud –µ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö!
    }, [enemiesState, enemyRefs, sceneRef, createPoisonCloud, hpResources]);

    

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –î–∂–æ–π—Å—Ç–∏–∫–∞ ---
    useEffect(() => {
        let joystickInstance = null;
        if (!isLoading && sceneRef.current) {
            const joystickZone = document.getElementById("joystick-container");
            if (joystickZone && !joystickRef.current) {
                try {
                    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞...");
                    const options = {
                        zone: joystickZone,
                        mode: "static",
                        position: { left: "50%", top: "50%" },
                        size: 100,
                        color: "rgba(255, 255, 255, 0.5)",
                        threshold: 0.1
                    };
                    joystickInstance = nipplejs.create(options);
                    joystickRef.current = joystickInstance;

                    joystickInstance.on("move", (evt, data) => {
                        if (data.vector) {
                            velocity.current = { x: data.vector.x, y: data.vector.y, force: data.force };
                        }
                    });
                    joystickInstance.on("end", () => {
                        velocity.current = { x: 0, y: 0, force: 0 };
                    });
                    console.log("–î–∂–æ–π—Å—Ç–∏–∫ —Å–æ–∑–¥–∞–Ω.");
                } catch (error) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞:", error);
                }
            } else if (!joystickZone) {
                 console.warn("–ù–µ –Ω–∞–π–¥–µ–Ω #joystick-container –¥–ª—è –¥–∂–æ–π—Å—Ç–∏–∫–∞.");
            }
        } else if (isLoading && joystickRef.current) {
             console.log("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –∏–∑-–∑–∞ isLoading=true");
              try { joystickRef.current.destroy(); } catch(e) { console.warn("Joystick destroy error:", e); }
              joystickRef.current = null;
        }

        return () => {
            if (joystickRef.current) {
                 console.log("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ useEffect");
                 try { joystickRef.current.destroy(); } catch(e) { console.warn("Joystick destroy error:", e); }
                 joystickRef.current = null;
            }
        };
    }, [isLoading]);

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥—É ---
// –í Level.jsx

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –£–†–û–ù–ê –í–†–ê–ì–£ (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ë–õ–û–ö–û–ú –∏ –í–ó–†–´–í–û–ú) ===
// –í Level.jsx

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –£–†–û–ù–ê –í–†–ê–ì–£ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ===
    const handleEnemyHit = useCallback((enemyId, damageAmount) => {
        // <<< –ò–°–ü–û–õ–¨–ó–£–ï–ú enemyRefs –ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø >>>
        const enemyRef = enemyRefs.find(ref => ref && ref.id === enemyId);

        // –ï—Å–ª–∏ –≤—Ä–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –º–µ—Ä—Ç–≤—ã–π, –≤—ã—Ö–æ–¥–∏–º
        if (!enemyRef || enemyRef.isDead) {
             // console.log(`[handleEnemyHit] Hit ignored for dead/missing enemy ${enemyId}`);
             return;
        }

        // --- –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ê –†–´–¶–ê–†–Ø ---
        if (enemyRef.type === 'revenant_knight') {
            if (typeof enemyRef.blockCharges === 'undefined') {
                 enemyRef.blockCharges = enemyRef.stats.initialBlockCharges || 0;
            }
            if (enemyRef.blockCharges > 0) {
                enemyRef.blockCharges -= 1;
                console.log(`üõ°Ô∏è Knight ${enemyId} BLOCKED! Charges left: ${enemyRef.blockCharges}`);
                // TODO: –≠—Ñ—Ñ–µ–∫—Ç –±–ª–æ–∫–∞
                return; // –£—Ä–æ–Ω –Ω–µ –Ω–∞–Ω–æ—Å–∏–º
            } else if (enemyRef.blockCharges === 0 && !enemyRef.blockBrokenNotified) {
                 console.log(`Knight ${enemyId} block broken!`);
                 enemyRef.blockBrokenNotified = true;
            }
        }
        // --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –ë–õ–û–ö–ê ---

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        let enemyDefeated = false;
        let needsExplosion = false;

        setEnemiesState(prevEnemies => {
            const enemyIndex = prevEnemies.findIndex(e => e.id === enemyId);
            if (enemyIndex !== -1 && prevEnemies[enemyIndex].currentHp > 0) {
                 const newState = [...prevEnemies];
                 const currentHp = newState[enemyIndex].currentHp;
                 const newHp = Math.max(0, currentHp - damageAmount);
                 // console.log(`   >> HP change for ${enemyId} (${enemyRef.type}): ${currentHp} -> ${newHp}`);

                 if (newHp === 0) {
                      enemyDefeated = true;
                      console.log(`   >> Enemy ${enemyId} defeated (HP=0)!`);
                      if (enemyRef.type === 'rotting_soldier') {
                          needsExplosion = true;
                      }
                 }
                 newState[enemyIndex] = { ...newState[enemyIndex], currentHp: newHp };
                 return newState;
            }
            return prevEnemies;
        });

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–æ–≤ –≤ –†–ï–§–ï –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
         if (enemyDefeated && !enemyRef.isDead) {
             enemyRef.isDead = true;
             if (needsExplosion) {
                 enemyRef.needsToExplode = true;
                 console.log(`[handleEnemyHit] –£–°–¢–ê–ù–û–í–õ–ï–ù –§–õ–ê–ì ${enemyRef.id}.needsToExplode = ${enemyRef.needsToExplode}`);
                }             
             console.log(`--- Flag isDead SET for ${enemyId} AFTER state update ---`);
         }
    // <<< –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–í–ò–°–ò–ú–û–°–¢–ò: –∏—Å–ø–æ–ª—å–∑—É–µ–º enemyRefs –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è >>>
    }, [enemyRefs, enemiesState, playerTakeDamage]); // –î–æ–±–∞–≤–∏–ª–∏ enemyRefs

    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ useEffect ...

    // --- –õ–æ–≥–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä—ã ---
    const winLevel = useCallback(() => { if (levelStatus === 'playing') { console.log(">>> –£—Ä–æ–≤–µ–Ω—å –í–´–ò–ì–†–ê–ù <<<"); setLevelStatus('won'); } }, [levelStatus]);
    const loseLevel = useCallback(() => { if (levelStatus === 'playing') { console.log(">>> –£—Ä–æ–≤–µ–Ω—å –ü–†–û–ò–ì–†–ê–ù <<<"); setLevelStatus('lost'); } }, [levelStatus]);

    // –°–ª–µ–¥–∏–º –∑–∞ HP –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞
    useEffect(() => {
        if (typeof playerHp === 'number' && playerHp <= 0 && levelStatus === 'playing') {
            loseLevel();
        }
    }, [playerHp, levelStatus, loseLevel]);


    // === –§–£–ù–ö–¶–ò–ò-–ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô –í–†–ê–ì–û–í (–∏–∑ code1) ===

    // –î–ª—è –ù–µ–∫—Ä–æ–º–∞–Ω—Ç–∞, –ù–æ—Å–∏–ª—å—â–∏–∫–∞
    const summonCreature = useCallback((summonerId, creatureType, count, position) => {
        console.warn(`[${summonerId}] SUMMON STUB: ${count} x ${creatureType} at (${position.x.toFixed(0)}, ${position.y.toFixed(0)}) - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
        // TODO:
        // 1. –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã –¥–ª—è creatureType (–∏–∑ –∫–∞–∫–æ–≥–æ-—Ç–æ –æ–±—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –≤—Ä–∞–≥–æ–≤?).
        // 2. –û—Ç–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ levelId –∏ difficulty.
        // 3. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞ (pivot, mesh-–∑–∞–≥–ª—É—à–∫—É, hpBar) –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ useEnemyLoader.
        // 4. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ enemyRefs.current (–í–ê–ñ–ù–û: –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å).
        // 5. –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HP –≤ enemiesState (–í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å setEnemiesState —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞, –ª—É—á—à–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π).
        // 6. –î–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π pivot –Ω–∞ —Å—Ü–µ–Ω—É sceneRef.current.
    }, [levelData?.id, difficulty]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç ID —É—Ä–æ–≤–Ω—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è

    // –î–ª—è –¢–æ—Ç–µ–º—â–∏–∫–∞
    const placeTotem = useCallback((casterId, position, totemType, duration, range, effect) => {
        console.warn(`[${casterId}] PLACE TOTEM STUB: type=${totemType}, duration=${duration}s at (${position.x.toFixed(0)}, ${position.y.toFixed(0)}) - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
        // TODO:
        // 1. –°–æ–∑–¥–∞—Ç—å 3D-–º–µ—à –¥–ª—è —Ç–æ—Ç–µ–º–∞ (—Ü–∏–ª–∏–Ω–¥—Ä?).
        // 2. –î–æ–±–∞–≤–∏—Ç—å –º–µ—à –Ω–∞ —Å—Ü–µ–Ω—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π position.
        // 3. –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ç–µ–º–µ (id, position, type, range, effect, endTime, mesh) –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, `activeTotems`.
        // 4. –í –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ `animate` –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ç–µ–º—ã:
        //     - –£–¥–∞–ª—è—Ç—å —Å–æ —Å—Ü–µ–Ω—ã –∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ (Date.now() > endTime).
        //     - –ü—Ä–æ–≤–µ—Ä—è—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ç–µ–º–æ–≤.
        //     - –ü—Ä–∏–º–µ–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–±–∞—Ñ—Ñ—ã/–¥–µ–±–∞—Ñ—Ñ—ã) –∫ –∏–≥—Ä–æ–∫—É (—á–µ—Ä–µ–∑ useGameStore?).
    }, []);

    // –î–ª—è –ñ–Ω–µ—Ü–∞
    const triggerGroundSpikes = useCallback((casterId, targetPos, delay, radius, damage) => {
        console.warn(`[${casterId}] TRIGGER SPIKES STUB at (${targetPos.x.toFixed(0)}, ${targetPos.y.toFixed(0)}) after ${delay}s - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
        // TODO:
        // 1. –°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ –∑–µ–º–ª–µ –≤ targetPos (–¥–µ–∫–∞–ª—å, –∫—Ä—É–≥?).
        // 2. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä (setTimeout –∏–ª–∏ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–∫—É –≤ animate).
        // 3. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ delay:
        //     - –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é/—ç—Ñ—Ñ–µ–∫—Ç —à–∏–ø–æ–≤.
        //     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ radius –æ—Ç targetPos.
        //     - –ï—Å–ª–∏ –¥–∞, –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω: playerTakeDamage(damage).
        //     - –£–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä/—ç—Ñ—Ñ–µ–∫—Ç —à–∏–ø–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.
    }, [playerTakeDamage]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç playerTakeDamage

    // –î–ª—è –ö—É–ª—å—Ç–∏—Å—Ç–∞
    const createPoisonPuddle = useCallback((casterId, targetPos, duration, radius, dps) => {
        console.warn(`[${casterId}] CREATE PUDDLE STUB at (${targetPos.x.toFixed(0)}, ${targetPos.y.toFixed(0)}), ${dps} dps for ${duration}s - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
        // TODO:
        // 1. –°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ª—É–∂–∏ (–¥–µ–∫–∞–ª—å, –ø–ª–æ—Å–∫–æ—Å—Ç—å —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π?).
        // 2. –î–æ–±–∞–≤–∏—Ç—å –º–µ—à –Ω–∞ —Å—Ü–µ–Ω—É –≤ targetPos.
        // 3. –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É–∂–µ (id, position, radius, dps, endTime, mesh) –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è `activePuddles`.
        // 4. –í –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ `animate` –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç:
        //     - –£–¥–∞–ª—è—Ç—å –ª—É–∂–∏ —Å–æ —Å—Ü–µ–Ω—ã –∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ.
        //     - –ü—Ä–æ–≤–µ—Ä—è—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª—É–∂.
        //     - –ï—Å–ª–∏ –¥–∞, –Ω–∞–Ω–æ—Å–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: playerTakeDamage(dps * dt).
    }, [playerTakeDamage]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç playerTakeDamage

    // –î–ª—è –ü—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—è
    const applyPlayerDebuff = useCallback((casterId, type, duration, strength) => {
        console.warn(`[${casterId}] APPLY DEBUFF STUB: ${type}, duration: ${duration}s, strength: ${strength} - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
        // TODO:
        // 1. –í—ã–∑–≤–∞—Ç—å action –∏–∑ useGameStore –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–±–∞—Ñ—Ñ–∞:
        //     store.applyDebuff(type, duration, strength); // <-- –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å applyDebuff –∏–∑ —Å—Ç–æ—Ä–∞
        // 2. –í useGameStore –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞:
        //     - –î–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–±–∞—Ñ—Ñ–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–±–∞—Ñ—Ñ–æ–≤ –∏–≥—Ä–æ–∫–∞ (—Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è).
        //     - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è computedStats, —á—Ç–æ–±—ã –æ–Ω–∏ —É—á–∏—Ç—ã–≤–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–±–∞—Ñ—Ñ—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–º–µ–Ω—å—à–∞–ª–∏ —É—Ä–æ–Ω –∏–≥—Ä–æ–∫–∞).
        //     - –£–¥–∞–ª–µ–Ω–∏—è –¥–µ–±–∞—Ñ—Ñ–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ duration.
    }, [/* applyDebuff */]); // <- –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    // –î–ª—è –û–≥—Ä–∞-–º–∞–≥–∞
    const createProjectileToPoint = useCallback((enemyId, startPos, targetPos, damage, speed) => {
        console.warn(`[${enemyId}] CREATE PROJECTILE TO POINT STUB from (${startPos.x.toFixed(0)}, ${startPos.y.toFixed(0)}) to (${targetPos.x.toFixed(0)}, ${targetPos.y.toFixed(0)}) - –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`);
        // TODO:
        // 1. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–µ–∫—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è velocity –æ—Ç startPos –∫ targetPos.
        // 2. –°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞—Ä—è–¥–∞ (id, ownerId, position=startPos, velocity, damage, lifetime).
        // 3. –î–æ–±–∞–≤–∏—Ç—å —Å–Ω–∞—Ä—è–¥ –≤ –º–∞—Å—Å–∏–≤ enemyProjectilesRef.current.
        // 4. –°–æ–∑–¥–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—à —Å–Ω–∞—Ä—è–¥–∞ –Ω–∞ —Å—Ü–µ–Ω—É (addEnemyProjectileMesh).
        // 5. –õ–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –∫–æ–ª–ª–∏–∑–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ animate —É–∂–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è enemyProjectilesRef.
    }, []); // –ü–æ–∫–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è sceneRef

    // === –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô-–ó–ê–ì–õ–£–®–ï–ö ===


    // === –û–°–ù–û–í–ù–û–ô –ò–ì–†–û–í–û–ô –¶–ò–ö–õ ===
    useEffect(() => {
        // –£—Å–ª–æ–≤–∏–µ –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞
        if (isLoading || levelStatus !== 'playing' || !playerObject || !enemyRefs || !sceneRef.current || !rendererRef.current || !cameraRef.current || !levelConfig || !beamTexturesLoaded) {
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current);
                animationFrameId.current = null;
            }
            return;
        }
        const clock = new THREE.Clock();
        let lastTimestamp = 0;

        // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ü–∏–∫–ª–∞ ---

        const findNearestEnemy = (origin, maxRangeSq) => {
            let nearestEnemy = null;
            let minDistanceSq = maxRangeSq;
            enemyRefs?.forEach(enemy => {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º enemy.isDead –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –≤ enemiesState –∫–∞–∂–¥—ã–π —Ä–∞–∑
                if (!enemy || enemy.isDead || !enemy.pivot?.position) return;
                const distanceSq = origin.distanceToSquared(enemy.pivot.position);
                if (distanceSq < minDistanceSq) {
                    minDistanceSq = distanceSq;
                    nearestEnemy = enemy;
                }
            });
            return nearestEnemy;
        };

        const addProjectileMesh = (projectileData) => {
            if (!sceneRef.current) return;
            const geometry = new THREE.SphereGeometry(4, 6, 6);
            const material = new THREE.MeshBasicMaterial({ color: projectileData.isCrit ? 0xffaa00 : 0xffffff });
            const mesh = new THREE.Mesh(geometry, material);
            mesh.position.copy(projectileData.position);
            projectileData.mesh = mesh;
            sceneRef.current.add(mesh);
        };

        const createProjectile = (targetEnemyRef) => {
            if (!playerObject || !targetEnemyRef?.pivot?.position || !playerStats) return;

            const projSpeed = 500;
            const projLifetime = 1.5;
            const baseDamage = playerStats.attack || 1;
            const startPos = playerObject.position.clone();
            const targetPos = targetEnemyRef.pivot.position.clone();
            const direction = targetPos.sub(startPos).normalize();
            const critChance = playerStats.critChance || 0;
            const isCrit = Math.random() * 100 < critChance;
            const critMultiplier = playerStats.critMultiplier || 2;
            let finalDamage = isCrit ? Math.round(baseDamage * critMultiplier) : baseDamage;

            const doubleStrikeChance = playerStats.doubleStrikeChance || 0;
            const isDoubleStrike = Math.random() * 100 < doubleStrikeChance;

            const makeProjectileData = (dmg, crit, offset = 0) => {
                const pos = playerObject.position.clone().add(direction.clone().multiplyScalar(25));
                if (offset !== 0) {
                    pos.add(new THREE.Vector3(direction.y, -direction.x, 0).multiplyScalar(offset));
                }
                return {
                    id: Math.random(),
                    position: pos,
                    velocity: direction.clone().multiplyScalar(projSpeed),
                    damage: dmg,
                    isCrit: crit,
                    lifetime: projLifetime,
                    mesh: null
                };
            };

            const p1 = makeProjectileData(finalDamage, isCrit);
            projectilesRef.current.push(p1);
            addProjectileMesh(p1);

            if (isDoubleStrike) {
                const isCrit2 = Math.random() * 100 < critChance;
                const dmg2 = isCrit2 ? Math.round(baseDamage * critMultiplier) : baseDamage;
                const p2 = makeProjectileData(dmg2, isCrit2, 8);
                projectilesRef.current.push(p2);
                addProjectileMesh(p2);
            }
        };

        const addEnemyProjectileMesh = (projData) => {
            if (!sceneRef.current) return;
            const geometry = new THREE.CylinderGeometry(0.5, 0.5, 12, 5);
            const material = new THREE.MeshBasicMaterial({ color: 0x8B4513 });
            const mesh = new THREE.Mesh(geometry, material);
            mesh.position.copy(projData.position);
            mesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), projData.velocity.clone().normalize());
            projData.mesh = mesh;
            sceneRef.current.add(mesh);
        };

        const createEnemyProjectile = (enemy, playerCurrentPos) => {
             if (!enemy || !enemy.pivot?.position || !enemy.stats || !playerCurrentPos || enemy.isDead) return;

             const projSpeed = 300 + Math.random() * 100;
             const projLifetime = 2.0;
             const damage = enemy.stats.damage || 3;

             const startPos = enemy.pivot.position.clone();
             const targetPos = playerCurrentPos.clone();
             const direction = targetPos.sub(startPos).normalize();
             startPos.add(direction.clone().multiplyScalar(25)); // –°–º–µ—â–∞–µ–º —Å—Ç–∞—Ä—Ç –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≤—Ä–∞–≥–∞

             const projectileData = {
                 id: Math.random(),
                 ownerId: enemy.id,
                 position: startPos,
                 velocity: direction.clone().multiplyScalar(projSpeed),
                 damage: damage,
                 lifetime: projLifetime,
                 mesh: null
             };
             enemyProjectilesRef.current.push(projectileData);
             addEnemyProjectileMesh(projectileData);
        };

        // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª—É—á–µ–π ---
        const createBeamMeshFixed = (enemy, targetPos) => {
            if (!sceneRef.current || !enemy.pivot?.position || !beamTexturesRef.current || !enemy.stats || enemy.isDead) {
                console.warn("createBeamMeshFixed: –ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—Ä–∞–≥ –º–µ—Ä—Ç–≤.");
                return null;
            }

            const beamType = enemy.stats.beamType === 'fire' ? 'fire' : 'ice';
            const texture = beamTexturesRef.current[beamType];

            if (!texture) {
                console.error(`–¢–µ–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ª—É—á–∞ —Ç–∏–ø–∞ "${beamType}" –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!`);
                return null;
            }

            const startPoint = enemy.pivot.position.clone();
            const beamOriginOffsetY = 25;
            startPoint.y += beamOriginOffsetY;

            const endPoint = targetPos.clone();
            const direction = endPoint.clone().sub(startPoint);
            const distance = direction.length();

            if (distance <= 0.1) return null;

            const beamGeo = new THREE.PlaneGeometry(BEAM_WIDTH, 1);
            const beamMat = new THREE.MeshBasicMaterial({
                map: texture,
                transparent: true,
                depthTest: false,
                depthWrite: false,
                side: THREE.DoubleSide,
            });

            const beamMesh = new THREE.Mesh(beamGeo, beamMat);
            beamMesh.name = `beam_${enemy.id}`;
            beamMesh.renderOrder = 900;
            beamMesh.scale.y = distance;
            beamMesh.position.copy(startPoint).lerp(endPoint, 0.5);
            beamMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), direction.normalize());

            sceneRef.current.add(beamMesh);
            return beamMesh;
        }

        const updateBeamMesh = (beamMesh, startPosRaw, targetPos) => {
             if (!beamMesh || !startPosRaw || !targetPos) return;

             const startPoint = startPosRaw.clone();
             const beamOriginOffsetY = 25;
             startPoint.y += beamOriginOffsetY;

             const endPoint = targetPos.clone();
             const direction = endPoint.clone().sub(startPoint);
             const distance = direction.length();

             if (distance <= 0.1) {
                 beamMesh.visible = false;
                 return;
             }

             beamMesh.visible = true;
             beamMesh.scale.y = distance;
             beamMesh.position.copy(startPoint).lerp(endPoint, 0.5);
             beamMesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), direction.normalize());
        }

        const removeBeamMesh = (enemy) => {
             if (enemy.beamEffectMesh && sceneRef.current) {
                 sceneRef.current.remove(enemy.beamEffectMesh);
                 enemy.beamEffectMesh.geometry?.dispose();
                 enemy.beamEffectMesh.material?.map?.dispose();
                 enemy.beamEffectMesh.material?.dispose();
                 enemy.beamEffectMesh = null;
             }
        }
        // --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ª—É—á–µ–π ---


        // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã ---
        const checkWinCondition = () => {
            if (!levelData?.winCondition || isLoading || levelStatus !== 'playing') return;

             if (enemiesState.length === 0 && initialEnemyStates?.length > 0 && areEnemiesLoaded) {
                  if (levelData.winCondition.type === 'clear_enemies') {
                      console.log("Win Condition Check: clear_enemies MET (enemiesState became empty)!");
                      winLevel();
                      return;
                  }
             }

            const { type, duration } = levelData.winCondition;

            switch (type) {
                 case 'clear_enemies': {
                     const liveEnemies = enemiesState?.filter(e => e.currentHp > 0) || [];
                     if (liveEnemies.length === 0 && enemiesState.length > 0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–∞–≥–∏ –≤–æ–æ–±—â–µ –±—ã–ª–∏
                         console.log("Win Condition Check: clear_enemies MET!");
                         winLevel();
                     }
                     break;
                 }
                 case 'defeat_all_bosses': {
                      const liveBosses = enemiesState?.filter(e => e.isBoss && e.currentHp > 0) || [];
                      const wereBosses = enemiesState?.some(e => e.isBoss);
                      if (liveBosses.length === 0 && wereBosses) {
                          console.log("Win Condition Check: defeat_all_bosses MET!");
                          winLevel();
                      }
                      break;
                 }
                 case 'survive_duration': {
                      if (levelStartTimeRef.current && duration) {
                          const elapsed = (Date.now() - levelStartTimeRef.current) / 1000;
                          const timeLeft = duration - elapsed;
                          setRemainingTime(timeLeft > 0 ? timeLeft : 0);
                          if (timeLeft <= 0) {
                              console.log("Win Condition Check: survive_duration MET!");
                              winLevel();
                          }
                      }
                      break;
                 }
                 default:
                     break;
            }
        }; // --- –ö–æ–Ω–µ—Ü checkWinCondition ---

        // --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–¥—Ä–∞ ---
        // --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–¥—Ä–∞ ---
const animate = (timestamp) => {
    if (levelStatus !== 'playing') {
        console.log(`Game loop stopping. Status: ${levelStatus}`);
        if (animationFrameId.current) cancelAnimationFrame(animationFrameId.current);
        animationFrameId.current = null;
        clock.stop();
        return;
    }
    animationFrameId.current = requestAnimationFrame(animate);

    // –†–∞—Å—á–µ—Ç –¥–µ–ª—å—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (dt)
    const dt = timestamp === 0 ? 0.016 : Math.min((timestamp - lastTimestamp) / 1000, 0.05);
    lastTimestamp = timestamp;

    const playerPos = playerObject?.position;
    const currentScene = sceneRef.current;
    const currentCamera = cameraRef.current;
    const currentRenderer = rendererRef.current;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    if (!playerObject || !playerPos || !currentScene || !currentCamera || !currentRenderer || !levelConfig || !playerStats) {
        console.warn("–ü—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã");
        return;
    }

    // ==================================
    // === 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ò–≥—Ä–æ–∫–∞ =======
    // ==================================
    const effectiveSpeed = (playerStats.speed || 3) * (velocity.current.force > 0.1 ? 1 : 0);
    const speedMultiplier = 60;

    if (effectiveSpeed > 0) {
        const dx = (velocity.current.x || 0) * effectiveSpeed * dt * speedMultiplier;
        const dy = (velocity.current.y || 0) * effectiveSpeed * dt * speedMultiplier;

        let nextX = playerPos.x + dx;
        let nextY = playerPos.y + dy;
        const PLAYER_SIZE = { width: 30, height: 30 };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –∏–≥—Ä–æ–∫–∞ —Å–æ —Å—Ç–µ–Ω–∞–º–∏
        const pRect = { x: playerPos.x - PLAYER_SIZE.width / 2, y: playerPos.y - PLAYER_SIZE.height / 2, width: PLAYER_SIZE.width, height: PLAYER_SIZE.height };
        let colX = false;
        let colY = false;
        const pRectX = { ...pRect, x: nextX - PLAYER_SIZE.width / 2 };
        for (const wall of wallsRef.current) { if (checkCollision(pRectX, wall)) { colX = true; break; } }
        const pRectY = { ...pRect, y: nextY - PLAYER_SIZE.height / 2 };
        for (const wall of wallsRef.current) { if (checkCollision(pRectY, wall)) { colY = true; break; } }

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–ª–∏–∑–∏–π
        if (!colX) playerPos.x = nextX;
        if (!colY) playerPos.y = nextY;

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –º–∏—Ä–∞
        const pSizeHW = PLAYER_SIZE.width / 2;
        const pSizeHH = PLAYER_SIZE.height / 2;
        const minX = -levelConfig.gameWorldWidth / 2 + pSizeHW;
        const maxX = levelConfig.gameWorldWidth / 2 - pSizeHW;
        const minYw = -levelConfig.WORLD_Y_OFFSET + pSizeHH;
        const maxYw = levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - pSizeHH;
        playerPos.x = clamp(playerPos.x, minX, maxX);
        playerPos.y = clamp(playerPos.y, minYw, maxYw);

        // –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –∏–≥—Ä–æ–∫–∞
        if (Math.abs(dx) > 0.01 || Math.abs(dy) > 0.01) {
            const angle = Math.atan2(dy, dx);
            let targetRotZ = angle - Math.PI / 2;
            const currentRotZ = playerObject.rotation.z;
            const twoPi = Math.PI * 2;
            let diff = targetRotZ - currentRotZ;
            while (diff < -Math.PI) diff += twoPi;
            while (diff > Math.PI) diff -= twoPi;
            const lerpFactor = 0.15;
            playerObject.rotation.z += diff * lerpFactor;
        }
        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã
    } else {
        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
    }
    playerObject.userData?.mixer?.update(dt); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–∫—Å–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–π –∏–≥—Ä–æ–∫–∞

    // ==================================
    // === 2. –ê—Ç–∞–∫–∞ –ò–≥—Ä–æ–∫–∞ =============
    // ==================================
    playerAttackCooldown.current -= dt;
    if (playerAttackCooldown.current <= 0) {
        const interval = 1 / (playerStats.attackSpeed || 1.0);
        playerAttackCooldown.current = interval;
        const range = playerStats.attackRange || 150;
        const rangeSq = range * range;
        const target = findNearestEnemy(playerPos, rangeSq); // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞
        if (target) {
            createProjectile(target); // –°–æ–∑–¥–∞–µ–º —Å–Ω–∞—Ä—è–¥ –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ü–µ–ª–∏
            // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
        }
    }

    // ==================================
    // === 3. –°–Ω–∞—Ä—è–¥—ã –ò–≥—Ä–æ–∫–∞ ==========
    // ==================================
    const activeProjectiles = [];
    // –°–æ–∑–¥–∞–µ–º —Ö–∏—Ç–±–æ–∫—Å—ã –¥–ª—è –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
    const enemyHitboxes = enemyRefs?.map(enemy => {
        if (enemy?.pivot?.position && !enemy.isDead) {
            const size = 40; // TODO: –±—Ä–∞—Ç—å –∏–∑ enemy.stats.hitboxSize?
            return {
                id: enemy.id,
                type: enemy.type,
                ref: enemy, // –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ blockCharges
                x: enemy.pivot.position.x - size / 2,
                y: enemy.pivot.position.y - size / 2,
                width: size,
                height: size
            };
        } return null;
    }).filter(Boolean) || [];

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π —Å–Ω–∞—Ä—è–¥–æ–≤ –∏–≥—Ä–æ–∫–∞
    projectilesRef.current.forEach(proj => {
        proj.position.add(proj.velocity.clone().multiplyScalar(dt)); // –î–≤–∏–∂–µ–Ω–∏–µ
        proj.lifetime -= dt; // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏

        if (proj.mesh) proj.mesh.position.copy(proj.position); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ—à–∞

        let hit = false;
        if (proj.lifetime > 0 && enemyHitboxes.length > 0) {
            const projSize = 8;
            const pHitbox = { x: proj.position.x - projSize / 2, y: proj.position.y - projSize / 2, width: projSize, height: projSize };

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ —Å —Ö–∏—Ç–±–æ–∫—Å–∞–º–∏ –≤—Ä–∞–≥–æ–≤
            for (const eBox of enemyHitboxes) {
                if (checkCollision(pHitbox, eBox)) {
                    handleEnemyHit(eBox.id, proj.damage); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
                    hit = true;
                    break;
                }
            }
        }

        // –ï—Å–ª–∏ —Å–Ω–∞—Ä—è–¥ –µ—â–µ –∂–∏–≤ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø–æ—Ä–∞–∑–∏–ª, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ
        if (proj.lifetime > 0 && !hit) {
            activeProjectiles.push(proj);
        } else { // –ò–Ω–∞—á–µ —É–¥–∞–ª—è–µ–º –º–µ—à –∏–∑ —Å—Ü–µ–Ω—ã –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            if (proj.mesh) {
                currentScene?.remove(proj.mesh);
                proj.mesh.geometry?.dispose();
                proj.mesh.material?.dispose();
            }
        }
    });
    projectilesRef.current = activeProjectiles; // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–Ω–∞—Ä—è–¥–æ–≤

    // ==================================
    // === 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í—Ä–∞–≥–æ–≤ ========
    // ==================================
    enemyRefs?.forEach(enemy => {
        // 1. --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
        const enemyState = enemiesState?.find(es => es.id === enemy.id);

        if (!enemy || !enemy.pivot || !enemy.stats || enemy.isDead || !enemyState) {
            // –°–∫—Ä—ã—Ç–∏–µ —Ö–µ–ª—Å–±–∞—Ä–∞ –∏ –ª—É—á–∞ –¥–ª—è –º–µ—Ä—Ç–≤—ã—Ö –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤
            if (enemy?.isDead && enemy.hpBar?.container?.visible) {
                enemy.hpBar.container.visible = false;
            }
            if (enemy?.isDead && enemy.beamEffectMesh) {
                removeBeamMesh(enemy);
            }
            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ –≤—Ä–∞–≥–∞
        }

        // 2. --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –≤ —ç—Ç–æ–º –∫–∞–¥—Ä–µ ---
        if (enemyState.currentHp <= 0) {
            enemy.isDead = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –º–µ—Ä—Ç–≤–æ–≥–æ
            console.log(`--- –í—Ä–∞–≥ ${enemy.id} (${enemy.type}) –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ isDead (HP=${enemyState.currentHp}) ---`);

            // --- –õ–û–ì–ò–ö–ê –ü–†–ò –°–ú–ï–†–¢–ò (–≤–∑—è—Ç–∞ –∏–∑ code1) ---
            if (enemy.type === 'rotting_soldier' && !enemy.exploded) {
                console.log(`Rotting Soldier ${enemy.id} EXPLODES!`);
                const ePosOnDeath = enemy.pivot.position.clone();
                // TODO: –≠—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞

                // –£—Ä–æ–Ω –∏–≥—Ä–æ–∫—É –æ—Ç –≤–∑—Ä—ã–≤–∞
                if (enemy.stats.explosionDamage && typeof playerTakeDamage === 'function') {
                    const explosionRadius = enemy.stats.explosionRadius || 50;
                    const distToPlayer = ePosOnDeath.distanceTo(playerPos);
                    if (distToPlayer <= explosionRadius) {
                        console.log(`... Player takes ${enemy.stats.explosionDamage} explosion damage`);
                        playerTakeDamage(enemy.stats.explosionDamage);
                    }
                }
                // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞–∫–∞ —è–¥–∞
                createPoisonCloud(ePosOnDeath); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ (–Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–µ)
                enemy.exploded = true;
                if (enemy.pivot) enemy.pivot.visible = false; // –°–∫—Ä—ã—Ç—å –º–æ–¥–µ–ª—å
                if (enemy.hpBar?.container) enemy.hpBar.container.visible = false; // –°–∫—Ä—ã—Ç—å —Ö–µ–ª—Å–±–∞—Ä
                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ –≤—Ä–∞–≥–∞
            } else if (enemy.type === 'cursed_carrier') {
                console.log(`Cursed Carrier ${enemy.id} summons on death...`);
                // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–∑—ã–≤–∞ (–Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–µ)
                summonCreature(enemy.id, enemy.stats.summonOnDeathType || 'skeleton_spirit', enemy.stats.summonOnDeathCount || 1, enemy.pivot.position.clone());
            }

            // –£–±–∏—Ä–∞–µ–º –ª—É—á, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
            if (enemy.beamEffectMesh) removeBeamMesh(enemy);
            // TODO: –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ—Ä—Ç–∏?
            return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ—Ä—Ç–≤–æ–≥–æ –≤—Ä–∞–≥–∞
        }

        // --- –ï—Å–ª–∏ –≤—Ä–∞–≥ –∂–∏–≤ ---
        const ePivot = enemy.pivot;
        const ePos = ePivot.position;
        const eStats = enemy.stats;
        const mixer = enemy.mixer;

        // 3. --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π ---
        mixer?.update(dt);

        // 4. --- –†–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –¥–æ –∏–≥—Ä–æ–∫–∞ ---
        const dist = ePos.distanceTo(playerPos);

        // 5. --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –•–µ–ª—Å–±–∞—Ä–∞ ---
        if (enemy.hpBar?.container && enemy.hpBar?.fill && enemyState.maxHp > 0) {
            const hpPercent = Math.max(0, enemyState.currentHp / enemyState.maxHp);
            const fillMesh = enemy.hpBar.fill;
            const container = enemy.hpBar.container;
            const newScaleX = Math.max(0.001, hpPercent); // –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ scale=0
            const newPosX = (HEALTH_BAR_WIDTH * (newScaleX - 1)) / 2;
            fillMesh.scale.x = newScaleX;
            fillMesh.position.x = newPosX;
            container.visible = true;
            // –ü–æ–≤–æ—Ä–æ—Ç —Ö–µ–ª—Å–±–∞—Ä–∞ –∫ –∫–∞–º–µ—Ä–µ
            if (currentCamera) { container.quaternion.copy(currentCamera.quaternion); }
        } else if (enemy.hpBar?.container) {
            container.visible = false; // –°–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        }

        // 6. --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–æ–≤ ---
        if (enemy.attackCooldown > 0) enemy.attackCooldown -= dt;
        if (enemy.abilityCooldown > 0) enemy.abilityCooldown -= dt;
        if (typeof enemy.beamEffectTimer === 'number' && enemy.beamEffectTimer > 0) {
            enemy.beamEffectTimer -= dt;
            if (enemy.beamEffectTimer <= 0) {
                removeBeamMesh(enemy); // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ª—É—á–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É
            }
        }

        // 7. --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ò–ò ---
        const rotateEnemyTowards = (targetPosition, rotationSpeed = 0.08) => {
             const direction = new THREE.Vector3().subVectors(targetPosition, ePos);
             if (direction.lengthSq() < 0.01) return; // –ù–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å, –µ—Å–ª–∏ —Ü–µ–ª—å –±–ª–∏–∑–∫–æ
             const angle = Math.atan2(direction.y, direction.x);
             let targetZ = angle - Math.PI / 2; // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏, —Å–º–æ—Ç—Ä—è—â–µ–π –ø–æ Y
             const currentZ = ePivot.rotation.z;
             const twoPi = Math.PI * 2;
             let diff = targetZ - currentZ;
             // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–Ω–∏—Ü—ã —É–≥–ª–æ–≤ (-PI, PI]
             while (diff <= -Math.PI) diff += twoPi;
             while (diff > Math.PI) diff -= twoPi;
             const threshold = 0.05; // –ü–æ—Ä–æ–≥ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞
             if (Math.abs(diff) > threshold) {
                 ePivot.rotation.z += diff * rotationSpeed; // –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
             } else {
                 ePivot.rotation.z = targetZ; // –¢–æ—á–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
             }
             // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Ä–∞—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ Z
             ePivot.rotation.order = 'XYZ';
             ePivot.rotation.x = 0;
             ePivot.rotation.y = 0;
        };

        const ENEMY_COLLISION_SIZE = { width: 30, height: 30 }; // –†–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π –≤—Ä–∞–≥–∞

        const moveEnemyWithCollision = (directionVector, speedValue) => {
             if (speedValue <= 0) return { collidedX: false, collidedY: false };
             const moveDir = directionVector.clone().normalize();
             const moveAmount = speedValue * dt * 60; // –û–±—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ –∑–∞ –∫–∞–¥—Ä (60 FPS –±–∞–∑–∞)

             const nextX = ePos.x + moveDir.x * moveAmount;
             const nextY = ePos.y + moveDir.y * moveAmount; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –£–º–Ω–æ–∂–∏—Ç—å –Ω–∞ moveDir.y

             const enemyHitbox = {
                 x: ePos.x - ENEMY_COLLISION_SIZE.width / 2,
                 y: ePos.y - ENEMY_COLLISION_SIZE.height / 2,
                 width: ENEMY_COLLISION_SIZE.width,
                 height: ENEMY_COLLISION_SIZE.height
             };

             // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ X
             const nextHitboxX = { ...enemyHitbox, x: nextX - ENEMY_COLLISION_SIZE.width / 2 };
             let canMoveX = true;
             for (const wall of wallsRef.current) {
                 if (checkCollision(nextHitboxX, wall)) {
                     canMoveX = false;
                     break;
                 }
             }

             // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ Y
             const nextHitboxY = { ...enemyHitbox, y: nextY - ENEMY_COLLISION_SIZE.height / 2 };
             let canMoveY = true;
             for (const wall of wallsRef.current) {
                 if (checkCollision(nextHitboxY, wall)) {
                     canMoveY = false;
                     break;
                 }
             }

             // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
             if (canMoveX) { ePos.x = nextX; }
             if (canMoveY) { ePos.y = nextY; }

             // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –º–∏—Ä–∞ (–ø–æ—Å–ª–µ –∫–æ–ª–ª–∏–∑–∏–π —Å–æ —Å—Ç–µ–Ω–∞–º–∏)
             const eSizeHW = ENEMY_COLLISION_SIZE.width / 2;
             const eSizeHH = ENEMY_COLLISION_SIZE.height / 2;
             const minXb = -levelConfig.gameWorldWidth / 2 + eSizeHW;
             const maxXb = levelConfig.gameWorldWidth / 2 - eSizeHW;
             const minYwb = -levelConfig.WORLD_Y_OFFSET + eSizeHH;
             const maxYwb = levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - eSizeHH;
             ePos.x = clamp(ePos.x, minXb, maxXb);
             ePos.y = clamp(ePos.y, minYwb, maxYwb);

             return { collidedX: !canMoveX, collidedY: !canMoveY };
        };


        // 8. --- –õ–û–ì–ò–ö–ê –ò–ò (–ø–æ —Ç–∏–ø–∞–º –≤—Ä–∞–≥–æ–≤) ---
        let isAttacking = false; // –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        switch (enemy.type) {

            // --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô CASE –î–õ–Ø –ú–ò–õ–ò-–ü–û–î–û–ë–ù–´–• (–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏) ---
            case 'melee':
            case 'boss':
            case 'skeleton_swordsman':
            case 'cursed_gladiator':
            case 'revenant_knight':
            case 'rotting_soldier': // –ü–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ –≤–∑—Ä—ã–≤–∞ - –∫–∞–∫ —É –º–∏–ª–∏
            case 'cursed_carrier':  // –ü–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ –ø—Ä–∏–∑—ã–≤–∞ - –∫–∞–∫ —É –º–∏–ª–∏
            {
                // --- 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è ---
                const eStats = enemy.stats;
                const atkRange = eStats.attackRange || 25;
                const aggroRange = atkRange * (eStats.aggroMultiplier || 5);
                const playerInAttackRange = dist <= atkRange;
                const playerInAggroRange = dist <= aggroRange;

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–∑–∏—Ü–∏–∏ —Å–ø–∞–≤–Ω–∞
                if (!enemy.aiState) enemy.aiState = 'IDLE';
                if (!enemy.spawnPosition) enemy.spawnPosition = ePos.clone();
                const spawnPos = enemy.spawnPosition;
                const distToSpawn = spawnPos ? ePos.distanceTo(spawnPos) : 0;

                // --- 2. –õ–æ–≥–∏–∫–∞ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –°–æ—Å—Ç–æ—è–Ω–∏–π ---
                let nextState = enemy.aiState;
                const returnDelay = 3500; // –º—Å - –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º

                switch (enemy.aiState) {
                    case 'IDLE':
                        if (playerInAggroRange) {
                            nextState = 'CHASING';
                            enemy.chaseEndTime = null; // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
                        }
                        break;

                    case 'CHASING':
                        if (playerInAttackRange) {
                            nextState = 'ATTACKING';
                            enemy.chaseEndTime = null;
                        } else if (!playerInAggroRange) { // –ò–≥—Ä–æ–∫ –≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞ –∞–≥–≥—Ä–æ
                            if (!enemy.chaseEndTime) { // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
                                enemy.chaseEndTime = Date.now() + returnDelay;
                                console.log(`Enemy ${enemy.id} –ø–æ—Ç–µ—Ä—è–ª –∏–≥—Ä–æ–∫–∞, —Ç–∞–π–º–µ—Ä –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω.`);
                            }
                            if (Date.now() >= enemy.chaseEndTime) { // –¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫
                                nextState = 'RETURNING';
                                console.log(`Enemy ${enemy.id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –±–∞–∑—É.`);
                                enemy.chaseEndTime = null;
                            }
                            // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∏–¥–µ—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–≥–æ–Ω—é (nextState –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
                        } else { // –ò–≥—Ä–æ–∫ —Å–Ω–æ–≤–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∞–≥–≥—Ä–æ
                            enemy.chaseEndTime = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                            // nextState –æ—Å—Ç–∞–µ—Ç—Å—è 'CHASING'
                        }
                        break;

                    case 'ATTACKING':
                        if (!playerInAttackRange) {
                            nextState = 'CHASING'; // –î–æ–≥–æ–Ω—è—Ç—å —Å–Ω–æ–≤–∞
                        }
                        // –ï—Å–ª–∏ –≤ –ö–î –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å - –æ—Å—Ç–∞–µ—Ç—Å—è –≤ ATTACKING (–∞–Ω–∏–º–∞—Ü–∏—è –¥—Ä—É–≥–∞—è)
                        break;

                    case 'RETURNING':
                        if (playerInAggroRange) {
                            nextState = 'CHASING'; // –°–Ω–æ–≤–∞ –∞–≥—Ä–∏—Ç—Å—è
                            enemy.chaseEndTime = null;
                        } else if (distToSpawn < 10) { // –î–æ–±—Ä–∞–ª—Å—è –¥–æ –±–∞–∑—ã
                            nextState = 'IDLE';
                             ePos.copy(spawnPos); // –¢–æ—á–Ω–æ —Å—Ç–∞–≤–∏–º –Ω–∞ —Å–ø–∞–≤–Ω
                             ePivot.rotation.z = enemy.spawnRotationZ || 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
                             console.log(`Enemy ${enemy.id} –≤–µ—Ä–Ω—É–ª—Å—è.`);
                        }
                        // –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è (nextState –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
                        break;
                }
                enemy.aiState = nextState;

                // --- 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –î–µ–π—Å—Ç–≤–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–µ–∫—É—â–µ–≥–æ –°–æ—Å—Ç–æ—è–Ω–∏—è ---
                let shouldMove = false;
                let moveTargetPos = null;
                let shouldRotate = false;
                let rotateTargetPos = null;
                let isAttackingNow = false;
                let currentMoveSpeed = eStats.speed || 1.5; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                let canAttack = true; // –§–ª–∞–≥ –¥–ª—è –±–ª–æ–∫–∞ —Ä—ã—Ü–∞—Ä—è

                // –õ–æ–≥–∏–∫–∞ –±–ª–æ–∫–∞ –†—ã—Ü–∞—Ä—è
                if (enemy.type === 'revenant_knight') {
                    if (typeof enemy.blockCharges === 'undefined') enemy.blockCharges = eStats.initialBlockCharges || 0;
                    if (enemy.blockCharges > 0) {
                        canAttack = false; // –ù–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Å –±–ª–æ–∫–æ–º
                         // TODO: –ê–Ω–∏–º–∞—Ü–∏—è BlockIdle / BlockWalk ?
                    }
                    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —â–∏—Ç–∞
                    if (enemy.shieldMesh) enemy.shieldMesh.visible = enemy.blockCharges > 0;
                 }

                 // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                 switch (enemy.aiState) {
                     case 'IDLE':
                         shouldMove = false;
                         shouldRotate = false; // –ú–æ–∂–Ω–æ –Ω–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å
                         // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle (–∏–ª–∏ BlockIdle –¥–ª—è —Ä—ã—Ü–∞—Ä—è)
                         break;
                     case 'CHASING':
                         shouldMove = true;
                         moveTargetPos = playerPos.clone();
                         shouldRotate = true;
                         rotateTargetPos = playerPos.clone();
                         currentMoveSpeed = eStats.speed || 1.5;
                         // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Walk (–∏–ª–∏ BlockWalk –¥–ª—è —Ä—ã—Ü–∞—Ä—è)
                         break;
                     case 'ATTACKING':
                         shouldMove = false; // –ù–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∞—Ç–∞–∫–∏
                         shouldRotate = true;
                         rotateTargetPos = playerPos.clone();
                         if (enemy.attackCooldown <= 0 && canAttack) {
                             isAttackingNow = true; // –ì–æ—Ç–æ–≤ –∞—Ç–∞–∫–æ–≤–∞—Ç—å
                             // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Attack
                         } else {
                             // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle –∏–ª–∏ –∫–æ–Ω–µ—Ü –∞—Ç–∞–∫–∏ (–∏–ª–∏ BlockIdle)
                         }
                         break;
                     case 'RETURNING':
                         shouldMove = true;
                         moveTargetPos = spawnPos.clone();
                         shouldRotate = true;
                         rotateTargetPos = spawnPos.clone();
                         currentMoveSpeed = (eStats.speed || 1.5) * 0.8; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á—É—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ?
                         // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Walk
                         break;
                 }

                 // --- 4. –í—ã–ø–æ–ª–Ω—è–µ–º –ê—Ç–∞–∫—É (–µ—Å–ª–∏ isAttackingNow=true) ---
                 if (isAttackingNow) {
                     let currentDamage = eStats.damage || 5;
                     // TODO: –õ–æ–≥–∏–∫–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä–∞ (—É—Ä–æ–Ω –∑–∞–≤–∏—Å–∏—Ç –æ—Ç HP?)
                     // if (enemy.type === 'cursed_gladiator') { /* ... */ }
                     console.log(`${enemy.id} (${enemy.type}) attacks player! Damage: ${currentDamage}`);
                     if (typeof playerTakeDamage === 'function') playerTakeDamage(currentDamage);
                     enemy.attackCooldown = 1 / (eStats.attackSpeed || 1.0); // –°–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–∞
                 }

                 // --- 5. –í—ã–ø–æ–ª–Ω—è–µ–º –î–≤–∏–∂–µ–Ω–∏–µ –∏ –ö–æ–ª–ª–∏–∑–∏–∏ ---
                 if (shouldMove && moveTargetPos) {
                    const direction = new THREE.Vector3().subVectors(moveTargetPos, ePos);
                    moveEnemyWithCollision(direction, currentMoveSpeed);
                 }

                 // --- 6. –í—ã–ø–æ–ª–Ω—è–µ–º –ü–æ–≤–æ—Ä–æ—Ç ---
                 if (shouldRotate && rotateTargetPos) {
                     rotateEnemyTowards(rotateTargetPos);
                 }

                 // --- 7. –õ–æ–≥–∏–∫–∞ –ù–æ—Å–∏–ª—å—â–∏–∫–∞ (–°–ø–∞—É–Ω –ø–æ –ö–î –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏) ---
                  if (enemy.type === 'cursed_carrier' && enemy.abilityCooldown <= 0) {
                     // –°–ø–∞—É–Ω–∏—Ç, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ –∞–≥–≥—Ä–æ? –ò–ª–∏ –≤—Å–µ–≥–¥–∞? –î–æ–ø—É—Å—Ç–∏–º, –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.
                     if (enemy.aiState !== 'RETURNING') {
                          console.log(`Carrier ${enemy.id} summons...`);
                          summonCreature(enemy.id, eStats.summonType || 'skeleton_swordsman', eStats.summonCount || 1, ePos.clone());
                          enemy.abilityCooldown = eStats.summonCooldown || 15.0; // –°–±—Ä–æ—Å –ö–î —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                          // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–∑—ã–≤–∞?
                     }
                  }

                break; // –ö–æ–Ω–µ—Ü case –¥–ª—è –º–∏–ª–∏-–ø–æ–¥–æ–±–Ω—ã—Ö
            } // –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ {}


            // === –î–ê–õ–¨–ù–ò–ô –ë–û–ô (–°–Ω–∞—Ä—è–¥—ã - –õ—É—á–Ω–∏–∫) ===
            case 'ranged':
            case 'skeleton_archer':
            {
                const eStats = enemy.stats;
                const atkRange = eStats.attackRange || 100;
                const playerInAttackRange = dist <= atkRange;
                const currentMoveSpeed = eStats.speed || 1.0; // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                if (typeof enemy.patrolWaitTimer === 'undefined') enemy.patrolWaitTimer = 0;
                if (!enemy.patrolTargetPosition) enemy.patrolTargetPosition = null;
                if (!enemy.spawnPosition) enemy.spawnPosition = ePos.clone();

                let shouldRotate = false;
                let rotateTargetPos = null;
                let shouldMove = false;
                let moveTargetPos = null;
                let isAttackingNow = false;

                if (playerInAttackRange) {
                    // --- –õ–æ–≥–∏–∫–∞ –ê—Ç–∞–∫–∏ ---
                    shouldRotate = true;
                    rotateTargetPos = playerPos.clone();
                    enemy.patrolTargetPosition = null; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–∞—Ç—Ä—É–ª—å
                    enemy.patrolWaitTimer = 0;
                    shouldMove = false; // –°—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ –ø—Ä–∏ –∞—Ç–∞–∫–µ

                    if (enemy.attackCooldown <= 0) {
                        isAttackingNow = true;
                        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
                    } else {
                        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle/Aim
                    }
                } else {
                    // --- –õ–æ–≥–∏–∫–∞ –ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è ---
                    if (enemy.patrolWaitTimer > 0) {
                        // –ñ–¥–µ–º –Ω–∞ –º–µ—Å—Ç–µ
                        enemy.patrolWaitTimer -= dt;
                        shouldMove = false;
                        shouldRotate = false;
                        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle
                    } else if (enemy.patrolTargetPosition) {
                        // –ò–¥–µ–º –∫ —Ç–æ—á–∫–µ –ø–∞—Ç—Ä—É–ª—è
                        const distToPatrolTarget = ePos.distanceTo(enemy.patrolTargetPosition);
                        if (distToPatrolTarget < 10) { // –î–æ—à–ª–∏
                            console.log(`Enemy ${enemy.id} reached patrol point.`);
                            enemy.patrolTargetPosition = null;
                            enemy.patrolWaitTimer = 1.5 + Math.random() * 2; // –ñ–¥–µ–º
                            shouldMove = false;
                            shouldRotate = false;
                            // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle
                        } else { // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–¥—Ç–∏
                            shouldMove = true;
                            moveTargetPos = enemy.patrolTargetPosition.clone();
                            shouldRotate = true; // –ü–æ–≤–æ—Ä–æ—Ç –ø–æ —Ö–æ–¥—É –¥–≤–∏–∂–µ–Ω–∏—è
                            rotateTargetPos = enemy.patrolTargetPosition.clone();
                            // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Walk
                        }
                    } else {
                        // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –ø–∞—Ç—Ä—É–ª—è
                        const PATROL_RADIUS = 150;
                        const randomAngle = Math.random() * Math.PI * 2;
                        const randomDist = Math.random() * PATROL_RADIUS;
                        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫—É –≤–æ–∫—Ä—É–≥ —Å–ø–∞–≤–Ω–∞
                        const targetX = enemy.spawnPosition.x + Math.cos(randomAngle) * randomDist;
                        const targetY = enemy.spawnPosition.y + Math.sin(randomAngle) * randomDist;
                        const newTarget = new THREE.Vector3(targetX, targetY, 0);
                        // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –∫–æ–ª–ª–∏–∑–∏—é —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π? (—Å–ª–æ–∂–Ω–µ–µ)
                        enemy.patrolTargetPosition = newTarget;
                        console.log(`Enemy ${enemy.id} new patrol target: (${targetX.toFixed(0)}, ${targetY.toFixed(0)})`);

                        shouldMove = true; // –ù–∞—á–∏–Ω–∞–µ–º –∏–¥—Ç–∏ –∫ –Ω–µ–π
                        moveTargetPos = enemy.patrolTargetPosition.clone();
                        shouldRotate = true;
                        rotateTargetPos = enemy.patrolTargetPosition.clone();
                        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Walk
                    }
                }

                 // --- –í—ã–ø–æ–ª–Ω—è–µ–º –ê—Ç–∞–∫—É (–µ—Å–ª–∏ –Ω–∞–¥–æ) ---
                 if (isAttackingNow) {
                     console.log(`${enemy.id} firing projectile!`);
                     // createEnemyProjectile(enemy, playerPos); // –ù—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞ –≤—Ä–∞–≥–∞
                     enemy.attackCooldown = 1 / (eStats.attackSpeed || 0.8);
                 }

                 // --- –í—ã–ø–æ–ª–Ω—è–µ–º –î–≤–∏–∂–µ–Ω–∏–µ ---
                 if (shouldMove && moveTargetPos) {
                     const direction = new THREE.Vector3().subVectors(moveTargetPos, ePos);
                     moveEnemyWithCollision(direction, currentMoveSpeed);
                 }

                 // --- –í—ã–ø–æ–ª–Ω—è–µ–º –ü–æ–≤–æ—Ä–æ—Ç ---
                 if (shouldRotate && rotateTargetPos) {
                     rotateEnemyTowards(rotateTargetPos);
                 }

                break; // –ö–æ–Ω–µ—Ü case –ª—É—á–Ω–∏–∫–∞
            } // –ö–æ–Ω–µ—Ü {}


            // === –ö–ê–°–¢–ï–†–´ (–ú–∞–≥–∏, –ß–∞—Ä–æ–¥–µ–∏ –∏ —Ç.–¥.) ===
            case 'caster':
            case 'ghostly_enchanter':
            case 'ogre_mage':
            {
                 const currentAtkRange = eStats.attackRange || 300;
                 const isPlayerInAttackRange = dist <= currentAtkRange;

                 if (isPlayerInAttackRange) {
                     rotateEnemyTowards(playerPos); // –ü–æ–≤–æ—Ä–æ—Ç –∫ —Ü–µ–ª–∏
                     // –ê—Ç–∞–∫–∞ –ø–æ –ö–î
                     if (enemy.attackCooldown <= 0) {
                         enemy.attackCooldown = 1 / (eStats.attackSpeed || 0.5);
                         // TODO: playAnimation('Attack');

                         if (enemy.type === 'ogre_mage') {
                             const targetPoint = playerPos.clone(); // –°—Ç—Ä–µ–ª—è–µ—Ç –≤ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                             console.log(`Ogre Mage ${enemy.id} attacks target point!`);
                             // createProjectileToPoint(enemy.id, ePos.clone(), targetPoint, eStats.damage || 10, eStats.projectileSpeed || 400); // –ù—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
                         } else if (enemy.type === 'ghostly_enchanter') {
                             console.log(`Enchanter ${enemy.id} applies weaken!`);
                             // applyPlayerDebuff(enemy.id, 'weaken', eStats.debuffDuration || 5, eStats.debuffStrength || 0.2); // –ù—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
                             // TODO: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª—É—á–∞ –æ—Å–ª–∞–±–ª–µ–Ω–∏—è?
                         } else { // –û–±—ã—á–Ω—ã–µ –º–∞–≥–∏ –æ–≥–Ω—è/–ª—å–¥–∞
                             if (typeof playerTakeDamage === 'function') playerTakeDamage(eStats.beamDamage || 1); // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –ª—É—á–∞?
                             // TODO: –ù–∞–ª–æ–∂–∏—Ç—å DoT/Freeze —ç—Ñ—Ñ–µ–∫—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ª—É—á
                             if (enemy.beamEffectMesh) removeBeamMesh(enemy); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –±—ã–ª
                             enemy.beamEffectMesh = createBeamMeshFixed(enemy, playerPos); // –ù—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
                             if (enemy.beamEffectMesh) enemy.beamEffectTimer = eStats.beamEffectDuration || 1.0; // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–∏–¥–∏–º–æ—Å—Ç–∏
                         }
                     } else {
                         // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª—É—á, –µ—Å–ª–∏ —ç—Ç–æ –º–∞–≥ –æ–≥–Ω—è/–ª—å–¥–∞ –∏ –ª—É—á –∞–∫—Ç–∏–≤–µ–Ω
                         if (enemy.beamEffectMesh && (enemy.type === 'caster')) {
                             updateBeamMesh(enemy.beamEffectMesh, ePos, playerPos); // –ù—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
                         }
                         // TODO: playAnimation('Idle'); // –ò–ª–∏ Aim?
                     }
                 } else { // –ò–≥—Ä–æ–∫ –≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞
                     if (enemy.beamEffectMesh) removeBeamMesh(enemy); // –£–±–∏—Ä–∞–µ–º –ª—É—á
                     // TODO: playAnimation('Idle');
                     // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–∞–∫ —É –ª—É—á–Ω–∏–∫–∞?
                 }
                 break; // –ö–æ–Ω–µ—Ü case –∫–∞—Å—Ç–µ—Ä–æ–≤
            } // –ö–æ–Ω–µ—Ü {}


            // === –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ù–û–í–´–ï –¢–ò–ü–´ (–∏–∑ code1) ===

            case 'necromancer': {
                 rotateEnemyTowards(playerPos); // –í—Å–µ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞
                 // –ü—Ä–∏–∑—ã–≤ –ø–æ –∫—É–ª–¥–∞—É–Ω—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                 if (enemy.abilityCooldown <= 0) {
                     console.log(`Necromancer ${enemy.id} summons ${eStats.summonCount || 1} ${eStats.summonType || 'skeleton_spirit'}!`);
                     summonCreature(enemy.id, eStats.summonType || 'skeleton_spirit', eStats.summonCount || 1, ePos.clone());
                     enemy.abilityCooldown = eStats.summonCooldown || 10.0;
                     // TODO: playAnimation('Summon');
                 } else {
                     // TODO: playAnimation('Idle');
                 }
                 // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ —É–∫–ª–æ–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ?
                 break;
            }
            case 'bone_dancer': {
                const eStats = enemy.stats;
 
                // --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ---
                const baseSpeed = (eStats.speed || 3.5) * 60; // –°–∫–æ—Ä–æ—Å—Ç—å –≤ —é–Ω–∏—Ç–∞—Ö/—Å–µ–∫
                const rotationLerp = 0.15; // –ü–ª–∞–≤–Ω–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞ —á—É—Ç—å –≤—ã—à–µ
                const activationRange = eStats.activationRange || 200; // –£–º–µ–Ω—å—à–∏–º —Ä–∞–¥–∏—É—Å –∞–≥—Ä–æ
                const chargeSpeedMultiplier = eStats.chargeMultiplier || 3.0; // –£–≤–µ–ª–∏—á–∏–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ä—ã–≤–∫–∞
                const chargeDuration = eStats.chargeDuration || 0.25;    // –£–º–µ–Ω—å—à–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä—ã–≤–∫–∞
                const desiredOrbitDist = eStats.orbitDistance || 60;     // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –æ—Ä–±–∏—Ç—ã (–æ—Å—Ç–∞–ª–∞—Å—å 60)
                // const radialCorrectionStrength = 1.8; // <<< –£–±—Ä–∞–Ω–æ, —Ç.–∫. –ª–æ–≥–∏–∫–∞ –æ—Ä–±–∏—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω–∞
 
                // --- –§–ª–∞–≥–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
                let shouldMove = false;
                let shouldRotate = true;
                let moveTargetPos = null; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ç–æ—á–∫–µ (–≤ CHARGING –∏ –Ω–æ–≤–æ–π ORBITING)
                let rotateTargetPos = playerPos.clone(); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –∏–≥—Ä–æ–∫–∞
                let currentMoveSpeed = baseSpeed; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 
                // --- –†–∞—Å—á–µ—Ç—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ---
                const vectorToPlayer = new THREE.Vector3().subVectors(playerPos, ePos);
                const currentDistToPlayer = vectorToPlayer.length(); // <<< –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                // const distToSpawn = ePos.distanceTo(enemy.spawnPosition); // <<< –£–±—Ä–∞–Ω–æ, —Ç.–∫. RETURNING —É–¥–∞–ª–µ–Ω
 
                // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ò–ò –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
                if (!enemy.aiState) enemy.aiState = 'IDLE';
                if (typeof enemy.chargeTimer === 'undefined') enemy.chargeTimer = 0;
                if (!enemy.spawnPosition) enemy.spawnPosition = ePos.clone();
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è orbitDirection –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ CHARGING –≤ ORBITING
 
                // --- –õ–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¢–∞–Ω—Ü–æ—Ä–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è) ---
                switch (enemy.aiState) {
                    case 'IDLE':
                        shouldMove = false;
                        shouldRotate = false;
                        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è Idle
 
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º currentDistToPlayer –≤–º–µ—Å—Ç–æ dist –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
                        if (currentDistToPlayer <= activationRange) {
                            console.log(`Bone Dancer ${enemy.id} activated! Charging!`); // <<< –î–æ–±–∞–≤–ª–µ–Ω console.log
                            enemy.aiState = 'CHARGING';
                            enemy.chargeTargetPos = playerPos.clone();
                            enemy.chargeTimer = 0;
                        }
                        break;
 
                    case 'CHARGING':
                        shouldMove = true;
                        shouldRotate = true;
                        moveTargetPos = enemy.chargeTargetPos || playerPos.clone();
                        rotateTargetPos = moveTargetPos; // –í —Ä—ã–≤–∫–µ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ü–µ–ª—å —Ä—ã–≤–∫–∞
                        currentMoveSpeed = baseSpeed * chargeSpeedMultiplier; // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
                        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è —Ä—ã–≤–∫–∞
 
                        enemy.chargeTimer += dt;
                        if (enemy.chargeTimer >= chargeDuration) {
                            console.log(`Bone Dancer ${enemy.id} finished charge, orbiting.`); // <<< –î–æ–±–∞–≤–ª–µ–Ω console.log
                            enemy.aiState = 'ORBITING';
                            enemy.chargeTimer = 0;
                            // >>> –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–±–∏—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ <<<
                            enemy.orbitDirection = (Math.random() < 0.5 ? 1 : -1);
                        }
                        break;
 
                    case 'ORBITING':
                        // >>> –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ORBITING –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ <<<
                        shouldMove = true;
                        shouldRotate = true;
                        rotateTargetPos = playerPos.clone(); // –í—Å–µ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –∏–≥—Ä–æ–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ä–±–∏—Ç—ã
                        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è –±–µ–≥–∞/–∫—Ä—É–∂–µ–Ω–∏—è
 
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º currentDistToPlayer –≤–º–µ—Å—Ç–æ currentDist
                        if (currentDistToPlayer > 0.1) {
                            // --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—á–∫–∏ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è ---
 
                            // –í–µ–∫—Ç–æ—Ä –ö –∏–≥—Ä–æ–∫—É (–Ω—É–∂–µ–Ω –¥–ª—è normTangentDir)
                            const normDirToPlayer = vectorToPlayer.clone().normalize(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∏–ª–∏ –±–µ—Ä–µ–º –∏–∑–≤–Ω–µ switch
 
                            // 1. –í–µ–∫—Ç–æ—Ä –æ—Ç –∏–≥—Ä–æ–∫–∞ –∫ –≤—Ä–∞–≥—É –∏ –µ–≥–æ –Ω–æ—Ä–º–∞–ª—å
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º clone(), —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π vectorToPlayer
                            let vecPlayerToEnemy = vectorToPlayer.clone().negate(); // vectorToPlayer = player - enemy => negate = enemy - player
                            const normVecPlayerToEnemy = vecPlayerToEnemy.normalize(); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä –û–¢ –∏–≥—Ä–æ–∫–∞
 
                            // 2. –ò–¥–µ–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–∞ –æ—Ä–±–∏—Ç–µ (–Ω–∞ –Ω—É–∂–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç –∏–≥—Ä–æ–∫–∞)
                            const idealOrbitPoint = playerPos.clone().add(normVecPlayerToEnemy.multiplyScalar(desiredOrbitDist));
 
                            // 3. –¢–∞–Ω–≥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–µ –≤—Ä–∞–≥–∞
                            // enemy.orbitDirection –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ ORBITING
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º normDirToPlayer (–≤–µ–∫—Ç–æ—Ä –∫ –∏–≥—Ä–æ–∫—É) –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–∞
                            const normTangentDir = new THREE.Vector3(-normDirToPlayer.y, normDirToPlayer.x, 0).multiplyScalar(enemy.orbitDirection);
 
                            // 4. –í–µ–∫—Ç–æ—Ä –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–π
                            const vecToIdealOrbit = new THREE.Vector3().subVectors(idealOrbitPoint, ePos);
                            const distToIdealOrbit = vecToIdealOrbit.length();
 
                            // 5. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ:
                            const tangentVelocity = normTangentDir.clone().multiplyScalar(baseSpeed); // clone() –≤–∞–∂–µ–Ω
                            // –°–∫–æ—Ä–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
                            const correctionSpeed = Math.min(baseSpeed, distToIdealOrbit * 2.0); // –û–≥—Ä–∞–Ω–∏—á–∏–º –º–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
                            const correctionVelocity = vecToIdealOrbit.normalize().multiplyScalar(correctionSpeed); // clone() –Ω–µ –Ω—É–∂–µ–Ω, vecToIdealOrbit –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
 
                            // –°—É–º–º–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
                            const finalVelocity = tangentVelocity.add(correctionVelocity); // tangentVelocity –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
                            finalVelocity.clampLength(0, baseSpeed * 1.5); // –û–≥—Ä–∞–Ω–∏—á–∏–º –º–∞–∫—Å. –∏—Ç–æ–≥–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
 
                            // --- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–¥—Ä–∞ ---
                            moveTargetPos = ePos.clone().add(finalVelocity.clone().multiplyScalar(dt)); // clone() —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å finalVelocity –ø–µ—Ä–µ–¥ .length()
                            currentMoveSpeed = finalVelocity.length(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π
 
                            if (currentMoveSpeed < 1) { // –ï—Å–ª–∏ –ø–æ—á—Ç–∏ –Ω–µ –¥–≤–∏–∂–µ–º—Å—è
                                shouldMove = false;
                                // shouldRotate = false; // <<< –í –Ω–æ–≤–æ–º –∫–æ–¥–µ –ø–æ–≤–æ—Ä–æ—Ç –ù–ï –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, –≤—Ä–∞–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∏–≥—Ä–æ–∫–∞
                            }
                            // --- –ü–µ—Ä–µ—Ö–æ–¥ –≤ RETURNING —É–±—Ä–∞–Ω ---
 
                        } else { // –°—Ç–æ–∏–º –Ω–∞ –∏–≥—Ä–æ–∫–µ
                            shouldMove = false;
                            shouldRotate = false; // –ù–µ –¥–≤–∏–≥–∞–µ–º—Å—è –∏ –Ω–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è (–æ—Å—Ç–∞–µ—Ç—Å—è —Å–º–æ—Ç—Ä–µ—Ç—å –∫—É–¥–∞ —Å–º–æ—Ç—Ä–µ–ª)
                        }
                        break; // –ö–æ–Ω–µ—Ü case 'ORBITING'
 
                    // --- –°–û–°–¢–û–Ø–ù–ò–ï RETURNING –£–î–ê–õ–ï–ù–û ---
 
                } // --- –ö–æ–Ω–µ—Ü switch(enemy.aiState) ---
 
 
                // --- –í—ã–ø–æ–ª–Ω—è–µ–º –î–≤–∏–∂–µ–Ω–∏–µ (–û–±—â–∏–π –±–ª–æ–∫) ---
                if (shouldMove && moveTargetPos) {
                    let moveDir = new THREE.Vector3().subVectors(moveTargetPos, ePos);
                    const distToTarget = moveDir.length();
 
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä–æ–≥ 0.01 –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    if (distToTarget > 0.01) {
                        moveDir.normalize();
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º currentMoveSpeed, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏ –≤ ORBITING
                        const step = Math.min(currentMoveSpeed * dt, distToTarget);
 
                        const calculatedNextX = ePos.x + moveDir.x * step;
                        const calculatedNextY = ePos.y + moveDir.y * step;
 
                        // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π —Å–æ —Å—Ç–µ–Ω–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
                        const ENEMY_COLLISION_RADIUS = eStats.collisionRadius || 15;
                        const enemyHitbox = { x: ePos.x - ENEMY_COLLISION_RADIUS, y: ePos.y - ENEMY_COLLISION_RADIUS, width: ENEMY_COLLISION_RADIUS * 2, height: ENEMY_COLLISION_RADIUS * 2 };
 
                        let finalNextX = ePos.x;
                        let finalNextY = ePos.y;
 
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ X
                        const nextHitboxX = { ...enemyHitbox, x: calculatedNextX - ENEMY_COLLISION_RADIUS };
                        let canMoveX = true;
                        if (wallsRef && wallsRef.current) {
                            for (const wall of wallsRef.current) {
                                if (checkCollision(nextHitboxX, wall)) {
                                    canMoveX = false; break;
                                }
                            }
                        }
                        if (canMoveX) { finalNextX = calculatedNextX; }
 
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ Y
                        const nextHitboxY = { x: finalNextX - ENEMY_COLLISION_RADIUS, y: calculatedNextY - ENEMY_COLLISION_RADIUS, width: ENEMY_COLLISION_RADIUS * 2, height: ENEMY_COLLISION_RADIUS * 2 };
                        let canMoveY = true;
                        if (wallsRef && wallsRef.current) {
                             for (const wall of wallsRef.current) {
                                 if (checkCollision(nextHitboxY, wall)) {
                                     canMoveY = false; break;
                                 }
                             }
                        }
                        if (canMoveY) { finalNextY = calculatedNextY; }
 
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
                        ePos.x = finalNextX;
                        ePos.y = finalNextY;
 
                        // --- Clamp –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –º–∏—Ä–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
                        if (levelConfig && typeof levelConfig.gameWorldWidth !== 'undefined' && typeof levelConfig.gameWorldHeight !== 'undefined' && typeof levelConfig.WORLD_Y_OFFSET !== 'undefined') {
                            const minX = -levelConfig.gameWorldWidth / 2 + ENEMY_COLLISION_RADIUS;
                            const maxX = levelConfig.gameWorldWidth / 2 - ENEMY_COLLISION_RADIUS;
                            const minYw = -levelConfig.WORLD_Y_OFFSET + ENEMY_COLLISION_RADIUS;
                            const maxYw = levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - ENEMY_COLLISION_RADIUS;
                            ePos.x = clamp(ePos.x, minX, maxX);
                            ePos.y = clamp(ePos.y, minYw, maxYw);
                        }
                    }
                }
                // –ü–ª–∞–≤–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–≤–Ω –≤ IDLE —É–±—Ä–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ RETURNING —É–¥–∞–ª–µ–Ω –∏ –ª–æ–≥–∏–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
 
                // --- –í—ã–ø–æ–ª–Ω—è–µ–º –ü–æ–≤–æ—Ä–æ—Ç (–û–±—â–∏–π –±–ª–æ–∫) ---
                if (shouldRotate && rotateTargetPos) {
                    let dirRot = new THREE.Vector3().subVectors(rotateTargetPos, ePos);
                    if (dirRot.lengthSq() > 0.001) { // –ü–æ—Ä–æ–≥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
                        const angle = Math.atan2(dirRot.y, dirRot.x);
                        let targetZ = angle - Math.PI / 2; // –ú–æ–¥–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç –≤–≤–µ—Ä—Ö (–ø–æ +Y)
 
                        const curZ = ePivot.rotation.z;
                        const twoPi = Math.PI * 2;
                        let rotationDiff = targetZ - curZ;
 
                        while (rotationDiff <= -Math.PI) rotationDiff += twoPi;
                        while (rotationDiff > Math.PI) rotationDiff -= twoPi;
 
                        const rotationThreshold = 0.01;
                        if (Math.abs(rotationDiff) > rotationThreshold) {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π rotationLerp
                            ePivot.rotation.z += rotationDiff * rotationLerp; // rotationLerp = 0.15
                        } else {
                            ePivot.rotation.z = targetZ;
                        }
                        ePivot.rotation.z %= twoPi;
 
                        ePivot.rotation.order = 'XYZ';
                        ePivot.rotation.x = 0;
                        ePivot.rotation.y = 0;
                    }
                }
 
                // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–æ –±–µ–∑ RETURNING) ---
                let nextActionName = 'Idle'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (enemy.aiState === 'IDLE') {
                    nextActionName = enemy.actions?.Idle ? 'Idle' : 'idle';
                } else if (enemy.aiState === 'CHARGING') {
                    nextActionName = enemy.actions?.Run ? 'Run' : 'walk'; // –ò–ª–∏ —Å–ø–µ—Ü. –∞–Ω–∏–º–∞—Ü–∏—è —Ä—ã–≤–∫–∞
                } else if (enemy.aiState === 'ORBITING') {
                    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ –æ—Ä–±–∏—Ç–µ
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'Run' –µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å > 80% –æ—Ç –±–∞–∑–æ–≤–æ–π, –∏–Ω–∞—á–µ 'Walk'
                    if(currentMoveSpeed > baseSpeed * 0.8 && enemy.actions?.Run) nextActionName = 'Run';
                    else nextActionName = enemy.actions?.Walk ? 'Walk' : 'walk';
                }
 
                // –ï—Å–ª–∏ —Å—Ç–æ–∏–º –Ω–∞ –º–µ—Å—Ç–µ, –Ω–æ –Ω–µ –≤ IDLE (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –æ—Ä–±–∏—Ç–µ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∏–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏)
                if (!shouldMove && enemy.aiState !== 'IDLE') {
                   nextActionName = enemy.actions?.Idle ? 'Idle' : 'idle';
                }
                // switchAction(enemy, nextActionName); // –í—ã–∑–æ–≤ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
 
                break; // –ö–æ–Ω–µ—Ü case bone_dancer
            } // –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ {}

            case 'plague_totemist': {
                 rotateEnemyTowards(playerPos); // –°–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞
                 // –°—Ç–∞–≤–∏—Ç —Ç–æ—Ç–µ–º –ø–æ –∫—É–ª–¥–∞—É–Ω—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                 if (enemy.abilityCooldown <= 0) {
                     console.log(`Totemist ${enemy.id} places a ${eStats.totemType || 'debuff'} totem!`);
                     // placeTotem(enemy.id, ePos.clone(), eStats.totemType || 'debuff_slow', eStats.totemDuration || 15.0, eStats.totemRange || 120, eStats.totemEffect || { slowPercent: 0.3 }); // –ù—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
                     enemy.abilityCooldown = eStats.totemCooldown || 12.0;
                     // TODO: playAnimation('Cast');
                 } else {
                     // TODO: playAnimation('Idle');
                 }
                 // –û–±—ã—á–Ω–æ –Ω–µ–ø–æ–¥–≤–∏–∂–µ–Ω? –ò–ª–∏ –º–æ–∂–µ—Ç –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞—Ç—å?
                 break;
            }

            case 'sand_reaper': {
                 rotateEnemyTowards(playerPos); // –°–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞
                 // –ö–∞—Å—Ç—É–µ—Ç —à–∏–ø—ã –ø–æ –∫—É–ª–¥–∞—É–Ω—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                 if (enemy.abilityCooldown <= 0) {
                     console.log(`Sand Reaper ${enemy.id} summons spikes under player!`);
                     // triggerGroundSpikes(enemy.id, playerPos.clone(), eStats.spikeDelay || 1.0, eStats.spikeRadius || 30, eStats.spikeDamage || 15); // –ù—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
                     enemy.abilityCooldown = eStats.abilityCooldown || 5.0;
                     // TODO: playAnimation('Cast');
                 } else {
                     // TODO: playAnimation('Idle');
                 }
                 // –û–±—ã—á–Ω–æ –Ω–µ–ø–æ–¥–≤–∏–∂–µ–Ω?
                 break;
            }

            case 'poison_cultist': {
                 rotateEnemyTowards(playerPos); // –°–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞
                 const currentAtkRange = eStats.attackRange || 200;
                 const isPlayerInAttackRange = dist <= currentAtkRange;

                 // –ê—Ç–∞–∫—É–µ—Ç –≤ —Ä–∞–¥–∏—É—Å–µ –ø–æ –ö–î —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                 if (isPlayerInAttackRange && enemy.abilityCooldown <= 0) {
                     console.log(`Cultist ${enemy.id} throws poison puddle!`);
                     // createPoisonPuddle(enemy.id, playerPos.clone(), eStats.puddleDuration || 10.0, eStats.puddleRadius || 50, eStats.puddleDps || 3); // –ù—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
                     enemy.abilityCooldown = eStats.abilityCooldown || 8.0;
                     // TODO: playAnimation('Attack');
                 } else {
                     // TODO: playAnimation('Idle');
                 }
                 // –ü–∞—Ç—Ä—É–ª–∏—Ä—É–µ—Ç –∏–ª–∏ —Å—Ç–æ–∏—Ç?
                 break;
            }

            default:
                console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø –≤—Ä–∞–≥–∞ –≤ switch: ${enemy.type}`);
                // TODO: playAnimation('Idle');
                break;
        } // --- –ö–æ–Ω–µ—Ü switch(enemy.type) ---

    }); // --- –ö–æ–Ω–µ—Ü enemyRefs.forEach ---


    // ==================================
    // === 5. –°–Ω–∞—Ä—è–¥—ã –í—Ä–∞–≥–æ–≤ ==========
    // ==================================
    const activeEnemyProjectiles = [];
    const PLAYER_HITBOX_SIZE = { width: 25, height: 25 }; // –•–∏—Ç–±–æ–∫—Å –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å–Ω–∞—Ä—è–¥–æ–≤ –≤—Ä–∞–≥–∞
    const playerHitboxForEnemyProj = playerObject ? {
        x: playerPos.x - PLAYER_HITBOX_SIZE.width / 2,
        y: playerPos.y - PLAYER_HITBOX_SIZE.height / 2,
        width: PLAYER_HITBOX_SIZE.width,
        height: PLAYER_HITBOX_SIZE.height
    } : null;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω–∞—Ä—è–¥–æ–≤ –≤—Ä–∞–≥–æ–≤, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∂–∏–≤
    if (playerHitboxForEnemyProj && playerHp > 0) {
        enemyProjectilesRef.current.forEach(proj => {
            proj.position.add(proj.velocity.clone().multiplyScalar(dt)); // –î–≤–∏–∂–µ–Ω–∏–µ
            proj.lifetime -= dt; // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
            if (proj.mesh) {
                proj.mesh.position.copy(proj.position); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—à–∞
                // –ü–æ–≤–æ—Ä–æ—Ç –º–µ—à–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
                proj.mesh.quaternion.setFromUnitVectors(new THREE.Vector3(0, 1, 0), proj.velocity.clone().normalize());
            }

            let hitPlayer = false;
            if (proj.lifetime > 0) {
                const projSize = 10; // –†–∞–∑–º–µ—Ä —Ö–∏—Ç–±–æ–∫—Å–∞ —Å–Ω–∞—Ä—è–¥–∞ –≤—Ä–∞–≥–∞
                const projHitbox = { x: proj.position.x - projSize / 2, y: proj.position.y - projSize / 2, width: projSize, height: projSize };
                if (checkCollision(projHitbox, playerHitboxForEnemyProj)) {
                    if (typeof playerTakeDamage === 'function') {
                        playerTakeDamage(proj.damage); // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É
                    } else { console.error("playerTakeDamage is not a function!"); }
                    hitPlayer = true;
                }
                // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ —Å–æ —Å—Ç–µ–Ω–∞–º–∏ –¥–ª—è —Å–Ω–∞—Ä—è–¥–æ–≤ –≤—Ä–∞–≥–∞?
            }

            // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–Ω–∞—Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –∂–∏–≤ –∏ –Ω–µ –ø–æ–ø–∞–ª
            if (proj.lifetime > 0 && !hitPlayer) {
                activeEnemyProjectiles.push(proj);
            } else { // –£–¥–∞–ª—è–µ–º –º–µ—à
                if (proj.mesh) {
                    currentScene?.remove(proj.mesh);
                    proj.mesh.geometry?.dispose();
                    proj.mesh.material?.dispose();
                }
            }
        });
        enemyProjectilesRef.current = activeEnemyProjectiles; // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤
    } else { // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–Ω–∞—Ä—è–¥—ã –≤—Ä–∞–≥–æ–≤
         enemyProjectilesRef.current.forEach(proj => {
              if (proj.mesh) {
                   currentScene?.remove(proj.mesh);
                   proj.mesh.geometry?.dispose();
                   proj.mesh.material?.dispose();
              }
         });
         enemyProjectilesRef.current = [];
    }


    // =====================================================
    // === 5.1 –û–ë–†–ê–ë–û–¢–ö–ê –ê–ö–¢–ò–í–ù–´–• –Ø–î–û–í–ò–¢–´–• –û–ë–õ–ê–ö–û–í (–ò–ó –ö–û–î1) ===
    // =====================================================
     const now = Date.now();
     const remainingClouds = [];
     // const playerPos = playerObject?.position; // –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–µ animate

     activeCloudsRef.current.forEach(cloud => {
         if (now < cloud.endTime) { // –û–±–ª–∞–∫–æ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ
             remainingClouds.push(cloud);
             // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω –∂–∏–≤ –∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è —É—Ä–æ–Ω–∞
             if (playerPos && typeof playerTakeDamage === 'function' && playerHp > 0) {
                 const distSq = playerPos.distanceToSquared(cloud.position);
                 if (distSq <= cloud.radiusSq) { // –ò–≥—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ –æ–±–ª–∞–∫–∞
                     const damage = cloud.dps * dt; // –£—Ä–æ–Ω –∑–∞ —ç—Ç–æ—Ç –∫–∞–¥—Ä (DPS * –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞)
                     playerTakeDamage(damage);
                     // console.log(`Player takes ${damage.toFixed(2)} poison cloud damage`); // –û—Ç–ª–∞–¥–∫–∞
                 }
             }
         } else { // –û–±–ª–∞–∫–æ –∏—Å—Ç–µ–∫–ª–æ
             currentScene?.remove(cloud.mesh); // –£–¥–∞–ª—è–µ–º –º–µ—à –∏–∑ —Å—Ü–µ–Ω—ã
             cloud.mesh.geometry?.dispose();   // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
             cloud.mesh.material?.dispose();   // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
             console.log("‚òÅÔ∏è Poison cloud expired and removed.");
         }
     });
     // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∞–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ä–µ—Ñ–µ
     // (–∏–∑–±–µ–≥–∞–µ–º setActiveClouds –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ RAF)
     if (remainingClouds.length !== activeCloudsRef.current.length) {
         activeCloudsRef.current = remainingClouds;
     }
    // --- –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –û–ë–õ–ê–ö–û–í ---


    // ==================================
    // === 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–æ–±–µ–¥—ã/–ü—Ä–æ–∏–≥—Ä—ã—à–∞ =
    // ==================================
    checkWinCondition(); // –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–±–∏—Ç—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤—Ä–∞–≥–∏


    // ==================================
    // === 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ö–∞–º–µ—Ä—ã ========
    // ==================================
    if (playerObject && currentCamera && levelConfig) {
        const camWidth = currentCamera.right - currentCamera.left;
        const camHeight = currentCamera.top - currentCamera.bottom;
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∏—Ä–∞
        const targetXCam = clamp(
            playerPos.x,
            -levelConfig.gameWorldWidth / 2 + camWidth / 2,
            levelConfig.gameWorldWidth / 2 - camWidth / 2
        );
        const targetYCam = clamp(
            playerPos.y,
            -levelConfig.WORLD_Y_OFFSET + camHeight / 2,
            levelConfig.gameWorldHeight - levelConfig.WORLD_Y_OFFSET - camHeight / 2
        );
        // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞–º–µ—Ä—É –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        currentCamera.position.lerp(new THREE.Vector3(targetXCam, targetYCam, currentCamera.position.z), 0.1);
    }

    // ==================================
    // === 8. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ =================
    // ==================================
    if (currentRenderer && currentScene && currentCamera) {
        try {
            currentRenderer.render(currentScene, currentCamera); // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–¥—Ä–∞
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:", error);
            setLevelStatus('error'); // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä—É –≤ —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
            if(animationFrameId.current) cancelAnimationFrame(animationFrameId.current); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª
            animationFrameId.current = null;
            clock.stop();
        }
    }

}; // --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ animate ---

        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
        if (!animationFrameId.current) {
            clock.start();
            lastTimestamp = performance.now();
            animationFrameId.current = requestAnimationFrame(animate);
        }

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è useEffect –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        return () => {
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current);
                animationFrameId.current = null;
            }
            clock.stop();
            // –û—á–∏—Å—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
             projectilesRef.current.forEach(p => p.mesh && sceneRef.current?.remove(p.mesh));
             projectilesRef.current = [];
             enemyProjectilesRef.current.forEach(p => p.mesh && sceneRef.current?.remove(p.mesh));
             enemyProjectilesRef.current = [];
             enemyRefs?.forEach(e => { if (e?.beamEffectMesh) removeBeamMesh(e); }); // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ e
        };
    }, [ // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–û–ß–ï–ù–¨ –í–ê–ñ–ù–û)
         isLoading, levelStatus, levelData, levelConfig, playerObject, enemyRefs, enemiesState, playerStats, beamTexturesLoaded,
         playerTakeDamage, handleEnemyHit, winLevel, loseLevel, difficulty,
         // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!
         summonCreature, placeTotem, triggerGroundSpikes, createPoisonPuddle, applyPlayerDebuff, createProjectileToPoint
         // applyDebuff <- –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      ]);


    // === 11. –†–ï–ù–î–ï–† JSX ===
    return (
        <div className="game-wrapper">
            {/* –û–≤–µ—Ä–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {isLoading && <LoadingScreen />}

            {/* –ò–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */}
            <div className="game-container" style={{ visibility: isLoading ? 'hidden' : 'visible' }}>
                {/* HP –∏–≥—Ä–æ–∫–∞ */}
                {!isLoading && playerObject && typeof playerHp === 'number' && typeof displayMaxHp === 'number' && (
                    <div style={{ position: 'absolute', top: '10px', left: '10px', zIndex: 100 }}> {/* –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
                         <HealthBar currentHp={playerHp} maxHp={displayMaxHp} />
                    </div>
                )}
                {/* –¢–∞–π–º–µ—Ä –≤—ã–∂–∏–≤–∞–Ω–∏—è */}
                {!isLoading && levelData?.winCondition?.type === 'survive_duration' && remainingTime !== null && levelStatus === 'playing' && (
                     <div className="survival-timer"> –í—ã–∂–∏—Ç—å: {Math.ceil(remainingTime)} —Å–µ–∫ </div>
                 )}
                {/* –ú–µ—Å—Ç–æ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ Three.js */}
                <div ref={mountRef} className="game-canvas"></div>
            </div>

            {/* –î–∂–æ–π—Å—Ç–∏–∫ */}
            <div id="joystick-container" className="joystick-container" style={{ visibility: isLoading ? 'hidden' : 'visible' }}></div>

            {/* –ü–æ–ø–∞–ø –ü–æ—Ä–∞–∂–µ–Ω–∏—è */}
            {levelStatus === 'lost' && (
                <GameOverPopup
                    onGoToMenu={() => {
                        if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'lost');
                        else console.warn("onLevelComplete –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
                    }}
                />
            )}

            {/* –ü–æ–ø–∞–ø –ü–æ–±–µ–¥—ã */}
            {levelStatus === 'won' && (
                 <div className="level-complete-overlay">
                     <h2>–ü–æ–±–µ–¥–∞!</h2>
                     <p>–£—Ä–æ–≤–µ–Ω—å {levelData.id} ({difficulty}) –ø—Ä–æ–π–¥–µ–Ω!</p>
                     <button onClick={() => {
                         if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'won');
                         else console.warn("onLevelComplete –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
                     }}>
                         –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                     </button>
                 </div>
             )}

             {/* –ü–æ–ø–∞–ø –û—à–∏–±–∫–∏ */}
             {levelStatus === 'error' && (
                  <div className="level-error-overlay">
                      <h2>–û—à–∏–±–∫–∞</h2>
                      <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ —É—Ä–æ–≤–Ω—è.</p>
                      <button onClick={() => {
                          if (typeof onLevelComplete === 'function') onLevelComplete(levelData.id, 'error');
                          else console.warn("onLevelComplete –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
                      }}>
                          –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                      </button>
                  </div>
              )}
        </div> // –ó–∞–∫—Ä—ã—Ç–∏–µ game-wrapper
    ); // –ó–∞–∫—Ä—ã—Ç–∏–µ return
}; // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Level

export default Level;