// src/components/Shop.jsx
import React, { useState, useEffect, useMemo, useCallback } from 'react';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AnimatePresence –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
import { motion, AnimatePresence } from 'framer-motion';
import useGameStore from '../store/useGameStore';

// –î–∞–Ω–Ω—ã–µ —Å—É–Ω–¥—É–∫–æ–≤
import { ARTIFACT_CHESTS, getArtifactChestById } from '../data/artifactChestData.js';
import { GEAR_CHESTS, getGearChestById } from '../data/gearChestData.js';

// –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (–¥–ª—è Daily Shop –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ InfoPopup)
import itemsDatabase, { getItemById as getItemDataById } from '../data/itemsDatabase';
import { getArtifactById } from '../data/artifactsData.js';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ø–∞–ø–æ–≤
import ChestResultsPopup from './ChestResultsPopup';
import ChestInfoPopup from './ChestInfoPopup';

// –°—Ç–∏–ª–∏
import './Shop.scss';
import './ChestCard.scss'; // –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏ —Å—Ç–∏–ª–∏ —Å–ª–∞–π–¥–æ–≤ –∏–ª–∏ –∏—Ö –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å)
// import './Carousel.scss'; // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Å—Ç–∏–ª–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –≤—ã–Ω–µ—Å–µ–Ω—ã

// --- –•–µ–ª–ø–µ—Ä—ã –†–µ–¥–∫–æ—Å—Ç–∏ (–¥–ª—è InfoPopup) ---
const rarityOrder = { "Common": 1, "Uncommon": 2, "Rare": 3, "Epic": 4, "Legendary": 5, "Mythic": 6 };
const getTopRarities = (chest, count = 5) => {
    if (!chest || !chest.possibleRarities) {
        return [];
    }
    const sortedRarities = [...chest.possibleRarities].sort((a, b) => (rarityOrder[b] || 0) - (rarityOrder[a] || 0));
    return sortedRarities.slice(0, count);
};

// --- –•–µ–ª–ø–µ—Ä—ã –∏ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ö–∞—Ä—Ç–æ—á–µ–∫ ---

// –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞
const getItemData = (itemId) => getItemDataById(itemId);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ Daily Shop
const ShopItemCard = ({ deal, itemData, onPurchase, purchased, playerGold, playerDiamonds }) => {
    const canAfford = deal.currency === 'gold' ? playerGold >= deal.price : playerDiamonds >= deal.price;
    const isAvailable = !purchased;
    const purchaseDisabled = !isAvailable || !canAfford;

    return (
        <div className={`shop-item-card ${!isAvailable ? 'sold-out' : ''} rarity-${itemData?.rarity || 'common'}`}>
            {deal.discount > 0 && <div className="discount-banner">{deal.discount}% OFF</div>}
            <div className="item-name">{itemData?.name || deal.itemId}</div>
            <img src={itemData?.image || '/assets/default-item.png'} alt={itemData?.name || '–ü—Ä–µ–¥–º–µ—Ç'} />
            <div className="purchase-limit">–û—Å—Ç–∞–ª–æ—Å—å: {isAvailable ? (deal.purchaseLimit || 1) : 0}</div>
            <button
                className="purchase-button"
                onClick={() => onPurchase(deal.id)}
                disabled={purchaseDisabled}
            >
                <img src={deal.currency === 'gold' ? '/assets/coin-icon.png' : '/assets/diamond-image.png'} alt={deal.currency} />
                {deal.price.toLocaleString()}
            </button>
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–∞–∫–µ—Ç–∞ –≤–∞–ª—é—Ç—ã
const CurrencyPackCard = ({ pack, onPurchase }) => {
    const purchaseDisabled = false; // –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ onPurchase

    return (
        <div className={`shop-item-card currency-pack-card rarity-${pack.rarity || 'common'}`}>
            <div className="item-name">{pack.name}</div>
            <img src={pack.icon || '/assets/currencies/diamonds_pack_1.png'} alt={pack.name} />
            <button className="purchase-button currency-button" onClick={() => onPurchase(pack.id)} disabled={purchaseDisabled}>
                <span>{pack.priceDisplay || `${pack.price}$`}</span>
            </button>
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –±–∞–Ω–¥–ª–∞
const BundleCard = ({ bundle, onPurchase }) => {
    const purchaseDisabled = false; // –ó–∞–≥–ª—É—à–∫–∞

    return (
       <div className={`shop-item-card bundle-card rarity-${bundle.rarity || 'rare'}`}>
            {bundle.discount > 0 && <div className="discount-banner">{bundle.discount}% OFF</div>}
            <div className="item-name">{bundle.name}</div>
            <img src={bundle.icon || '/assets/bundles/bundles-icon.png'} alt={bundle.name} />
             <div className="bundle-contents">
                    {bundle.contents?.map((content, index) => <span key={index}>{content}</span>)}
             </div>
            <button className="purchase-button bundle-button" onClick={() => onPurchase(bundle.id)} disabled={purchaseDisabled}>
                <span>{bundle.priceDisplay || `${bundle.price}$`}</span>
            </button>
       </div>
     );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –û—Å–∫–æ–ª–∫–æ–≤ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
const ArtifactShardCard = ({ deal, artifactData, onPurchase, purchased, playerGold, playerDiamonds }) => {
    if (!artifactData) {
        return <div className="shop-item-card sold-out"><p>–û—à–∏–±–∫–∞: –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p></div>;
    }
    const canAfford = deal.currency === 'gold' ? playerGold >= deal.price : playerDiamonds >= deal.price;
    const isAvailable = !purchased;
    const purchaseDisabled = !isAvailable || !canAfford;

    return (
        <div className={`shop-item-card artifact-shard-card ${!isAvailable ? 'sold-out' : ''} rarity-${artifactData.rarity || 'common'}`}>
            {deal.discount > 0 && <div className="discount-banner">{deal.discount}% OFF</div>}
            <div className="item-name">{artifactData.name} (–û—Å–∫–æ–ª–∫–∏) x{deal.quantity}</div>
            <img src={artifactData.icon || '/assets/default-item.png'} alt={`${artifactData.name} (–û—Å–∫–æ–ª–∫–∏)`} />
            <div className="purchase-limit">–û—Å—Ç–∞–ª–æ—Å—å: {isAvailable ? (deal.purchaseLimit || 1) : 0}</div>
            <button
                className="purchase-button shard-button"
                onClick={() => onPurchase(deal.id)}
                disabled={purchaseDisabled}
            >
                <img src={deal.currency === 'gold' ? '/assets/coin-icon.png' : '/assets/diamond-image.png'} alt={deal.currency} />
                {deal.price.toLocaleString()}
            </button>
        </div>
    );
};


// --- –•–µ–ª–ø–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ ---
const formatTime = (ms) => {
    if (ms <= 0) return "00:00:00";
    const totalSeconds = Math.floor(ms / 1000);
    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');
    const minutes = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0');
    const seconds = String(totalSeconds % 60).padStart(2, '0');
    return `${hours}:${minutes}:${seconds}`;
};

const REFRESH_HOUR_UTC = 2; // –ß–∞—Å —Å–±—Ä–æ—Å–∞

// --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ú–∞–≥–∞–∑–∏–Ω–∞ (–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π) ---
const Shop = () => {
    // --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
    const [refreshTimer, setRefreshTimer] = useState("--:--:--"); // –¢–∞–π–º–µ—Ä Daily Shop
    const [openingChestId, setOpeningChestId] = useState(null);   // –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
    const [infoPopupChestData, setInfoPopupChestData] = useState(null); // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ñ–æ-–ø–æ–ø–∞–ø–∞

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–µ–π
    const [currentGearChestIndex, setCurrentGearChestIndex] = useState(0);
    const [direction, setDirection] = useState(0); // 1 –¥–ª—è 'next', -1 –¥–ª—è 'prev', 0 –¥–ª—è initial/click
    const [currentArtifactChestIndex, setCurrentArtifactChestIndex] = useState(0); // –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const [directionArtifact, setDirectionArtifact] = useState(0); // –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤

    // --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–µ–π ---
    const numGearChests = GEAR_CHESTS.length;
    const numArtifactChests = ARTIFACT_CHESTS.length;
    const DRAG_BUFFER = 100; // –ú–∏–Ω. –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —Å–≤–∞–π–ø–∞
    const VELOCITY_THRESHOLD = 200; // –ú–∏–Ω. —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —Å–≤–∞–π–ø–∞

    // --- –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ–∫—Ü–∏–π ---
    const currencyPacks = [
         { id: 'gold_pack_1', name: '–ú–µ—à–æ–∫ –∑–æ–ª–æ—Ç–∞', type: 'gold', amount: 10000, price: 50, currency: 'diamonds', icon: '/assets/currencies/gold_pack_1.png', priceDisplay: '50üíé', rarity: 'common'},
         { id: 'gold_pack_2', name: '–°—É–Ω–¥—É–∫ –∑–æ–ª–æ—Ç–∞', type: 'gold', amount: 55000, price: 250, currency: 'diamonds', icon: '/assets/currencies/gold_pack_2.png', priceDisplay: '250üíé', rarity: 'rare'},
         { id: 'diamond_pack_1', name: '–ì–æ—Ä—Å—Ç—å –∞–ª–º–∞–∑–æ–≤', type: 'diamonds', amount: 100, price: 1.99, currency: 'real_money', icon: '/assets/currencies/diamonds_pack_1.png', priceDisplay: '$1.99', rarity: 'common'},
         { id: 'diamond_pack_2', name: '–ö–æ—à–µ–ª—å –∞–ª–º–∞–∑–æ–≤', type: 'diamonds', amount: 550, price: 9.99, currency: 'real_money', icon: '/assets/currencies/diamonds_pack_2.png', priceDisplay: '$9.99', rarity: 'rare'},
       ];
     const bundleDeals = [
         { id: 'starter_bundle', name: '–ù–∞–±–æ—Ä –ù–æ–≤–∏—á–∫–∞', rarity: 'rare', icon: '/assets/bundles/starter_bundle.png', price: 0.99, currency: 'real_money', priceDisplay: '$0.99', discount: 80, contents: ['x1000 –ó–æ–ª–æ—Ç–∞', 'x50 –ê–ª–º–∞–∑–æ–≤', 'x1 –ö–ª—é—á –°–Ω–∞—Ä—è–∂–µ–Ω–∏—è'] },
         { id: 'artifact_bundle', name: '–ù–∞–±–æ—Ä –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤', rarity: 'epic', icon: '/assets/bundles/artifact_bundle.png', price: 4.99, currency: 'real_money', priceDisplay: '$4.99', discount: 50, contents: ['x1000 –û—Å–∫–æ–ª–∫–æ–≤', 'x300 –ê–ª–º–∞–∑–æ–≤'] },
       ];

    // --- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ actions –∏–∑ —Å—Ç–æ—Ä–∞ ---
    const {
        gold, diamonds,
        dailyDeals, dailyDealsLastGenerated, dailyShopPurchases,
        artifactChestPity = {}, // Pity –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        gearChestPity = {},     // Pity –¥–ª—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
        lastChestRewards, lastOpenedChestInfo,
        // Actions
        purchaseShopItem,
        openArtifactChest, openArtifactChestX10, // –≠–∫—à–µ–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        openGearChest, openGearChestX10,       // –≠–∫—à–µ–Ω—ã —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
        clearLastChestData,
        purchaseCurrencyPack,
        purchaseBundle
    } = useGameStore((state) => ({
        gold: state.gold,
        diamonds: state.diamonds,
        dailyDeals: state.dailyDeals,
        dailyDealsLastGenerated: state.dailyDealsLastGenerated,
        dailyShopPurchases: state.dailyShopPurchases,
        artifactChestPity: state.artifactChestPity,
        gearChestPity: state.gearChestPity, // –í–∞–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Å—Ç–æ—Ä–∞
        lastChestRewards: state.lastChestRewards,
        lastOpenedChestInfo: state.lastOpenedChestInfo,
        purchaseShopItem: state.purchaseShopItem,
        openArtifactChest: state.openArtifactChest,
        openArtifactChestX10: state.openArtifactChestX10,
        openGearChest: state.openGearChest,
        openGearChestX10: state.openGearChestX10,
        clearLastChestData: state.clearLastChestData,
        purchaseCurrencyPack: state.purchaseCurrencyPack,
        purchaseBundle: state.purchaseBundle,
    }), (left, right) => {
        // –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è useGameStore
        return left.gold === right.gold &&
               left.diamonds === right.diamonds &&
               left.dailyDealsLastGenerated === right.dailyDealsLastGenerated &&
               JSON.stringify(left.dailyDeals) === JSON.stringify(right.dailyDeals) &&
               JSON.stringify(left.dailyShopPurchases) === JSON.stringify(right.dailyShopPurchases) &&
               JSON.stringify(left.artifactChestPity) === JSON.stringify(right.artifactChestPity) &&
               JSON.stringify(left.gearChestPity) === JSON.stringify(right.gearChestPity) && // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ gearChestPity
               JSON.stringify(left.lastChestRewards) === JSON.stringify(right.lastChestRewards) &&
               JSON.stringify(left.lastOpenedChestInfo) === JSON.stringify(right.lastOpenedChestInfo);
    });

    // --- Framer Motion Variants –¥–ª—è –æ–±–µ–∏—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π ---
    const slideVariants = {
        enter: (direction) => ({
            x: direction > 0 ? '100%' : '-100%',
            opacity: 0,
            scale: 0.95 // –ß—É—Ç—å —É–º–µ–Ω—å—à–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π
        }),
        center: {
            zIndex: 1, // –ê–∫—Ç–∏–≤–Ω—ã–π —Å–ª–∞–π–¥ –ø–æ–≤–µ—Ä—Ö
            x: 0,
            opacity: 1,
            scale: 1,
            transition: { duration: 0.4, ease: [0.4, 0, 0.2, 1] } // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        },
        exit: (direction) => ({
            zIndex: 0, // –£—Ö–æ–¥—è—â–∏–π —Å–ª–∞–π–¥ –ø–æ–¥ –Ω–∏–∑
            x: direction < 0 ? '100%' : '-100%',
            opacity: 0,
            scale: 0.95, // –ß—É—Ç—å —É–º–µ–Ω—å—à–∞–µ–º —É—Ö–æ–¥—è—â–∏–π
            transition: { duration: 0.3, ease: [0.4, 0, 0.6, 1] } // –ß—É—Ç—å –±—ã—Å—Ç—Ä–µ–µ —É—Ö–æ–¥
        })
    };

    // --- –§—É–Ω–∫—Ü–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–µ–π ---
    // –î–ª—è —Å—É–Ω–¥—É–∫–æ–≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
    const paginate = useCallback((newDirection) => {
        if (!newDirection || numGearChests <= 1) return; // –ù–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 0 –∏–ª–∏ 1 —Å—É–Ω–¥—É–∫
        setDirection(newDirection); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setCurrentGearChestIndex(prevIndex =>
            (prevIndex + newDirection + numGearChests) % numGearChests
        );
    }, [numGearChests]);

    // –î–ª—è —Å—É–Ω–¥—É–∫–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const paginateArtifact = useCallback((newDirection) => {
        if (!newDirection || numArtifactChests <= 1) return;
        setDirectionArtifact(newDirection); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        setCurrentArtifactChestIndex(prevIndex =>
            (prevIndex + newDirection + numArtifactChests) % numArtifactChests
        );
    }, [numArtifactChests]);

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Drag End –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–µ–π ---
    // –î–ª—è —Å—É–Ω–¥—É–∫–æ–≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
    const handleDragEndForSlide = useCallback((event, info) => {
        const { offset, velocity } = info;
        if (Math.abs(offset.x) > DRAG_BUFFER || Math.abs(velocity.x) > VELOCITY_THRESHOLD) {
            paginate(offset.x < 0 ? 1 : -1);
        }
        // –ï—Å–ª–∏ —Å–≤–∞–π–ø –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π, –∞–Ω–∏–º–∞—Ü–∏—è exit/enter –≤–µ—Ä–Ω–µ—Ç —Å–ª–∞–π–¥ –Ω–∞ –º–µ—Å—Ç–æ
    }, [paginate, DRAG_BUFFER, VELOCITY_THRESHOLD]); // –î–æ–±–∞–≤–∏–ª–∏ paginate –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    // –î–ª—è —Å—É–Ω–¥—É–∫–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const handleDragEndForArtifactSlide = useCallback((event, info) => {
        const { offset, velocity } = info;
        if (Math.abs(offset.x) > DRAG_BUFFER || Math.abs(velocity.x) > VELOCITY_THRESHOLD) {
            paginateArtifact(offset.x < 0 ? 1 : -1); // –í—ã–∑—ã–≤–∞–µ–º paginateArtifact
        }
    }, [paginateArtifact, DRAG_BUFFER, VELOCITY_THRESHOLD]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç paginateArtifact –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç

    // --- useEffect –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ Daily Shop ---
    useEffect(() => {
        let intervalId = null;
        const updateTimer = () => {
            const nowTs = Date.now();
            const nowUtcDate = new Date(nowTs);
            // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–±—Ä–æ—Å–∞
            const targetTodayUtcTs = Date.UTC(
                nowUtcDate.getUTCFullYear(), nowUtcDate.getUTCMonth(), nowUtcDate.getUTCDate(),
                REFRESH_HOUR_UTC, 0, 0, 0
            );
            let nextRefreshTimeTs;
            if (nowTs < targetTodayUtcTs) {
                nextRefreshTimeTs = targetTodayUtcTs;
            } else {
                const targetTomorrowUtcTs = Date.UTC(
                    nowUtcDate.getUTCFullYear(), nowUtcDate.getUTCMonth(), nowUtcDate.getUTCDate() + 1,
                    REFRESH_HOUR_UTC, 0, 0, 0
                );
                nextRefreshTimeTs = targetTomorrowUtcTs;
            }
            const remainingMs = Math.max(0, nextRefreshTimeTs - nowTs);
            setRefreshTimer(formatTime(remainingMs));
        };
        intervalId = setInterval(updateTimer, 1000);
        updateTimer(); // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–∑—É
        return () => { if (intervalId) clearInterval(intervalId); };
    }, []);

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–æ–≤ ---
    // –î–ª—è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const handleOpenArtifactChest = (chestId, amount = 1) => {
        if (openingChestId) return;
        const chestData = getArtifactChestById(chestId);
        if (!chestData) { console.error(`[Shop] Artifact chest data not found: ${chestId}`); return; }
        const cost = chestData.cost.price * amount;
        if (diamonds < cost) { alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–ª–º–∞–∑–æ–≤! –ù—É–∂–Ω–æ ${cost.toLocaleString()}`); return; }
        setOpeningChestId(chestId);
        console.log(`[Shop] Attempting to open Artifact Chest: ${chestId} x${amount}`);
        try {
            if (amount === 10) openArtifactChestX10(chestId); else openArtifactChest(chestId);
        } catch (error) {
             console.error(`[Shop] Error calling open action for artifact chest ${chestId} x${amount}:`, error);
             setOpeningChestId(null);
        }
    };

    // –î–ª—è –°–Ω–∞—Ä—è–∂–µ–Ω–∏—è
    const handleOpenGearChest = (chestId, amount = 1) => {
        if (openingChestId) return;
        const chestData = getGearChestById(chestId);
        if (!chestData) { console.error("[Shop] Gear chest data not found:", chestId); return; }

        const cost = chestData.cost.price * amount;
        const currency = chestData.cost.currency;
        const playerCurrency = currency === 'gold' ? gold : diamonds;

        if (playerCurrency < cost) {
            alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${currency === 'gold' ? '–∑–æ–ª–æ—Ç–∞' : '–∞–ª–º–∞–∑–æ–≤'}! –ù—É–∂–Ω–æ ${cost.toLocaleString()}`);
            return;
        }

        setOpeningChestId(chestId);
        console.log(`[Shop] Attempting to open Gear Chest: ${chestId} x${amount}`);
        try {
            if (amount === 10) {
                console.log(`[Shop] Calling openGearChestX10 for ${chestId}`);
                openGearChestX10(chestId);
            } else {
                console.log(`[Shop] Calling openGearChest for ${chestId}`);
                openGearChest(chestId);
            }
        } catch (error) {
            console.error(`[Shop] Error calling open action for gear chest ${chestId} x${amount}:`, error);
            setOpeningChestId(null);
        }
    };

    // --- useEffect –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–æ–ø–∞–ø–∞ ---
      useEffect(() => {
         if (lastChestRewards && openingChestId) {
             console.log("[Shop] Rewards received, resetting openingChestId");
             setOpeningChestId(null);
         }
     }, [lastChestRewards, openingChestId]);

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ñ–æ-–ø–æ–ø–∞–ø–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–æ–≤ ---
    const handleShowInfoPopup = useCallback((chestData) => {
        console.log("[Shop] Showing info for chest:", chestData?.id);
        setInfoPopupChestData(chestData);
    }, []);
    const handleCloseInfoPopup = useCallback(() => {
        console.log("[Shop] Closing info popup");
        setInfoPopupChestData(null);
    }, []);
    const handleCloseResultsPopup = useCallback(() => {
        console.log("[Shop] Closing results popup and clearing data");
        clearLastChestData(); // –í—ã–∑—ã–≤–∞–µ–º —ç–∫—à–Ω –∏–∑ —Å—Ç–æ—Ä–∞
    }, [clearLastChestData]);

    // --- –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ---
    return (
        <> {/* –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ø–∞–ø–æ–≤ */}
            <motion.div
                className="shop-screen"
                style={{ position: 'absolute', width: '100%', height: '100%', top: 0, left: 0 }}
            >
                {/* –®–∞–ø–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ */}
                {/* <div className="shop-header"> ... </div> */}

                {/* –ö–æ–Ω—Ç–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —Å–æ –≤—Å–µ–º–∏ —Å–µ–∫—Ü–∏—è–º–∏ */}
                <div className="shop-content">

                    {/* --- –°–µ–∫—Ü–∏—è Daily Shop (–°–¢–†–£–ö–¢–£–†–ê –ò–ó –ö–û–î–ê 1 –ü–†–ò–ú–ï–ù–ï–ù–ê) --- */}
                    <div className="shop-section">
                        <h3 className="shop-section-title">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</h3>
                        {/* –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ—Ä—Ç–∫—É section-content-box (–∫–∞–∫ –≤ –∫–æ–¥–µ 1) */}
                        <div className="section-content-box">
                            {/* –¢–∞–π–º–µ—Ä —Ç–µ–ø–µ—Ä—å –í–ù–£–¢–†–ò –±–æ–∫—Å–∞ */}
                            <div className="shop-timer daily-timer">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {refreshTimer}</div>
                            {/* –°–µ—Ç–∫–∞ —Ç–µ–ø–µ—Ä—å –í–ù–£–¢–†–ò –±–æ–∫—Å–∞ */}
                            <div className="daily-shop-grid">
                                {dailyDeals && dailyDeals.length > 0 ? (
                                    dailyDeals.map(deal => {
                                        const purchased = !!dailyShopPurchases[deal.id];
                                        if (deal.type === 'item') {
                                            const itemData = getItemData(deal.itemId);
                                            if (!itemData) {
                                                console.warn(`–ü—Ä–µ–¥–º–µ—Ç ${deal.itemId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Daily Shop`);
                                                return <div key={deal.id} className="shop-item-card sold-out"><p>–û—à–∏–±–∫–∞: –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p></div>;
                                            }
                                            return (
                                                <ShopItemCard key={deal.id} deal={deal} itemData={itemData} onPurchase={purchaseShopItem}
                                                    purchased={purchased} playerGold={gold} playerDiamonds={diamonds} />
                                            );
                                        } else if (deal.type === 'artifact_shard') {
                                             const artifactData = getArtifactById(deal.itemId);
                                             if (!artifactData) {
                                                 console.warn(`–ê—Ä—Ç–µ—Ñ–∞–∫—Ç ${deal.itemId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Daily Shop`);
                                                 return <div key={deal.id} className="shop-item-card sold-out"><p>–û—à–∏–±–∫–∞: –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p></div>;
                                            }
                                            return (
                                                <ArtifactShardCard key={deal.id} deal={deal} artifactData={artifactData} onPurchase={purchaseShopItem}
                                                    purchased={purchased} playerGold={gold} playerDiamonds={diamonds} />
                                            );
                                        } else {
                                            console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –≤ Daily Shop: ${deal.type}`);
                                            return null;
                                        }
                                    })
                                ) : (
                                    <p>–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...</p>
                                )}
                            </div> {/* –ö–æ–Ω–µ—Ü .daily-shop-grid */}
                        </div> {/* –ö–æ–Ω–µ—Ü –ù–û–í–û–ì–û .section-content-box */}
                    </div>
                    {/* --- –ö–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ Daily Shop --- */}


                    {/* ====================================================================== */}
                    {/* === –°–ï–ö–¶–ò–Ø –°–£–ù–î–£–ö–û–í –°–ù–ê–†–Ø–ñ–ï–ù–ò–Ø –° –ö–ê–†–£–°–ï–õ–¨–Æ === */}
                    {/* ====================================================================== */}
                    <div className="shop-section">
                         <h3 className="shop-section-title">–°—É–Ω–¥—É–∫–∏ –°–Ω–∞—Ä—è–∂–µ–Ω–∏—è</h3>
                         <div className="section-content-box"> {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å –æ–±–µ—Ä—Ç–∫–∏ */}
                             <div className="chest-carousel-container gear-carousel"> {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ */}
                                 <AnimatePresence initial={false} custom={direction} mode='wait'>
                                     <motion.div
                                         key={currentGearChestIndex} // Key –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é
                                         className={`chest-slide gear-chest-slide ${openingChestId === GEAR_CHESTS[currentGearChestIndex]?.id ? 'opening' : ''}`}
                                         custom={direction} // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ variants
                                         variants={slideVariants}
                                         initial="enter"
                                         animate="center"
                                         exit="exit"
                                         drag="x" // –í–∫–ª—é—á–∞–µ–º –¥—Ä–∞–≥
                                         dragConstraints={{ left: 0, right: 0 }}
                                         dragElastic={0.7}
                                         onDragEnd={handleDragEndForSlide} // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–∞–π–ø–∞
                                     >
                                         {/* --- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –°–ª–∞–π–¥–∞ –°–Ω–∞—Ä—è–∂–µ–Ω–∏—è --- */}
                                         {(() => {
                                             const chest = GEAR_CHESTS[currentGearChestIndex];
                                             if (!chest) {
                                                 console.error(`[Shop] Gear chest at index ${currentGearChestIndex} not found!`);
                                                 return <div className="error-placeholder">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–Ω–¥—É–∫–∞</div>;
                                             }

                                             const isOpeningThis = openingChestId === chest.id;
                                             const costX1 = chest.cost.price;
                                             const costX10 = chest.cost.price * 10;
                                             const currency = chest.cost.currency;
                                             const canAffordX1 = currency === 'gold' ? gold >= costX1 : diamonds >= costX1;
                                             const canAffordX10 = currency === 'gold' ? gold >= costX10 : diamonds >= costX10;
                                             const openDisabledX1 = isOpeningThis || !canAffordX1;
                                             const openDisabledX10 = isOpeningThis || !canAffordX10;

                                             return (
                                                 <>
                                                      <div className="chest-title-wrapper">
                                                          <h4 className="chest-slide-name">{chest.name}</h4>
                                                          <button className="chest-info-button" onClick={(e) => { e.stopPropagation(); handleShowInfoPopup(chest); }} aria-label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–Ω—Å–∞—Ö"> i </button>
                                                      </div>
                                                      <div className="chest-slide-graphic-area">
                                                          <img
                                                              src={chest.icon || '/assets/chests/gear_chest_default.png'}
                                                              alt={chest.name}
                                                              className="chest-slide-graphic-img"
                                                              draggable="false"
                                                          />
                                                      </div>
                                                      {chest.description && (
                                                          <p className="chest-slide-description">{chest.description}</p>
                                                      )}

                                                      {/* Pity Info –¥–ª—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è */}
                                                      <div className="chest-pity-info-container">
                                                          {chest.pity && (
                                                              <div className="chest-pity-info multiple">
                                                                  {(Array.isArray(chest.pity) ? chest.pity : [chest.pity])
                                                                       .sort((a, b) => (b.rarity === 'Epic' ? 1 : a.rarity === 'Epic' ? -1 : 0)) // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–µ—Ä–≤—ã–π
                                                                       .map(p => {
                                                                           const pityKey = p.rarity.toLowerCase();
                                                                           const currentPityCount = (gearChestPity[chest.id]?.[pityKey]) || 0; // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
                                                                           const pityRemaining = Math.max(0, p.limit - currentPityCount);
                                                                           const text = pityRemaining > 0
                                                                                         ? `–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ${p.rarity} —á–µ—Ä–µ–∑ ${pityRemaining}`
                                                                                         : `–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ${p.rarity} –°–õ–ï–î–£–Æ–©–ò–ô!`;
                                                                           return <span key={p.rarity} className={`rarity-${pityKey}`}>{text}</span>;
                                                                       })}
                                                              </div>
                                                          )}
                                                      </div>

                                                      {/* –ö–Ω–æ–ø–∫–∏ x1 / x10 */}
                                                      <div className={`chest-button-wrapper two-buttons`}>
                                                          <button
                                                              className="purchase-button open-chest-button gear-style"
                                                              onClick={() => !isOpeningThis && handleOpenGearChest(chest.id, 1)}
                                                              disabled={openDisabledX1} >
                                                              <img src={currency === 'gold' ? '/assets/coin-icon.png' : '/assets/diamond-image.png'} alt={currency} /> {costX1.toLocaleString()} <span>x1</span>
                                                          </button>
                                                          <button
                                                              className="purchase-button open-chest-button gear-style"
                                                              onClick={() => !isOpeningThis && handleOpenGearChest(chest.id, 10)}
                                                              disabled={openDisabledX10} >
                                                              <img src={currency === 'gold' ? '/assets/coin-icon.png' : '/assets/diamond-image.png'} alt={currency} /> {costX10.toLocaleString()} <span>x10</span>
                                                          </button>
                                                      </div>
                                                 </>
                                             );
                                         })()}
                                         {/* --- –ö–æ–Ω–µ—Ü –°–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –°–ª–∞–π–¥–∞ –°–Ω–∞—Ä—è–∂–µ–Ω–∏—è --- */}
                                     </motion.div>
                                 </AnimatePresence>

                                 {/* --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –°–Ω–∞—Ä—è–∂–µ–Ω–∏—è --- */}
                                 {numGearChests > 1 && (
                                     <>
                                         <button className="carousel-nav-button prev" onClick={() => paginate(-1)} aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—É–Ω–¥—É–∫">‚óÄ</button>
                                         <button className="carousel-nav-button next" onClick={() => paginate(1)} aria-label="–°–ª–µ–¥—É—é—â–∏–π —Å—É–Ω–¥—É–∫">‚ñ∂</button>
                                         <div className="carousel-pagination">
                                             {GEAR_CHESTS.map((_, index) => (
                                                 <button
                                                     key={`dot-gear-${index}`}
                                                     className={`dot ${index === currentGearChestIndex ? 'active' : ''}`}
                                                     onClick={() => {
                                                         if (index !== currentGearChestIndex) {
                                                             setDirection(index > currentGearChestIndex ? 1 : -1);
                                                             setCurrentGearChestIndex(index);
                                                         }
                                                     }}
                                                     aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—É–Ω–¥—É–∫—É ${index + 1}`}
                                                 />
                                             ))}
                                         </div>
                                     </>
                                 )}
                             </div> {/* –ö–æ–Ω–µ—Ü .chest-carousel-container */}
                         </div> {/* –ö–æ–Ω–µ—Ü .section-content-box */}
                    </div>
                    {/* ====================================================================== */}
                    {/* === –ö–û–ù–ï–¶ –°–ï–ö–¶–ò–ò –°–£–ù–î–£–ö–û–í –°–ù–ê–†–Ø–ñ–ï–ù–ò–Ø === */}
                    {/* ====================================================================== */}


                    {/* ====================================================================== */}
                    {/* === –°–ï–ö–¶–ò–Ø –°–£–ù–î–£–ö–û–í –ê–†–¢–ï–§–ê–ö–¢–û–í –° –ö–ê–†–£–°–ï–õ–¨–Æ === */}
                    {/* ====================================================================== */}
                    <div className="shop-section">
                          <h3 className="shop-section-title">–°—É–Ω–¥—É–∫–∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤</h3>
                          <div className="section-content-box"> {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å –æ–±–µ—Ä—Ç–∫–∏ */}
                              <div className="chest-carousel-container swiper-mode artifact-carousel"> {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ */}
                                  <AnimatePresence initial={false} custom={directionArtifact} mode='wait'>
                                      <motion.div
                                          key={currentArtifactChestIndex} // Key –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é
                                          className={`chest-slide artifact-chest-slide ${openingChestId === ARTIFACT_CHESTS[currentArtifactChestIndex]?.id ? 'opening' : ''}`}
                                          custom={directionArtifact} // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
                                          variants={slideVariants} // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                                          initial="enter"
                                          animate="center"
                                          exit="exit"
                                          drag="x" // –í–∫–ª—é—á–∞–µ–º –¥—Ä–∞–≥
                                          dragConstraints={{ left: 0, right: 0 }}
                                          dragElastic={0.7}
                                          onDragEnd={handleDragEndForArtifactSlide} // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–∞–π–ø–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
                                      >
                                          {/* --- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –°–ª–∞–π–¥–∞ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ --- */}
                                          {(() => {
                                              const chest = ARTIFACT_CHESTS[currentArtifactChestIndex];
                                              if (!chest) {
                                                  console.error(`[Shop] Artifact chest at index ${currentArtifactChestIndex} not found!`);
                                                  return <div className="error-placeholder">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–Ω–¥—É–∫–∞</div>;
                                              }

                                              const isOpeningThis = openingChestId === chest.id;
                                              const costX1 = chest.cost.price;
                                              const costX10 = chest.cost.price * 10;
                                              // –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ç–æ–ª—å–∫–æ –∑–∞ –∞–ª–º–∞–∑—ã
                                              const canAffordX1 = diamonds >= costX1;
                                              const canAffordX10 = diamonds >= costX10;
                                              const openDisabledX1 = isOpeningThis || !canAffordX1;
                                              const openDisabledX10 = isOpeningThis || !canAffordX10;
                                              // Pity –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
                                              const currentPityCount = artifactChestPity[chest.id] || 0;
                                              const pityRemaining = Math.max(0, chest.pityLimit - currentPityCount);

                                              return (
                                                  <>
                                                       <div className="chest-title-wrapper">
                                                           <h4 className="chest-slide-name">{chest.name}</h4>
                                                           <button className="chest-info-button" onClick={(e) => { e.stopPropagation(); handleShowInfoPopup(chest); }} aria-label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–Ω—Å–∞—Ö"> i </button>
                                                       </div>
                                                       <div className="chest-slide-graphic-area">
                                                           <img
                                                               src={chest.icon || '/assets/chests/artifact_chest_default.png'}
                                                               alt={chest.name}
                                                               className="chest-slide-graphic-img"
                                                               draggable="false"
                                                           />
                                                       </div>
                                                       {chest.description && (
                                                           <p className="chest-slide-description">{chest.description}</p>
                                                       )}
                                                       {/* Pity Info –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ */}
                                                       <div className="chest-pity-info-container">
                                                           {chest.pityLimit && ( // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pityLimit
                                                               <div className="chest-pity-info">
                                                                   <span className={`rarity-${(chest.guaranteedRarity || 'legendary').toLowerCase()}`}>
                                                                   –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç {pityRemaining > 0 ? `—á–µ—Ä–µ–∑ ${pityRemaining}` : '–°–õ–ï–î–£–Æ–©–ò–ô!'}
                                                                   </span>
                                                               </div>
                                                           )}
                                                       </div>

                                                       {/* –ö–Ω–æ–ø–∫–∏ x1 / x10 */}
                                                       <div className={`chest-button-wrapper two-buttons`}>
                                                           <button
                                                               className="purchase-button open-chest-button wish-style"
                                                               onClick={() => !isOpeningThis && handleOpenArtifactChest(chest.id, 1)}
                                                               disabled={openDisabledX1}>
                                                               <img src={'/assets/diamond-image.png'} alt="–∞–ª–º–∞–∑—ã" /> {costX1.toLocaleString()} <span>x1</span>
                                                           </button>
                                                           <button
                                                               className="purchase-button open-chest-button wish-style"
                                                               onClick={() => !isOpeningThis && handleOpenArtifactChest(chest.id, 10)}
                                                               disabled={openDisabledX10}>
                                                               <img src={'/assets/diamond-image.png'} alt="–∞–ª–º–∞–∑—ã" /> {costX10.toLocaleString()} <span>x10</span>
                                                           </button>
                                                       </div>
                                                  </>
                                              );
                                          })()}
                                          {/* --- –ö–æ–Ω–µ—Ü –°–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –°–ª–∞–π–¥–∞ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ --- */}
                                      </motion.div>
                                  </AnimatePresence>

                                  {/* --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ --- */}
                                  {numArtifactChests > 1 && (
                                      <>
                                          <button className="carousel-nav-button prev" onClick={() => paginateArtifact(-1)} aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—É–Ω–¥—É–∫">‚óÄ</button>
                                          <button className="carousel-nav-button next" onClick={() => paginateArtifact(1)} aria-label="–°–ª–µ–¥—É—é—â–∏–π —Å—É–Ω–¥—É–∫">‚ñ∂</button>
                                          <div className="carousel-pagination">
                                              {ARTIFACT_CHESTS.map((_, index) => (
                                                  <button
                                                      key={`dot-artifact-${index}`}
                                                      className={`dot ${index === currentArtifactChestIndex ? 'active' : ''}`}
                                                      onClick={() => {
                                                          if (index !== currentArtifactChestIndex) {
                                                              setDirectionArtifact(index > currentArtifactChestIndex ? 1 : -1);
                                                              setCurrentArtifactChestIndex(index);
                                                          }
                                                      }}
                                                      aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—É–Ω–¥—É–∫—É ${index + 1}`}
                                                  />
                                              ))}
                                          </div>
                                      </>
                                  )}
                              </div> {/* –ö–æ–Ω–µ—Ü .chest-carousel-container */}
                          </div> {/* –ö–æ–Ω–µ—Ü .section-content-box */}
                    </div>
                    {/* ====================================================================== */}
                    {/* === –ö–û–ù–ï–¶ –°–ï–ö–¶–ò–ò –°–£–ù–î–£–ö–û–í –ê–†–¢–ï–§–ê–ö–¢–û–í === */}
                    {/* ====================================================================== */}

                    {/* --- –°–µ–∫—Ü–∏—è –í–∞–ª—é—Ç—ã --- */}
                    <div className="shop-section">
                            <h3 className="shop-section-title">–í–∞–ª—é—Ç–∞</h3>
                            <div className="section-content-box"> {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å –æ–±–µ—Ä—Ç–∫–∏ */}
                                <div className="daily-shop-grid currency-grid">
                                    {currencyPacks.map(pack => (
                                        <CurrencyPackCard key={pack?.id || Math.random()} pack={pack}
                                            onPurchase={() => purchaseCurrencyPack ? purchaseCurrencyPack(pack.id) : alert('–ü–æ–∫—É–ø–∫–∞ –≤–∞–ª—é—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
                                        />
                                    ))}
                                </div>
                            </div>
                    </div>

                    {/* --- –°–µ–∫—Ü–∏—è –ë–∞–Ω–¥–ª–æ–≤ --- */}
                    <div className="shop-section">
                            <h3 className="shop-section-title">–ù–∞–±–æ—Ä—ã</h3>
                            <div className="section-content-box"> {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å –æ–±–µ—Ä—Ç–∫–∏ */}
                                <div className="daily-shop-grid bundles-grid">
                                    {bundleDeals.map(bundle => (
                                        <BundleCard key={bundle.id} bundle={bundle}
                                            onPurchase={() => purchaseBundle ? purchaseBundle(bundle.id) : alert('–ü–æ–∫—É–ø–∫–∞ –Ω–∞–±–æ—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
                                        />
                                    ))}
                                </div>
                            </div>
                    </div>

                </div> {/* –ö–æ–Ω–µ—Ü .shop-content */}
            </motion.div> {/* –ö–æ–Ω–µ—Ü .shop-screen */}

            {/* –ü–æ–ø–∞–ø—ã */}
            {lastChestRewards && (
                <ChestResultsPopup
                    rewards={lastChestRewards}
                    lastOpenInfo={lastOpenedChestInfo}
                    onClose={handleCloseResultsPopup}
                />
            )}
            {infoPopupChestData && (
                <ChestInfoPopup
                    chestData={infoPopupChestData}
                    onClose={handleCloseInfoPopup}
                />
            )}
        </> // –ö–æ–Ω–µ—Ü React Fragment
    );
};

export default Shop;