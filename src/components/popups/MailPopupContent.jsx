// src/components/popups/MailPopupContent.jsx
import React, { useState, useEffect } from 'react';
// import useGameStore from '../../store/useGameStore'; // Uncomment if needed
import './MailPopupContent.scss';
import MailDetailPopup from './MailDetailPopup';

// Mock data should ideally come from a global store or API in a real app
const initialMockMailItems = [
    { id: 'sys_welcome_001', sender: '–°–∏—Å—Ç–µ–º–∞', title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!', message: '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞, –ø—Ä–∏–º–∏—Ç–µ —ç—Ç–æ—Ç –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥–∞—Ä–æ–∫.\n\n–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!', rewardType: '–∑–æ–ª–æ—Ç–æ', rewardAmount: 100, claimed: false, read: false, date: '2025-05-15' },
    { id: 'event_login_002', sender: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ù–∞–≥—Ä–∞–¥', title: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥: –î–µ–Ω—å 1', message: '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—Ö–æ–¥. –ó–∞–±–µ—Ä–∏—Ç–µ –µ–µ —Å–∫–æ—Ä–µ–µ!', rewardType: '–∫—Ä–∏—Å—Ç–∞–ª–ª—ã', rewardAmount: 10, claimed: false, read: false, date: '2025-05-16' },
    { id: 'update_info_003', sender: '–õ–µ—Ç–æ–ø–∏—Å–µ—Ü', title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã v1.1!', message: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, –ò—Å–∫–∞—Ç–µ–ª—å –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!\n\n–†–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å –æ –≤—ã—Ö–æ–¥–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 1.1, –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç:\n- –ù–æ–≤—É—é –∑–æ–Ω—É "–ó–∞–±—ã—Ç—ã–µ –†—É–∏–Ω—ã"\n- –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤\n- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫.\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –Ω–∞—à–µ–º —Ñ–æ—Ä—É–º–µ!', rewardType: null, claimed: false, read: true, date: '2025-05-16' },
    { id: 'reward_milestone_004', sender: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π', title: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏"', message: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º 5 —É—Ä–æ–≤–Ω–µ–π! –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∂–¥–µ—Ç –≤–∞—Å –≤ —ç—Ç–æ–º –ø–∏—Å—å–º–µ.', rewardType: '–∑–µ–ª—å–µ —ç–Ω–µ—Ä–≥–∏–∏', rewardAmount: 1, claimed: true, read: true, date: '2025-05-17' },
    { id: 'sys_maintenance_005', sender: '–ì–ª–∞–≤–Ω—ã–π –ú–∞–≥–∏—Å—Ç—Ä', title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫–æ—Ä–æ', message: '–£–≤–∞–∂–∞–µ–º—ã–µ –∏–≥—Ä–æ–∫–∏, –∑–∞–≤—Ç—Ä–∞ —Å 03:00 –¥–æ 04:00 –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ø–ª–∞–Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤. –í–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä—ã–≤—ã —Å–≤—è–∑–∏ —Å –ê—Å—Ç—Ä–∞–ª–æ–º.', rewardType: null, claimed: false, read: false, date: '2025-05-17' },
    { id: 'long_title_006', sender: '–í–µ—Å—Ç–Ω–∏–∫ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞', title: '–û—á–µ–Ω—å –í–∞–∂–Ω–æ–µ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ö–∞—Å–∞—Ç–µ–ª—å–Ω–æ –ü—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ –¢—É—Ä–Ω–∏—Ä–∞ –∏ –ü—Ä–∞–≤–∏–ª –£—á–∞—Å—Ç–∏—è –≤ –ù–µ–º', message: '–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ —Ç—É—Ä–Ω–∏—Ä–µ...', rewardType: null, claimed: false, read: false, date: '2025-05-18' },
    { id: 'reward_007', sender: '–ì–∏–ª—å–¥–∏—è –¢–æ—Ä–≥–æ–≤—Ü–µ–≤', title: '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è', message: '–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –ü—Ä–∏–º–∏—Ç–µ —ç—Ç—É —Å–∫—Ä–æ–º–Ω—É—é –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é.', rewardType: '–æ—Ç–º—ã—á–∫–∏', rewardAmount: 5, claimed: false, read: false, date: '2025-05-18' },
];


const MailPopupContent = ({ onCloseRequest }) => { // onCloseRequest prop for closing the main mail UI
    const [mails, setMails] = useState(initialMockMailItems);
    const [selectedMailForDetail, setSelectedMailForDetail] = useState(null);

    // const { addItems, markMailAsRead, claimMailReward, deleteMailGlobally } = useGameStore(state => ({...}));

    const handleOpenMailDetail = (mail) => {
        setSelectedMailForDetail(mail);
        if (!mail.read) {
            // In a real app: markMailAsRead(mail.id);
            setMails(prevMails => prevMails.map(m => m.id === mail.id ? { ...m, read: true } : m));
        }
    };

    const handleCloseMailDetail = () => {
        setSelectedMailForDetail(null);
    };

    const handleClaimRewardFromDetail = (mailId) => {
        // In a real app: claimMailReward(mailId);
        setMails(prevMails => prevMails.map(m => m.id === mailId ? { ...m, claimed: true, read: true } : m));
        setSelectedMailForDetail(prev => prev && prev.id === mailId ? { ...prev, claimed: true, read: true } : prev);
    };

    const handleDeleteMailFromDetail = (mailId) => {
        // In a real app: deleteMailGlobally(mailId);
        setMails(prevMails => prevMails.filter(m => m.id !== mailId));
        handleCloseMailDetail(); // Always close detail view after deletion from it
    };

    const handleClaimAll = () => {
        let itemsClaimed = [];
        const updatedMails = mails.map(m => {
            if (m.rewardType && !m.claimed) {
                itemsClaimed.push({ type: m.rewardType, amount: m.rewardAmount });
                // In a real app: addItems(m.rewardType, m.rewardAmount);
                return { ...m, claimed: true, read: true };
            }
            return m;
        });
        if (itemsClaimed.length > 0) {
            console.log("Claimed all rewards:", itemsClaimed);
            setMails(updatedMails);
            if (selectedMailForDetail) { // If a mail was open, update its state
                const stillExists = updatedMails.find(m => m.id === selectedMailForDetail.id);
                if (stillExists) setSelectedMailForDetail(stillExists); else handleCloseMailDetail();
            }
        }
    };

    const handleDeleteAllReadAndClaimed = () => {
        const mailsToKeep = mails.filter(m => !m.read || (m.rewardType && !m.claimed));
        const numDeleted = mails.length - mailsToKeep.length;
        if (numDeleted > 0) {
            console.log(`Deleted ${numDeleted} read and claimed mails.`);
            setMails(mailsToKeep);
            if (selectedMailForDetail && !mailsToKeep.find(m => m.id === selectedMailForDetail.id)) {
                handleCloseMailDetail();
            }
        }
    };

    const unreadCount = mails.filter(mail => !mail.read).length;
    const claimableCount = mails.filter(mail => mail.rewardType && !mail.claimed).length;
    const canDeleteSome = mails.some(m => m.read && (!m.rewardType || m.claimed));

    return (
        <div className="mail-content-area">
            <div className="mail-list-header-info">
                 <span className="mail-list-title">–í—Ö–æ–¥—è—â–∏–µ ({mails.length})</span>
                 {unreadCount > 0 && <span className="mail-unread-highlight"> ({unreadCount} –Ω–æ–≤—ã—Ö)</span>}
            </div>

            <div className="mail-list-scroll-container">
                {mails.length === 0 ? (
                    <p className="mail-list-empty-text">–ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –ø—É—Å—Ç, –∫–∞–∫ —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –≥–æ–±–ª–∏–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞–±–µ–≥–∞!</p>
                ) : (
                    mails.map(mail => (
                        <div
                            key={mail.id}
                            className={`mail-list-entry ${mail.read ? 'is-read' : 'is-unread'}`}
                            onClick={() => handleOpenMailDetail(mail)}
                            role="button"
                            tabIndex={0}
                            onKeyPress={(e) => (e.key === 'Enter' || e.key === ' ') && handleOpenMailDetail(mail)}
                        >
                            <div className="mail-entry-indicator">
                                {mail.rewardType && !mail.claimed ? 
                                    <span className="mail-icon reward-pending" role="img" aria-label="–ï—Å—Ç—å –Ω–∞–≥—Ä–∞–¥–∞">üéÅ</span> : 
                                    <span className={`mail-icon ${mail.read ? 'read-visual' : 'unread-visual'}`} role="img" aria-label={mail.read ? "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ" : "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ"}>
                                        {mail.read ? '‚úâÔ∏è' : 'üìß'}
                                    </span>
                                }
                            </div>
                            <div className="mail-entry-summary">
                                <div className="mail-entry-sender">{mail.sender}</div>
                                <div className="mail-entry-title">{mail.title}</div>
                            </div>
                            <div className="mail-entry-date">{mail.date}</div>
                        </div>
                    ))
                )}
            </div>

            {(claimableCount > 0 || canDeleteSome) && (
                <div className="mail-list-footer">
                    {claimableCount > 0 && (
                        <button onClick={handleClaimAll} className="mail-footer-action-button claim-all-btn">
                            <span role="img" aria-label="–î–µ–Ω—å–≥–∏">üí∞</span> –ó–∞–±—Ä–∞—Ç—å –≤—Å–µ ({claimableCount})
                        </button>
                    )}
                    {canDeleteSome && (
                         <button onClick={handleDeleteAllReadAndClaimed} className="mail-footer-action-button delete-read-btn">
                            <span role="img" aria-label="–ö–æ—Ä–∑–∏–Ω–∞">üóëÔ∏è</span> –û—á–∏—Å—Ç–∏—Ç—å
                        </button>
                    )}
                </div>
            )}

            {/* Detail Popup is managed here */}
            <MailDetailPopup
                mail={selectedMailForDetail}
                onClose={handleCloseMailDetail}
                onClaim={handleClaimRewardFromDetail}
                onDelete={handleDeleteMailFromDetail}
            />
        </div>
    );
};

export default MailPopupContent;