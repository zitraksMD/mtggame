// src/components/popups/ItemDetailPopup.jsx
import React, { useMemo } from 'react';
import { motion } from 'framer-motion';
import useGameStore from '../../store/useGameStore'; // –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ upgradeEquippedItem, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º
import { 
    calculateItemStat, 
    // getGoldUpgradeCost, // –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ Inventory –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    // getDiamondUpgradeCost // –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ø–∞–ø —Å–∞–º –±—É–¥–µ—Ç –∏—Ö –≤—ã–∑—ã–≤–∞—Ç—å
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–ø –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ TODO
    MAX_ITEM_LEVEL 
} from '../../data/itemsDatabase'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ø–∞–ø–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª –∞–Ω–∏–º–∞—Ü–∏–π, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –µ—â–µ –≥–¥–µ-—Ç–æ)
const popupBackdropVariants = {
    initial: { opacity: 0 },
    animate: { opacity: 1 },
    exit: { opacity: 0 },
    transition: { duration: 0.2 }
};
const popupContentVariants = {
    initial: { opacity: 0, scale: 0.9 },
    animate: { opacity: 1, scale: 1 },
    exit: { opacity: 0, scale: 0.9 },
    transition: { duration: 0.2, delay: 0.05 }
};

// –•–µ–ª–ø–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —Å—Ç–∞—Ç–æ–≤ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –∏–∑ Inventory.jsx)
const renderStatLine = (labelWithIcon, value, diffValue, isPercent) => {
    const hasValue = value !== undefined && value !== null && (typeof value === 'string' ? parseFloat(value) !== 0 : value !== 0);
    const showDiff = diffValue !== undefined && diffValue !== null && diffValue !== 0;

    if (!hasValue && !showDiff && value !== 0) return null; // –ù–µ —Ä–µ–Ω–¥–µ—Ä–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è (–∫—Ä–æ–º–µ 0) –∏ –Ω–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã

    let diffElement = null;
    if (showDiff) {
        const diffClass = diffValue > 0 ? 'positive' : 'negative';
        const diffSymbol = diffValue > 0 ? '‚ñ≤' : '‚ñº';
        const diffDisplay = `${diffValue > 0 ? '+' : ''}${isPercent ? (diffValue * 100).toFixed(1) : diffValue.toFixed(0)}${isPercent ? '%' : ''}`;
        diffElement = <span className={`stat-diff ${diffClass}`}> ({diffSymbol}{diffDisplay})</span>;
    }
    
    const valueDisplay = hasValue || value === 0
        ? `${!isPercent && value > 0 ? '+' : ''}${isPercent ? (value * 100).toFixed(1) : value}${isPercent ? '%' : ''}`
        : '-';


    return (
        <p className="popup-stat-line">
            <span className="label">{labelWithIcon}:</span>
            <span className="value">{valueDisplay}{diffElement}</span>
        </p>
    );
};


const ItemDetailPopup = ({
    item, // –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç { id, type, rarity, level, name, image, description, setId, maxLevel, ... }
    equippedItems, // –æ–±—ä–µ–∫—Ç –≤—Å–µ—Ö –Ω–∞–¥–µ—Ç—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    onClose,
    onEquipItem,
    onUnequipItem,
    onUpgradeItem, // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ Inventory
    // upgradeCostGold, // –ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ Inventory
    // upgradeCostDiamonds, // –ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ Inventory
}) => {
    if (!item) return null;

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –Ω–∞–¥–µ—Ç –≤ —ç—Ç–æ–º –∂–µ —Å–ª–æ—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const currentlyEquippedInSlot = equippedItems[item.type] || null;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –Ω–∞–¥–µ—Ç–æ–≥–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const selectedItemStats = {
        hpBonus: calculateItemStat(item.type, "hpBonus", item.rarity, item.level),
        attackBonus: calculateItemStat(item.type, "attackBonus", item.rarity, item.level),
        attackSpeedBonus: calculateItemStat(item.type, "attackSpeedBonus", item.rarity, item.level),
        critChanceBonus: calculateItemStat(item.type, "critChanceBonus", item.rarity, item.level),
        doubleStrikeChanceBonus: calculateItemStat(item.type, "doubleStrikeChanceBonus", item.rarity, item.level),
    };

    const equippedInSlotStats = currentlyEquippedInSlot ? {
        hpBonus: calculateItemStat(currentlyEquippedInSlot.type, "hpBonus", currentlyEquippedInSlot.rarity, currentlyEquippedInSlot.level),
        attackBonus: calculateItemStat(currentlyEquippedInSlot.type, "attackBonus", currentlyEquippedInSlot.rarity, currentlyEquippedInSlot.level),
        attackSpeedBonus: calculateItemStat(currentlyEquippedInSlot.type, "attackSpeedBonus", currentlyEquippedInSlot.rarity, currentlyEquippedInSlot.level),
        critChanceBonus: calculateItemStat(currentlyEquippedInSlot.type, "critChanceBonus", currentlyEquippedInSlot.rarity, currentlyEquippedInSlot.level),
        doubleStrikeChanceBonus: calculateItemStat(currentlyEquippedInSlot.type, "doubleStrikeChanceBonus", currentlyEquippedInSlot.rarity, currentlyEquippedInSlot.level),
    } : null;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Å—Ç–∞—Ç–æ–≤
    const statDiffs = useMemo(() => {
        if (!currentlyEquippedInSlot || item.uid === currentlyEquippedInSlot.uid) return null;
        
        const diffs = {};
        const statKeys = ["hpBonus", "attackBonus", "attackSpeedBonus", "critChanceBonus", "doubleStrikeChanceBonus"];
        statKeys.forEach(key => {
            const selectedVal = selectedItemStats[key] || 0;
            const equippedVal = equippedInSlotStats[key] || 0;
            diffs[key.replace('Bonus','')] = selectedVal - equippedVal;
        });
        return diffs;
    }, [item, currentlyEquippedInSlot, selectedItemStats, equippedInSlotStats]);

    const isEquipped = equippedItems[item.type]?.uid === item.uid;

    // TODO: –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–µ—Å—å –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á–∞ —á–µ—Ä–µ–∑ props
    // const goldCost = getGoldUpgradeCost(item.level, item.rarity);
    // const diamondCost = getDiamondUpgradeCost(item.level, item.rarity);
    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º placeholder –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const displayUpgradeCost = () => {
        // if (item.level >= item.maxLevel) return "";
        // return `(${goldCost}üí∞ ${diamondCost > 0 ? diamondCost + 'üíé' : ''})`;
        return "(TODO: Cost)"; // –ó–∞–≥–ª—É—à–∫–∞
    };

    return (
        <motion.div
            key="item-popup-backdrop"
            className="item-popup-backdrop"
            variants={popupBackdropVariants}
            initial="initial"
            animate="animate"
            exit="exit"
            onClick={onClose}
        >
            <motion.div
                className="item-popup-content"
                onClick={(e) => e.stopPropagation()}
                variants={popupContentVariants}
            >
                <button className="popup-close-x" onClick={onClose}>‚úñ</button>

                <div className={`popup-header simple rarity-border-${item.rarity?.toLowerCase() || 'common'}`}>
                    <h3 className="popup-title">{item.name}</h3>
                    <div className="popup-subtitle">
                        <span className={`rarity-text rarity-${item.rarity?.toLowerCase() || 'common'}`}>
                            {item.rarity || 'Common'}
                        </span>
                        <span className="separator"> - </span>
                        <span className="item-type-text">{item.type || '–ü—Ä–µ–¥–º–µ—Ç'}</span>
                    </div>
                </div>

                <div className="popup-body">
                    <div className="popup-main-row">
                        <div className="popup-left-col">
                            <div className={`popup-icon-area rarity-${item.rarity?.toLowerCase() || 'common'}`}>
                                <img src={item.image || "/assets/default-item.png"} alt={item.name} className="popup-icon"/>
                            </div>
                        </div>
                        <div className="popup-details-col">
                            {isEquipped && (item.maxLevel > 0 || item.level > 0) && (
                                <div className="item-level-display">
                                    <span className="label">–£—Ä–æ–≤–µ–Ω—å:</span>
                                    <span className="value">{item.level || 0} / {item.maxLevel || MAX_ITEM_LEVEL}</span>
                                </div>
                            )}
                            {isEquipped && (item.maxLevel > 0 || item.level > 0) && 
                             (item.description || item.setId) && <hr className="popup-divider thin" />}

                            <div className="popup-stats-area">
                                {renderStatLine("üíñ –•–ü", selectedItemStats.hpBonus, statDiffs?.hp, false)}
                                {renderStatLine("‚öîÔ∏è –£—Ä–æ–Ω", selectedItemStats.attackBonus, statDiffs?.attack, false)}
                                {renderStatLine("üí® –°–∫–æ—Ä. –∞—Ç–∞–∫–∏", selectedItemStats.attackSpeedBonus, statDiffs?.attackSpeed, true)}
                                {renderStatLine("üí• –ö—Ä–∏—Ç. —à–∞–Ω—Å", selectedItemStats.critChanceBonus, statDiffs?.critChance, true)}
                                {renderStatLine("‚úåÔ∏è –î–≤–æ–π–Ω–æ–π —É–¥–∞—Ä", selectedItemStats.doubleStrikeChanceBonus, statDiffs?.doubleStrike, true)}
                                {![
                                    selectedItemStats.hpBonus, selectedItemStats.attackBonus, selectedItemStats.attackSpeedBonus,
                                    selectedItemStats.critChanceBonus, selectedItemStats.doubleStrikeChanceBonus
                                ].some(stat => stat !== undefined && stat !== 0) && (
                                    <p className="no-stats">–ù–µ—Ç –±–∞–∑–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</p>
                                )}
                            </div>

                            {item.description && (
                                <>
                                    <hr className="popup-divider" />
                                    <div className="popup-description-area">
                                        <p>{item.description}</p>
                                    </div>
                                </>
                            )}
                            {item.setId && (
                                <>
                                    <hr className="popup-divider" />
                                    <div className="popup-set-bonus-area">
                                        <h4>–ë–æ–Ω—É—Å –ö–æ–º–ø–ª–µ–∫—Ç–∞ (Placeholder)</h4>
                                        <p>–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫ –∫–æ–º–ø–ª–µ–∫—Ç—É: {item.setId}</p>
                                        {/* TODO: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–µ—Ç–∞ */}
                                    </div>
                                </>
                            )}
                        </div>
                    </div>
                </div>

                <div className="popup-buttons">
                    {isEquipped ? (
                        <>
                            <button className="button-unequip" onClick={() => onUnequipItem(item.type)}>–°–Ω—è—Ç—å</button>
                            {item.maxLevel > 0 && ( // –ò—Å–ø–æ–ª—å–∑—É–µ–º item.maxLevel –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
                                <button
                                    className="button-upgrade"
                                    disabled={item.level >= (item.maxLevel || MAX_ITEM_LEVEL) /* || !canAffordUpgrade */}
                                    onClick={() => onUpgradeItem(item)}
                                >
                                    –£–ª—É—á—à–∏—Ç—å {item.level < (item.maxLevel || MAX_ITEM_LEVEL) ? `(${(item.level || 0) + 1})` : '(–ú–∞–∫—Å)'}
                                    <span className="upgrade-cost"> {displayUpgradeCost()}</span>
                                </button>
                            )}
                        </>
                    ) : (
                        <>
                            <button 
                                className={currentlyEquippedInSlot ? "button-change" : "button-equip"} 
                                onClick={() => onEquipItem(item)}
                            >
                                {currentlyEquippedInSlot ? "–ü–æ–º–µ–Ω—è—Ç—å" : "–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å"}
                            </button>
                        </>
                    )}
                </div>
            </motion.div>
        </motion.div>
    );
};

export default ItemDetailPopup;